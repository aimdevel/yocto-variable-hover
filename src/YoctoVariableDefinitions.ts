export interface Definition{
    name: string;
    content: string;
}

export var yoctoVariables:Array<Definition> = [
      { name:"ABIEXTENSION", content:"Extension to the Application Binary Interface (ABI) field of the GNU\ncanonical architecture name (e.g. \"eabi\").\n\nABI extensions are set in the machine include files. For example, the\n``meta/conf/machine/include/arm/arch-arm.inc`` file sets the\nfollowing extension::\n\n   ABIEXTENSION = \"eabi\"\n\n" },
      { name:"ALLOW_EMPTY", content:"Specifies whether to produce an output package even if it is empty.\nBy default, BitBake does not produce empty packages. This default\nbehavior can cause issues when there is an\n:term:`RDEPENDS` or some other hard runtime\nrequirement on the existence of the package.\n\nLike all package-controlling variables, you must always use them in\nconjunction with a package name override, as in::\n\n   ALLOW_EMPTY:${PN} = \"1\"\n   ALLOW_EMPTY:${PN}-dev = \"1\"\n   ALLOW_EMPTY:${PN}-staticdev = \"1\"\n\n" },
      { name:"ALTERNATIVE", content:"Lists commands in a package that need an alternative binary naming\nscheme. Sometimes the same command is provided in multiple packages.\nWhen this occurs, the OpenEmbedded build system needs to use the\nalternatives system to create a different binary naming scheme so the\ncommands can co-exist.\n\nTo use the variable, list out the package's commands that are also\nprovided by another package. For example, if the ``busybox`` package\nhas four such commands, you identify them as follows::\n\n   ALTERNATIVE:busybox = \"sh sed test bracket\"\n\nFor more information on the alternatives system, see the\n\":ref:`ref-classes-update-alternatives`\"\nsection.\n\n" },
      { name:"ALTERNATIVE_LINK_NAME", content:"Used by the alternatives system to map duplicated commands to actual\nlocations. For example, if the ``bracket`` command provided by the\n``busybox`` package is duplicated through another package, you must\nuse the :term:`ALTERNATIVE_LINK_NAME` variable to specify the actual\nlocation::\n\n   ALTERNATIVE_LINK_NAME[bracket] = \"/usr/bin/[\"\n\nIn this example, the binary for the ``bracket`` command (i.e. ``[``)\nfrom the ``busybox`` package resides in ``/usr/bin/``.\n\n.. note::\n\n   If :term:`ALTERNATIVE_LINK_NAME` is not defined, it defaults to ``${bindir}/name``.\n\nFor more information on the alternatives system, see the\n\":ref:`ref-classes-update-alternatives`\"\nsection.\n\n" },
      { name:"ALTERNATIVE_PRIORITY", content:"Used by the alternatives system to create default priorities for\nduplicated commands. You can use the variable to create a single\ndefault regardless of the command name or package, a default for\nspecific duplicated commands regardless of the package, or a default\nfor specific commands tied to particular packages. Here are the\navailable syntax forms::\n\n   ALTERNATIVE_PRIORITY = \"priority\"\n   ALTERNATIVE_PRIORITY[name] = \"priority\"\n   ALTERNATIVE_PRIORITY_pkg[name] = \"priority\"\n\nFor more information on the alternatives system, see the\n\":ref:`ref-classes-update-alternatives`\"\nsection.\n\n" },
      { name:"ALTERNATIVE_TARGET", content:"Used by the alternatives system to create default link locations for\nduplicated commands. You can use the variable to create a single\ndefault location for all duplicated commands regardless of the\ncommand name or package, a default for specific duplicated commands\nregardless of the package, or a default for specific commands tied to\nparticular packages. Here are the available syntax forms::\n\n   ALTERNATIVE_TARGET = \"target\"\n   ALTERNATIVE_TARGET[name] = \"target\"\n   ALTERNATIVE_TARGET_pkg[name] = \"target\"\n\n.. note::\n\n   If :term:`ALTERNATIVE_TARGET` is not defined, it inherits the value\n   from the :term:`ALTERNATIVE_LINK_NAME` variable.\n\n   If :term:`ALTERNATIVE_LINK_NAME` and :term:`ALTERNATIVE_TARGET` are the\n   same, the target for :term:`ALTERNATIVE_TARGET` has \"``.{BPN}``\"\n   appended to it.\n\n   Finally, if the file referenced has not been renamed, the\n   alternatives system will rename it to avoid the need to rename\n   alternative files in the :ref:`ref-tasks-install`\n   task while retaining support for the command if necessary.\n\nFor more information on the alternatives system, see the\n\":ref:`ref-classes-update-alternatives`\" section.\n\n" },
      { name:"ANY_OF_DISTRO_FEATURES", content:"When inheriting the :ref:`ref-classes-features_check`\nclass, this variable identifies a list of distribution features where\nat least one must be enabled in the current configuration in order\nfor the OpenEmbedded build system to build the recipe. In other words,\nif none of the features listed in :term:`ANY_OF_DISTRO_FEATURES`\nappear in :term:`DISTRO_FEATURES` within the current configuration, then\nthe recipe will be skipped, and if the build system attempts to build\nthe recipe then an error will be triggered.\n\n" },
      { name:"APPEND", content:"An override list of append strings for each target specified with\n:term:`LABELS`.\n\nSee the :ref:`ref-classes-grub-efi` class for more\ninformation on how this variable is used.\n\n" },
      { name:"AR", content:"The minimal command and arguments used to run ``ar``.\n\n" },
      { name:"ARCHIVER_MODE", content:"When used with the :ref:`ref-classes-archiver` class,\ndetermines the type of information used to create a released archive.\nYou can use this variable to create archives of patched source,\noriginal source, configured source, and so forth by employing the\nfollowing variable flags (varflags)::\n\n   ARCHIVER_MODE[src] = \"original\"                   # Uses original (unpacked) source files.\n   ARCHIVER_MODE[src] = \"patched\"                    # Uses patched source files. This is the default.\n   ARCHIVER_MODE[src] = \"configured\"                 # Uses configured source files.\n   ARCHIVER_MODE[diff] = \"1\"                         # Uses patches between do_unpack and do_patch.\n   ARCHIVER_MODE[diff-exclude] ?= \"file file ...\"    # Lists files and directories to exclude from diff.\n   ARCHIVER_MODE[dumpdata] = \"1\"                     # Uses environment data.\n   ARCHIVER_MODE[recipe] = \"1\"                       # Uses recipe and include files.\n   ARCHIVER_MODE[srpm] = \"1\"                         # Uses RPM package files.\n\nFor information on how the variable works, see the\n``meta/classes/archiver.bbclass`` file in the :term:`Source Directory`.\n\n" },
      { name:"AS", content:"Minimal command and arguments needed to run the assembler.\n\n" },
      { name:"ASSUME_PROVIDED", content:"Lists recipe names (:term:`PN` values) BitBake does not\nattempt to build. Instead, BitBake assumes these recipes have already\nbeen built.\n\nIn OpenEmbedded-Core, :term:`ASSUME_PROVIDED` mostly specifies native\ntools that should not be built. An example is ``git-native``, which\nwhen specified, allows for the Git binary from the host to be used\nrather than building ``git-native``.\n\n" },
      { name:"ASSUME_SHLIBS", content:"Provides additional ``shlibs`` provider mapping information, which\nadds to or overwrites the information provided automatically by the\nsystem. Separate multiple entries using spaces.\n\nAs an example, use the following form to add an ``shlib`` provider of\nshlibname in packagename with the optional version::\n\n   shlibname:packagename[_version]\n\nHere is an example that adds a shared library named ``libEGL.so.1``\nas being provided by the ``libegl-implementation`` package::\n\n   ASSUME_SHLIBS = \"libEGL.so.1:libegl-implementation\"\n\n" },
      { name:"AUTHOR", content:"The email address used to contact the original author or authors in\norder to send patches and forward bugs.\n\n" },
      { name:"AUTO_LIBNAME_PKGS", content:"When the :ref:`ref-classes-debian` class is inherited,\nwhich is the default behavior, :term:`AUTO_LIBNAME_PKGS` specifies which\npackages should be checked for libraries and renamed according to\nDebian library package naming.\n\nThe default value is \"${PACKAGES}\", which causes the\n:ref:`ref-classes-debian` class to act on all packages that are\nexplicitly generated by the recipe.\n\n" },
      { name:"AUTOREV", content:"When :term:`SRCREV` is set to the value of this variable, it specifies to\nuse the latest source revision in the repository. Here is an example::\n\n   SRCREV = \"${AUTOREV}\"\n\nIf you use the previous statement to retrieve the latest version of\nsoftware, you need to be sure :term:`PV` contains\n``${``\\ :term:`SRCPV`\\ ``}``. For example, suppose you have a kernel\nrecipe that inherits the :ref:`ref-classes-kernel` class and you\nuse the previous statement. In this example, ``${SRCPV}`` does not\nautomatically get into :term:`PV`. Consequently, you need to change\n:term:`PV` in your recipe so that it does contain ``${SRCPV}``.\n\nFor more information see the\n\":ref:`dev-manual/packages:automatically incrementing a package version number`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"AUTO_SYSLINUXMENU", content:"Enables creating an automatic menu for the syslinux bootloader. You\nmust set this variable in your recipe. The\n:ref:`ref-classes-syslinux` class checks this variable.\n\n" },
      { name:"AVAILTUNES", content:"The list of defined CPU and Application Binary Interface (ABI)\ntunings (i.e. \"tunes\") available for use by the OpenEmbedded build\nsystem.\n\nThe list simply presents the tunes that are available. Not all tunes\nmay be compatible with a particular machine configuration, or with\neach other in a\n:ref:`Multilib <dev-manual/libraries:combining multiple versions of library files into one image>`\nconfiguration.\n\nTo add a tune to the list, be sure to append it with spaces using the\n\"+=\" BitBake operator. Do not simply replace the list by using the\n\"=\" operator. See the\n\":ref:`bitbake-user-manual/bitbake-user-manual-metadata:basic syntax`\" section in the BitBake\nUser Manual for more information.\n\n" },
      { name:"AZ_SAS", content:"Azure Storage Shared Access Signature, when using the\n:ref:`Azure Storage fetcher (az://) <bitbake-user-manual/bitbake-user-manual-fetching:fetchers>`\nThis variable can be defined to be used by the fetcher to authenticate\nand gain access to non-public artifacts::\n\n   AZ_SAS = \"\"se=2021-01-01&sp=r&sv=2018-11-09&sr=c&skoid=<skoid>&sig=<signature>\"\"\n\nFor more information see Microsoft's Azure Storage documentation at\nhttps://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview\n\n" },
      { name:"B", content:"The directory within the :term:`Build Directory` in which the\nOpenEmbedded build system places generated objects during a recipe's\nbuild process. By default, this directory is the same as the\n:term:`S` directory, which is defined as::\n\n   S = \"${WORKDIR}/${BP}\"\n\nYou can separate the (:term:`S`) directory and the directory pointed to\nby the :term:`B` variable. Most Autotools-based recipes support\nseparating these directories. The build system defaults to using\nseparate directories for ``gcc`` and some kernel recipes.\n\n" },
      { name:"BAD_RECOMMENDATIONS", content:"Lists \"recommended-only\" packages to not install. Recommended-only\npackages are packages installed only through the\n:term:`RRECOMMENDS` variable. You can prevent any\nof these \"recommended\" packages from being installed by listing them\nwith the :term:`BAD_RECOMMENDATIONS` variable::\n\n   BAD_RECOMMENDATIONS = \"package_name package_name package_name ...\"\n\nYou can set this variable globally in your ``local.conf`` file or you\ncan attach it to a specific image recipe by using the recipe name\noverride::\n\n   BAD_RECOMMENDATIONS:pn-target_image = \"package_name\"\n\nIt is important to realize that if you choose to not install packages\nusing this variable and some other packages are dependent on them\n(i.e. listed in a recipe's :term:`RDEPENDS`\nvariable), the OpenEmbedded build system ignores your request and\nwill install the packages to avoid dependency errors.\n\nThis variable is supported only when using the IPK and RPM\npackaging backends. DEB is not supported.\n\nSee the :term:`NO_RECOMMENDATIONS` and the\n:term:`PACKAGE_EXCLUDE` variables for related\ninformation.\n\n" },
      { name:"BASE_LIB", content:"The library directory name for the CPU or Application Binary\nInterface (ABI) tune. The :term:`BASE_LIB` applies only in the Multilib\ncontext. See the \":ref:`dev-manual/libraries:combining multiple versions of library files into one image`\"\nsection in the Yocto Project Development Tasks Manual for information\non Multilib.\n\nThe :term:`BASE_LIB` variable is defined in the machine include files in\nthe :term:`Source Directory`. If Multilib is not\nbeing used, the value defaults to \"lib\".\n\n" },
      { name:"BASE_WORKDIR", content:"Points to the base of the work directory for all recipes. The default\nvalue is \"${TMPDIR}/work\".\n\n" },
      { name:"BB_ALLOWED_NETWORKS", content:"Specifies a space-delimited list of hosts that the fetcher is allowed\nto use to obtain the required source code. Following are\nconsiderations surrounding this variable:\n\n-  This host list is only used if :term:`BB_NO_NETWORK` is either not set\n   or set to \"0\".\n\n-  There is limited support for wildcard matching against the beginning of\n   host names. For example, the following setting matches\n   ``git.gnu.org``, ``ftp.gnu.org``, and ``foo.git.gnu.org``::\n\n      BB_ALLOWED_NETWORKS = \"*.gnu.org\"\n\n   .. note::\n\n      The use of the \"``*``\" character only works at the beginning of\n      a host name and it must be isolated from the remainder of the\n      host name. You cannot use the wildcard character in any other\n      location of the name or combined with the front part of the\n      name.\n\n      For example, ``*.foo.bar`` is supported, while ``*aa.foo.bar``\n      is not.\n\n-  Mirrors not in the host list are skipped and logged in debug.\n\n-  Attempts to access networks not in the host list cause a failure.\n\nUsing :term:`BB_ALLOWED_NETWORKS` in conjunction with\n:term:`PREMIRRORS` is very useful. Adding the host\nyou want to use to :term:`PREMIRRORS` results in the source code being\nfetched from an allowed location and avoids raising an error when a\nhost that is not allowed is in a :term:`SRC_URI`\nstatement. This is because the fetcher does not attempt to use the\nhost listed in :term:`SRC_URI` after a successful fetch from the\n:term:`PREMIRRORS` occurs.\n\n" },
      { name:"BB_BASEHASH_IGNORE_VARS", content:"See :term:`bitbake:BB_BASEHASH_IGNORE_VARS` in the BitBake manual.\n\n" },
      { name:"BB_CACHEDIR", content:"See :term:`bitbake:BB_CACHEDIR` in the BitBake manual.\n\n" },
      { name:"BB_CHECK_SSL_CERTS", content:"See :term:`bitbake:BB_CHECK_SSL_CERTS` in the BitBake manual.\n\n" },
      { name:"BB_CONSOLELOG", content:"See :term:`bitbake:BB_CONSOLELOG` in the BitBake manual.\n\n" },
      { name:"BB_CURRENTTASK", content:"See :term:`bitbake:BB_CURRENTTASK` in the BitBake manual.\n\n" },
      { name:"BB_DANGLINGAPPENDS_WARNONLY", content:"Defines how BitBake handles situations where an append file\n(``.bbappend``) has no corresponding recipe file (``.bb``). This\ncondition often occurs when layers get out of sync (e.g. ``oe-core``\nbumps a recipe version and the old recipe no longer exists and the\nother layer has not been updated to the new version of the recipe\nyet).\n\nThe default fatal behavior is safest because it is the sane reaction\ngiven something is out of sync. It is important to realize when your\nchanges are no longer being applied.\n\nYou can change the default behavior by setting this variable to \"1\",\n\"yes\", or \"true\" in your ``local.conf`` file, which is located in the\n:term:`Build Directory`: Here is an example::\n\n   BB_DANGLINGAPPENDS_WARNONLY = \"1\"\n\n" },
      { name:"BB_DEFAULT_TASK", content:"See :term:`bitbake:BB_DEFAULT_TASK` in the BitBake manual.\n\n" },
      { name:"BB_DEFAULT_UMASK", content:"See :term:`bitbake:BB_DEFAULT_UMASK` in the BitBake manual.\n\n" },
      { name:"BB_DISKMON_DIRS", content:"Monitors disk space and available inodes during the build and allows\nyou to control the build based on these parameters.\n\nDisk space monitoring is disabled by default. To enable monitoring,\nadd the :term:`BB_DISKMON_DIRS` variable to your ``conf/local.conf`` file\nfound in the :term:`Build Directory`. Use the\nfollowing form:\n\n.. code-block:: none\n\n   BB_DISKMON_DIRS = \"action,dir,threshold [...]\"\n\n   where:\n\n      action is:\n         ABORT:     Immediately stop the build when\n                    a threshold is broken.\n         STOPTASKS: Stop the build after the currently\n                    executing tasks have finished when\n                    a threshold is broken.\n         WARN:      Issue a warning but continue the\n                    build when a threshold is broken.\n                    Subsequent warnings are issued as\n                    defined by the BB_DISKMON_WARNINTERVAL\n                    variable, which must be defined in\n                    the conf/local.conf file.\n\n      dir is:\n         Any directory you choose. You can specify one or\n         more directories to monitor by separating the\n         groupings with a space.  If two directories are\n         on the same device, only the first directory\n         is monitored.\n\n      threshold is:\n         Either the minimum available disk space,\n         the minimum number of free inodes, or\n         both.  You must specify at least one.  To\n         omit one or the other, simply omit the value.\n         Specify the threshold using G, M, K for Gbytes,\n         Mbytes, and Kbytes, respectively. If you do\n         not specify G, M, or K, Kbytes is assumed by\n         default.  Do not use GB, MB, or KB.\n\nHere are some examples::\n\n   BB_DISKMON_DIRS = \"ABORT,${TMPDIR},1G,100K WARN,${SSTATE_DIR},1G,100K\"\n   BB_DISKMON_DIRS = \"STOPTASKS,${TMPDIR},1G\"\n   BB_DISKMON_DIRS = \"ABORT,${TMPDIR},,100K\"\n\nThe first example works only if you also provide the\n:term:`BB_DISKMON_WARNINTERVAL`\nvariable in the ``conf/local.conf``. This example causes the build\nsystem to immediately stop when either the disk space in\n``${TMPDIR}`` drops below 1 Gbyte or the available free inodes drops\nbelow 100 Kbytes. Because two directories are provided with the\nvariable, the build system also issue a warning when the disk space\nin the ``${SSTATE_DIR}`` directory drops below 1 Gbyte or the number\nof free inodes drops below 100 Kbytes. Subsequent warnings are issued\nduring intervals as defined by the :term:`BB_DISKMON_WARNINTERVAL`\nvariable.\n\nThe second example stops the build after all currently executing\ntasks complete when the minimum disk space in the ``${TMPDIR}``\ndirectory drops below 1 Gbyte. No disk monitoring occurs for the free\ninodes in this case.\n\nThe final example immediately stops the build when the number of\nfree inodes in the ``${TMPDIR}`` directory drops below 100 Kbytes. No\ndisk space monitoring for the directory itself occurs in this case.\n\n" },
      { name:"BB_DISKMON_WARNINTERVAL", content:"Defines the disk space and free inode warning intervals. To set these\nintervals, define the variable in your ``conf/local.conf`` file in\nthe :term:`Build Directory`.\n\nIf you are going to use the :term:`BB_DISKMON_WARNINTERVAL` variable, you\nmust also use the :term:`BB_DISKMON_DIRS`\nvariable and define its action as \"WARN\". During the build,\nsubsequent warnings are issued each time disk space or number of free\ninodes further reduces by the respective interval.\n\nIf you do not provide a :term:`BB_DISKMON_WARNINTERVAL` variable and you\ndo use :term:`BB_DISKMON_DIRS` with the \"WARN\" action, the disk\nmonitoring interval defaults to the following::\n\n   BB_DISKMON_WARNINTERVAL = \"50M,5K\"\n\nWhen specifying the variable in your configuration file, use the\nfollowing form:\n\n.. code-block:: none\n\n   BB_DISKMON_WARNINTERVAL = \"disk_space_interval,disk_inode_interval\"\n\n   where:\n\n      disk_space_interval is:\n         An interval of memory expressed in either\n         G, M, or K for Gbytes, Mbytes, or Kbytes,\n         respectively. You cannot use GB, MB, or KB.\n\n      disk_inode_interval is:\n         An interval of free inodes expressed in either\n         G, M, or K for Gbytes, Mbytes, or Kbytes,\n         respectively. You cannot use GB, MB, or KB.\n\nHere is an example::\n\n   BB_DISKMON_DIRS = \"WARN,${SSTATE_DIR},1G,100K\"\n   BB_DISKMON_WARNINTERVAL = \"50M,5K\"\n\nThese variables cause the\nOpenEmbedded build system to issue subsequent warnings each time the\navailable disk space further reduces by 50 Mbytes or the number of\nfree inodes further reduces by 5 Kbytes in the ``${SSTATE_DIR}``\ndirectory. Subsequent warnings based on the interval occur each time\na respective interval is reached beyond the initial warning (i.e. 1\nGbytes and 100 Kbytes).\n\n" },
      { name:"BB_ENV_PASSTHROUGH", content:"See :term:`bitbake:BB_ENV_PASSTHROUGH` in the BitBake manual.\n\n" },
      { name:"BB_ENV_PASSTHROUGH_ADDITIONS", content:"See :term:`bitbake:BB_ENV_PASSTHROUGH_ADDITIONS` in the BitBake manual.\n\n" },
      { name:"BB_FETCH_PREMIRRORONLY", content:"See :term:`bitbake:BB_FETCH_PREMIRRORONLY` in the BitBake manual.\n\n" },
      { name:"BB_FILENAME", content:"See :term:`bitbake:BB_FILENAME` in the BitBake manual.\n\n" },
      { name:"BB_GENERATE_MIRROR_TARBALLS", content:"Causes tarballs of the source control repositories (e.g. Git\nrepositories), including metadata, to be placed in the\n:term:`DL_DIR` directory.\n\nFor performance reasons, creating and placing tarballs of these\nrepositories is not the default action by the OpenEmbedded build\nsystem::\n\n   BB_GENERATE_MIRROR_TARBALLS = \"1\"\n\nSet this variable in your\n``local.conf`` file in the :term:`Build Directory`.\n\nOnce you have the tarballs containing your source files, you can\nclean up your :term:`DL_DIR` directory by deleting any Git or other\nsource control work directories.\n\n" },
      { name:"BB_GENERATE_SHALLOW_TARBALLS", content:"See :term:`bitbake:BB_GENERATE_SHALLOW_TARBALLS` in the BitBake manual.\n\n" },
      { name:"BB_GIT_SHALLOW", content:"See :term:`bitbake:BB_GIT_SHALLOW` in the BitBake manual.\n\n" },
      { name:"BB_GIT_SHALLOW_DEPTH", content:"See :term:`bitbake:BB_GIT_SHALLOW_DEPTH` in the BitBake manual.\n\n" },
      { name:"BB_HASHCHECK_FUNCTION", content:"See :term:`bitbake:BB_HASHCHECK_FUNCTION` in the BitBake manual.\n\n" },
      { name:"BB_HASHCONFIG_IGNORE_VARS", content:"See :term:`bitbake:BB_HASHCONFIG_IGNORE_VARS` in the BitBake manual.\n\n" },
      { name:"BB_HASHSERVE", content:"See :term:`bitbake:BB_HASHSERVE` in the BitBake manual.\n\n" },
      { name:"BB_HASHSERVE_UPSTREAM", content:"See :term:`bitbake:BB_HASHSERVE_UPSTREAM` in the BitBake manual.\n\n" },
      { name:"BB_INVALIDCONF", content:"See :term:`bitbake:BB_INVALIDCONF` in the BitBake manual.\n\n" },
      { name:"BB_LOGCONFIG", content:"See :term:`bitbake:BB_LOGCONFIG` in the BitBake manual.\n\n" },
      { name:"BB_LOGFMT", content:"See :term:`bitbake:BB_LOGFMT` in the BitBake manual.\n\n" },
      { name:"BB_MULTI_PROVIDER_ALLOWED", content:"See :term:`bitbake:BB_MULTI_PROVIDER_ALLOWED` in the BitBake manual.\n\n" },
      { name:"BB_NICE_LEVEL", content:"See :term:`bitbake:BB_NICE_LEVEL` in the BitBake manual.\n\n" },
      { name:"BB_NO_NETWORK", content:"See :term:`bitbake:BB_NO_NETWORK` in the BitBake manual.\n\n" },
      { name:"BB_NUMBER_PARSE_THREADS", content:"See :term:`bitbake:BB_NUMBER_PARSE_THREADS` in the BitBake manual.\n\n" },
      { name:"BB_NUMBER_THREADS", content:"The maximum number of tasks BitBake should run in parallel at any one\ntime. The OpenEmbedded build system automatically configures this\nvariable to be equal to the number of cores on the build system. For\nexample, a system with a dual core processor that also uses\nhyper-threading causes the :term:`BB_NUMBER_THREADS` variable to default\nto \"4\".\n\nFor single socket systems (i.e. one CPU), you should not have to\noverride this variable to gain optimal parallelism during builds.\nHowever, if you have very large systems that employ multiple physical\nCPUs, you might want to make sure the :term:`BB_NUMBER_THREADS` variable\nis not set higher than \"20\".\n\nFor more information on speeding up builds, see the\n\":ref:`dev-manual/speeding-up-build:speeding up a build`\"\nsection in the Yocto Project Development Tasks Manual.\n\nOn the other hand, if your goal is to limit the amount of system\nresources consumed by BitBake tasks, setting :term:`BB_NUMBER_THREADS`\nto a number lower than the number of CPU threads in your machine\nwon't be sufficient. That's because each package will still be built\nand installed through a number of parallel jobs specified by the\n:term:`PARALLEL_MAKE` variable, which is by default the number of CPU\nthreads in your system, and is not impacted by the\n:term:`BB_NUMBER_THREADS` value.\n\nSo, if you set :term:`BB_NUMBER_THREADS` to \"1\" but don't set\n:term:`PARALLEL_MAKE`, most of your system resources will be consumed\nanyway.\n\nTherefore, if you intend to reduce the load of your build system by\nsetting :term:`BB_NUMBER_THREADS` to a relatively low value compared\nto the number of CPU threads on your system, you should also set\n:term:`PARALLEL_MAKE` to a similarly low value.\n\nAn alternative to using :term:`BB_NUMBER_THREADS` to keep the usage\nof build system resources under control is to use the smarter\n:term:`BB_PRESSURE_MAX_CPU`, :term:`BB_PRESSURE_MAX_IO` or\n:term:`BB_PRESSURE_MAX_MEMORY` controls. They will prevent BitBake\nfrom starting new tasks as long as thresholds are exceeded. Anyway,\nas with :term:`BB_NUMBER_THREADS`, such controls won't prevent the\ntasks already being run from using all CPU threads on the system\nif :term:`PARALLEL_MAKE` is not set to a low value.\n\n" },
      { name:"BB_ORIGENV", content:"See :term:`bitbake:BB_ORIGENV` in the BitBake manual.\n\n" },
      { name:"BB_PRESERVE_ENV", content:"See :term:`bitbake:BB_PRESERVE_ENV` in the BitBake manual.\n\n" },
      { name:"BB_PRESSURE_MAX_CPU", content:"See :term:`bitbake:BB_PRESSURE_MAX_CPU` in the BitBake manual.\n\n" },
      { name:"BB_PRESSURE_MAX_IO", content:"See :term:`bitbake:BB_PRESSURE_MAX_IO` in the BitBake manual.\n\n" },
      { name:"BB_PRESSURE_MAX_MEMORY", content:"See :term:`bitbake:BB_PRESSURE_MAX_MEMORY` in the BitBake manual.\n\n" },
      { name:"BB_RUNFMT", content:"See :term:`bitbake:BB_RUNFMT` in the BitBake manual.\n\n" },
      { name:"BB_RUNTASK", content:"See :term:`bitbake:BB_RUNTASK` in the BitBake manual.\n\n" },
      { name:"BB_SCHEDULER", content:"See :term:`bitbake:BB_SCHEDULER` in the BitBake manual.\n\n" },
      { name:"BB_SCHEDULERS", content:"See :term:`bitbake:BB_SCHEDULERS` in the BitBake manual.\n\n" },
      { name:"BB_SERVER_TIMEOUT", content:"Specifies the time (in seconds) after which to unload the BitBake\nserver due to inactivity. Set :term:`BB_SERVER_TIMEOUT` to determine how\nlong the BitBake server stays resident between invocations.\n\nFor example, the following statement in your ``local.conf`` file\ninstructs the server to be unloaded after 20 seconds of inactivity::\n\n   BB_SERVER_TIMEOUT = \"20\"\n\nIf you want the server to never be unloaded,\nset :term:`BB_SERVER_TIMEOUT` to \"-1\".\n\n" },
      { name:"BB_SETSCENE_DEPVALID", content:"See :term:`bitbake:BB_SETSCENE_DEPVALID` in the BitBake manual.\n\n" },
      { name:"BB_SIGNATURE_EXCLUDE_FLAGS", content:"See :term:`bitbake:BB_SIGNATURE_EXCLUDE_FLAGS` in the BitBake manual.\n\n" },
      { name:"BB_SIGNATURE_HANDLER", content:"See :term:`bitbake:BB_SIGNATURE_HANDLER` in the BitBake manual.\n\n" },
      { name:"BB_SRCREV_POLICY", content:"See :term:`bitbake:BB_SRCREV_POLICY` in the BitBake manual.\n\n" },
      { name:"BB_STRICT_CHECKSUM", content:"See :term:`bitbake:BB_STRICT_CHECKSUM` in the BitBake manual.\n\n" },
      { name:"BB_TASK_IONICE_LEVEL", content:"See :term:`bitbake:BB_TASK_IONICE_LEVEL` in the BitBake manual.\n\n" },
      { name:"BB_TASK_NICE_LEVEL", content:"See :term:`bitbake:BB_TASK_NICE_LEVEL` in the BitBake manual.\n\n" },
      { name:"BB_TASKHASH", content:"See :term:`bitbake:BB_TASKHASH` in the BitBake manual.\n\n" },
      { name:"BB_VERBOSE_LOGS", content:"See :term:`bitbake:BB_VERBOSE_LOGS` in the BitBake manual.\n\n" },
      { name:"BB_WORKERCONTEXT", content:"See :term:`bitbake:BB_WORKERCONTEXT` in the BitBake manual.\n\n" },
      { name:"BBCLASSEXTEND", content:"Allows you to extend a recipe so that it builds variants of the\nsoftware. There are common variants for recipes as \"natives\" like\n``quilt-native``, which is a copy of Quilt built to run on the build\nsystem; \"crosses\" such as ``gcc-cross``, which is a compiler built to\nrun on the build machine but produces binaries that run on the target\n:term:`MACHINE`; \":ref:`ref-classes-nativesdk`\", which\ntargets the SDK machine instead of :term:`MACHINE`; and \"mulitlibs\" in\nthe form \"``multilib:``\\ multilib_name\".\n\nTo build a different variant of the recipe with a minimal amount of\ncode, it usually is as simple as adding the following to your recipe::\n\n   BBCLASSEXTEND =+ \"native nativesdk\"\n   BBCLASSEXTEND =+ \"multilib:multilib_name\"\n\n.. note::\n\n   Internally, the :term:`BBCLASSEXTEND` mechanism generates recipe\n   variants by rewriting variable values and applying overrides such\n   as ``:class-native``. For example, to generate a native version of\n   a recipe, a :term:`DEPENDS` on \"foo\" is rewritten\n   to a :term:`DEPENDS` on \"foo-native\".\n\n   Even when using :term:`BBCLASSEXTEND`, the recipe is only parsed once.\n   Parsing once adds some limitations. For example, it is not\n   possible to include a different file depending on the variant,\n   since ``include`` statements are processed when the recipe is\n   parsed.\n\n" },
      { name:"BBDEBUG", content:"See :term:`bitbake:BBDEBUG` in the BitBake manual.\n\n" },
      { name:"BBFILE_COLLECTIONS", content:"Lists the names of configured layers. These names are used to find\nthe other ``BBFILE_*`` variables. Typically, each layer will append\nits name to this variable in its ``conf/layer.conf`` file.\n\n" },
      { name:"BBFILE_PATTERN", content:"Variable that expands to match files from\n:term:`BBFILES` in a particular layer. This variable\nis used in the ``conf/layer.conf`` file and must be suffixed with the\nname of the specific layer (e.g. ``BBFILE_PATTERN_emenlow``).\n\n" },
      { name:"BBFILE_PRIORITY", content:"Assigns the priority for recipe files in each layer.\n\nThis variable is useful in situations where the same recipe appears\nin more than one layer. Setting this variable allows you to\nprioritize a layer against other layers that contain the same recipe\n--- effectively letting you control the precedence for the multiple\nlayers. The precedence established through this variable stands\nregardless of a recipe's version (:term:`PV` variable). For\nexample, a layer that has a recipe with a higher :term:`PV` value but for\nwhich the :term:`BBFILE_PRIORITY` is set to have a lower precedence still\nhas a lower precedence.\n\nA larger value for the :term:`BBFILE_PRIORITY` variable results in a\nhigher precedence. For example, the value 6 has a higher precedence\nthan the value 5. If not specified, the :term:`BBFILE_PRIORITY` variable\nis set based on layer dependencies (see the :term:`LAYERDEPENDS` variable\nfor more information. The default priority, if unspecified for a\nlayer with no dependencies, is the lowest defined priority + 1 (or 1\nif no priorities are defined).\n\n.. tip::\n\n   You can use the command ``bitbake-layers show-layers``\n   to list all configured layers along with their priorities.\n\n" },
      { name:"BBFILES", content:"A space-separated list of recipe files BitBake uses to build\nsoftware.\n\nWhen specifying recipe files, you can pattern match using Python's\n`glob <https://docs.python.org/3/library/glob.html>`__ syntax.\nFor details on the syntax, see the documentation by following the\nprevious link.\n\n" },
      { name:"BBFILES_DYNAMIC", content:"Activates content when identified layers are present. You identify\nthe layers by the collections that the layers define.\n\nUse the :term:`BBFILES_DYNAMIC` variable to avoid ``.bbappend`` files\nwhose corresponding ``.bb`` file is in a layer that attempts to\nmodify other layers through ``.bbappend`` but does not want to\nintroduce a hard dependency on those other layers.\n\nUse the following form for :term:`BBFILES_DYNAMIC`:\n``collection_name:filename_pattern``.\n\nThe following example identifies two collection names and two\nfilename patterns::\n\n   BBFILES_DYNAMIC += \" \\\n      clang-layer:${LAYERDIR}/bbappends/meta-clang/*/*/*.bbappend \\\n      core:${LAYERDIR}/bbappends/openembedded-core/meta/*/*/*.bbappend \\\n      \"\n\nThis next example shows an error message that occurs because invalid\nentries are found, which cause parsing to fail:\n\n.. code-block:: none\n\n   ERROR: BBFILES_DYNAMIC entries must be of the form <collection name>:<filename pattern>, not:\n       /work/my-layer/bbappends/meta-security-isafw/*/*/*.bbappend\n       /work/my-layer/bbappends/openembedded-core/meta/*/*/*.bbappend\n\n" },
      { name:"BBINCLUDED", content:"See :term:`bitbake:BBINCLUDED` in the BitBake manual.\n\n" },
      { name:"BBINCLUDELOGS", content:"Variable that controls how BitBake displays logs on build failure.\n\n" },
      { name:"BBINCLUDELOGS_LINES", content:"If :term:`BBINCLUDELOGS` is set, specifies the\nmaximum number of lines from the task log file to print when\nreporting a failed task. If you do not set :term:`BBINCLUDELOGS_LINES`,\nthe entire log is printed.\n\n" },
      { name:"BBLAYERS", content:"Lists the layers to enable during the build. This variable is defined\nin the ``bblayers.conf`` configuration file in the :term:`Build Directory`.\nHere is an example::\n\n   BBLAYERS = \" \\\n       /home/scottrif/poky/meta \\\n       /home/scottrif/poky/meta-poky \\\n       /home/scottrif/poky/meta-yocto-bsp \\\n       /home/scottrif/poky/meta-mykernel \\\n       \"\n\nThis example enables four layers, one of which is a custom,\nuser-defined layer named ``meta-mykernel``.\n\n" },
      { name:"BBLAYERS_FETCH_DIR", content:"See :term:`bitbake:BBLAYERS_FETCH_DIR` in the BitBake manual.\n\n" },
      { name:"BBMASK", content:"Prevents BitBake from processing recipes and recipe append files.\n\nYou can use the :term:`BBMASK` variable to \"hide\" these ``.bb`` and\n``.bbappend`` files. BitBake ignores any recipe or recipe append\nfiles that match any of the expressions. It is as if BitBake does not\nsee them at all. Consequently, matching files are not parsed or\notherwise used by BitBake.\n\nThe values you provide are passed to Python's regular expression\ncompiler. Consequently, the syntax follows Python's Regular\nExpression (re) syntax. The expressions are compared against the full\npaths to the files. For complete syntax information, see Python's\ndocumentation at https://docs.python.org/3/library/re.html#regular-expression-syntax.\n\nThe following example uses a complete regular expression to tell\nBitBake to ignore all recipe and recipe append files in the\n``meta-ti/recipes-misc/`` directory::\n\n   BBMASK = \"meta-ti/recipes-misc/\"\n\nIf you want to mask out multiple directories or recipes, you can\nspecify multiple regular expression fragments. This next example\nmasks out multiple directories and individual recipes::\n\n   BBMASK += \"/meta-ti/recipes-misc/ meta-ti/recipes-ti/packagegroup/\"\n   BBMASK += \"/meta-oe/recipes-support/\"\n   BBMASK += \"/meta-foo/.*/openldap\"\n   BBMASK += \"opencv.*\\.bbappend\"\n   BBMASK += \"lzma\"\n\n.. note::\n\n   When specifying a directory name, use the trailing slash character\n   to ensure you match just that directory name.\n\n" },
      { name:"BBMULTICONFIG", content:"Specifies each additional separate configuration when you are\nbuilding targets with multiple configurations. Use this variable in\nyour ``conf/local.conf`` configuration file. Specify a\nmulticonfigname for each configuration file you are using. For\nexample, the following line specifies three configuration files::\n\n   BBMULTICONFIG = \"configA configB configC\"\n\nEach configuration file you use must reside in a ``multiconfig``\nsubdirectory of a configuration directory within a layer, or\nwithin the :term:`Build Directory` (e.g.\n``build_directory/conf/multiconfig/configA.conf`` or\n``mylayer/conf/multiconfig/configB.conf``).\n\nFor information on how to use :term:`BBMULTICONFIG` in an environment\nthat supports building targets with multiple configurations, see the\n\":ref:`dev-manual/building:building images for multiple targets using multiple configurations`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"BBPATH", content:"See :term:`bitbake:BBPATH` in the BitBake manual.\n\n" },
      { name:"BBSERVER", content:"If defined in the BitBake environment, :term:`BBSERVER` points to the\nBitBake remote server.\n\nUse the following format to export the variable to the BitBake\nenvironment::\n\n   export BBSERVER=localhost:$port\n\nBy default, :term:`BBSERVER` also appears in :term:`BB_BASEHASH_IGNORE_VARS`.\nConsequently, :term:`BBSERVER` is excluded from checksum and dependency\ndata.\n\n" },
      { name:"BBTARGETS", content:"See :term:`bitbake:BBTARGETS` in the BitBake manual.\n\n" },
      { name:"BINCONFIG", content:"When inheriting the :ref:`ref-classes-binconfig-disabled` class, this\nvariable specifies binary configuration scripts to disable in favor of\nusing ``pkg-config`` to query the information. The\n:ref:`ref-classes-binconfig-disabled` class will modify the specified\nscripts to return an error so that calls to them can be easily found\nand replaced.\n\nTo add multiple scripts, separate them by spaces. Here is an example\nfrom the ``libpng`` recipe::\n\n   BINCONFIG = \"${bindir}/libpng-config ${bindir}/libpng16-config\"\n\n" },
      { name:"BINCONFIG_GLOB", content:"When inheriting the :ref:`ref-classes-binconfig` class,\nthis variable specifies a wildcard for configuration scripts that\nneed editing. The scripts are edited to correct any paths that have\nbeen set up during compilation so that they are correct for use when\ninstalled into the sysroot and called by the build processes of other\nrecipes.\n\n.. note::\n\n   The :term:`BINCONFIG_GLOB` variable uses\n   `shell globbing <https://tldp.org/LDP/abs/html/globbingref.html>`__,\n   which is recognition and expansion of wildcards during pattern\n   matching. Shell globbing is very similar to\n   `fnmatch <https://docs.python.org/3/library/fnmatch.html#module-fnmatch>`__\n   and `glob <https://docs.python.org/3/library/glob.html>`__.\n\nFor more information on how this variable works, see\n``meta/classes-recipe/binconfig.bbclass`` in the :term:`Source Directory`.\nYou can also find general\ninformation on the class in the\n\":ref:`ref-classes-binconfig`\" section.\n\n" },
      { name:"BITBAKE_UI", content:"See :term:`bitbake:BITBAKE_UI` in the BitBake manual.\n\n" },
      { name:"BP", content:"The base recipe name and version but without any special recipe name\nsuffix (i.e. ``-native``, ``lib64-``, and so forth). :term:`BP` is\ncomprised of the following::\n\n   ${BPN}-${PV}\n\n" },
      { name:"BPN", content:"This variable is a version of the :term:`PN` variable with\ncommon prefixes and suffixes removed, such as ``nativesdk-``,\n``-cross``, ``-native``, and multilib's ``lib64-`` and ``lib32-``.\nThe exact lists of prefixes and suffixes removed are specified by the\n:term:`MLPREFIX` and\n:term:`SPECIAL_PKGSUFFIX` variables,\nrespectively.\n\n" },
      { name:"BUGTRACKER", content:"Specifies a URL for an upstream bug tracking website for a recipe.\nThe OpenEmbedded build system does not use this variable. Rather, the\nvariable is a useful pointer in case a bug in the software being\nbuilt needs to be manually reported.\n\n" },
      { name:"BUILD_ARCH", content:"Specifies the architecture of the build host (e.g. ``i686``). The\nOpenEmbedded build system sets the value of :term:`BUILD_ARCH` from the\nmachine name reported by the ``uname`` command.\n\n" },
      { name:"BUILD_AS_ARCH", content:"Specifies the architecture-specific assembler flags for the build\nhost. By default, the value of :term:`BUILD_AS_ARCH` is empty.\n\n" },
      { name:"BUILD_CC_ARCH", content:"Specifies the architecture-specific C compiler flags for the build\nhost. By default, the value of :term:`BUILD_CC_ARCH` is empty.\n\n" },
      { name:"BUILD_CCLD", content:"Specifies the linker command to be used for the build host when the C\ncompiler is being used as the linker. By default, :term:`BUILD_CCLD`\npoints to GCC and passes as arguments the value of\n:term:`BUILD_CC_ARCH`, assuming\n:term:`BUILD_CC_ARCH` is set.\n\n" },
      { name:"BUILD_CFLAGS", content:"Specifies the flags to pass to the C compiler when building for the\nbuild host. When building in the ``-native`` context,\n:term:`CFLAGS` is set to the value of this variable by\ndefault.\n\n" },
      { name:"BUILD_CPPFLAGS", content:"Specifies the flags to pass to the C preprocessor (i.e. to both the C\nand the C++ compilers) when building for the build host. When\nbuilding in the ``-native`` context, :term:`CPPFLAGS`\nis set to the value of this variable by default.\n\n" },
      { name:"BUILD_CXXFLAGS", content:"Specifies the flags to pass to the C++ compiler when building for the\nbuild host. When building in the ``-native`` context,\n:term:`CXXFLAGS` is set to the value of this variable\nby default.\n\n" },
      { name:"BUILD_FC", content:"Specifies the Fortran compiler command for the build host. By\ndefault, :term:`BUILD_FC` points to Gfortran and passes as arguments the\nvalue of :term:`BUILD_CC_ARCH`, assuming\n:term:`BUILD_CC_ARCH` is set.\n\n" },
      { name:"BUILD_LD", content:"Specifies the linker command for the build host. By default,\n:term:`BUILD_LD` points to the GNU linker (ld) and passes as arguments\nthe value of :term:`BUILD_LD_ARCH`, assuming\n:term:`BUILD_LD_ARCH` is set.\n\n" },
      { name:"BUILD_LD_ARCH", content:"Specifies architecture-specific linker flags for the build host. By\ndefault, the value of :term:`BUILD_LD_ARCH` is empty.\n\n" },
      { name:"BUILD_LDFLAGS", content:"Specifies the flags to pass to the linker when building for the build\nhost. When building in the ``-native`` context,\n:term:`LDFLAGS` is set to the value of this variable\nby default.\n\n" },
      { name:"BUILD_OPTIMIZATION", content:"Specifies the optimization flags passed to the C compiler when\nbuilding for the build host or the SDK. The flags are passed through\nthe :term:`BUILD_CFLAGS` and\n:term:`BUILDSDK_CFLAGS` default values.\n\nThe default value of the :term:`BUILD_OPTIMIZATION` variable is \"-O2\n-pipe\".\n\n" },
      { name:"BUILD_OS", content:"Specifies the operating system in use on the build host (e.g.\n\"linux\"). The OpenEmbedded build system sets the value of\n:term:`BUILD_OS` from the OS reported by the ``uname`` command --- the\nfirst word, converted to lower-case characters.\n\n" },
      { name:"BUILD_PREFIX", content:"The toolchain binary prefix used for native recipes. The OpenEmbedded\nbuild system uses the :term:`BUILD_PREFIX` value to set the\n:term:`TARGET_PREFIX` when building for :ref:`ref-classes-native` recipes.\n\n" },
      { name:"BUILD_STRIP", content:"Specifies the command to be used to strip debugging symbols from\nbinaries produced for the build host. By default, :term:`BUILD_STRIP`\npoints to\n``${``\\ :term:`BUILD_PREFIX`\\ ``}strip``.\n\n" },
      { name:"BUILD_SYS", content:"Specifies the system, including the architecture and the operating\nsystem, to use when building for the build host (i.e. when building\n:ref:`ref-classes-native` recipes).\n\nThe OpenEmbedded build system automatically sets this variable based\non :term:`BUILD_ARCH`,\n:term:`BUILD_VENDOR`, and\n:term:`BUILD_OS`. You do not need to set the\n:term:`BUILD_SYS` variable yourself.\n\n" },
      { name:"BUILD_VENDOR", content:"Specifies the vendor name to use when building for the build host.\nThe default value is an empty string (\"\").\n\n" },
      { name:"BUILDDIR", content:"Points to the location of the :term:`Build Directory`. You can define\nthis directory indirectly through the :ref:`structure-core-script` script\nby passing in a :term:`Build Directory` path when you run the script. If\nyou run the script and do not provide a :term:`Build Directory` path, the\n:term:`BUILDDIR` defaults to ``build`` in the current directory.\n\n" },
      { name:"BUILDHISTORY_COMMIT", content:"When inheriting the :ref:`ref-classes-buildhistory` class, this variable\nspecifies whether or not to commit the build history output in a local\nGit repository. If set to \"1\", this local repository will be maintained\nautomatically by the :ref:`ref-classes-buildhistory` class and a commit\nwill be created on every build for changes to each top-level subdirectory\nof the build history output (images, packages, and sdk). If you want to\ntrack changes to build history over time, you should set this value to\n\"1\".\n\nBy default, the :ref:`ref-classes-buildhistory` class\nenables committing the buildhistory output in a local Git repository::\n\n   BUILDHISTORY_COMMIT ?= \"1\"\n\n" },
      { name:"BUILDHISTORY_COMMIT_AUTHOR", content:"When inheriting the :ref:`ref-classes-buildhistory`\nclass, this variable specifies the author to use for each Git commit.\nIn order for the :term:`BUILDHISTORY_COMMIT_AUTHOR` variable to work, the\n:term:`BUILDHISTORY_COMMIT` variable must\nbe set to \"1\".\n\nGit requires that the value you provide for the\n:term:`BUILDHISTORY_COMMIT_AUTHOR` variable takes the form of \"name\nemail@host\". Providing an email address or host that is not valid\ndoes not produce an error.\n\nBy default, the :ref:`ref-classes-buildhistory` class sets the variable\nas follows::\n\n   BUILDHISTORY_COMMIT_AUTHOR ?= \"buildhistory <buildhistory@${DISTRO}>\"\n\n" },
      { name:"BUILDHISTORY_DIR", content:"When inheriting the :ref:`ref-classes-buildhistory`\nclass, this variable specifies the directory in which build history\ninformation is kept. For more information on how the variable works,\nsee the :ref:`ref-classes-buildhistory` class.\n\nBy default, the :ref:`ref-classes-buildhistory` class sets the directory\nas follows::\n\n   BUILDHISTORY_DIR ?= \"${TOPDIR}/buildhistory\"\n\n" },
      { name:"BUILDHISTORY_FEATURES", content:"When inheriting the :ref:`ref-classes-buildhistory`\nclass, this variable specifies the build history features to be\nenabled. For more information on how build history works, see the\n\":ref:`dev-manual/build-quality:maintaining build output quality`\"\nsection in the Yocto Project Development Tasks Manual.\n\nYou can specify these features in the form of a space-separated list:\n\n-  *image:* Analysis of the contents of images, which includes the\n   list of installed packages among other things.\n\n-  *package:* Analysis of the contents of individual packages.\n\n-  *sdk:* Analysis of the contents of the software development kit\n   (SDK).\n\n-  *task:* Save output file signatures for\n   :ref:`shared state <overview-manual/concepts:shared state cache>`\n   (sstate) tasks.\n   This saves one file per task and lists the SHA-256 checksums for\n   each file staged (i.e. the output of the task).\n\nBy default, the :ref:`ref-classes-buildhistory` class enables the\nfollowing features::\n\n   BUILDHISTORY_FEATURES ?= \"image package sdk\"\n\n" },
      { name:"BUILDHISTORY_IMAGE_FILES", content:"When inheriting the :ref:`ref-classes-buildhistory`\nclass, this variable specifies a list of paths to files copied from\nthe image contents into the build history directory under an\n\"image-files\" directory in the directory for the image, so that you\ncan track the contents of each file. The default is to copy\n``/etc/passwd`` and ``/etc/group``, which allows you to monitor for\nchanges in user and group entries. You can modify the list to include\nany file. Specifying an invalid path does not produce an error.\nConsequently, you can include files that might not always be present.\n\nBy default, the :ref:`ref-classes-buildhistory` class provides paths to\nthe following files::\n\n   BUILDHISTORY_IMAGE_FILES ?= \"/etc/passwd /etc/group\"\n\n" },
      { name:"BUILDHISTORY_PATH_PREFIX_STRIP", content:"When inheriting the :ref:`ref-classes-buildhistory`\nclass, this variable specifies a common path prefix that should be\nstripped off the beginning of paths in the task signature list when the\n``task`` feature is active in :term:`BUILDHISTORY_FEATURES`. This can be\nuseful when build history is populated from multiple sources that may not\nall use the same top level directory.\n\nBy default, the :ref:`ref-classes-buildhistory` class sets the variable\nas follows::\n\n   BUILDHISTORY_PATH_PREFIX_STRIP ?= \"\"\n\nIn this case, no prefixes will be stripped.\n\n" },
      { name:"BUILDHISTORY_PUSH_REPO", content:"When inheriting the :ref:`ref-classes-buildhistory` class, this variable\noptionally specifies a remote repository to which build history pushes\nGit changes. In order for :term:`BUILDHISTORY_PUSH_REPO` to work,\n:term:`BUILDHISTORY_COMMIT` must be set to \"1\".\n\nThe repository should correspond to a remote address that specifies a\nrepository as understood by Git, or alternatively to a remote name\nthat you have set up manually using ``git remote`` within the local\nrepository.\n\nBy default, the :ref:`ref-classes-buildhistory` class sets the variable\nas follows::\n\n   BUILDHISTORY_PUSH_REPO ?= \"\"\n\n" },
      { name:"BUILDNAME", content:"See :term:`bitbake:BUILDNAME` in the BitBake manual.\n\n" },
      { name:"BUILDSDK_CFLAGS", content:"Specifies the flags to pass to the C compiler when building for the\nSDK. When building in the ``nativesdk-`` context,\n:term:`CFLAGS` is set to the value of this variable by\ndefault.\n\n" },
      { name:"BUILDSDK_CPPFLAGS", content:"Specifies the flags to pass to the C pre-processor (i.e. to both the\nC and the C++ compilers) when building for the SDK. When building in\nthe ``nativesdk-`` context, :term:`CPPFLAGS` is set\nto the value of this variable by default.\n\n" },
      { name:"BUILDSDK_CXXFLAGS", content:"Specifies the flags to pass to the C++ compiler when building for the\nSDK. When building in the ``nativesdk-`` context,\n:term:`CXXFLAGS` is set to the value of this variable\nby default.\n\n" },
      { name:"BUILDSDK_LDFLAGS", content:"Specifies the flags to pass to the linker when building for the SDK.\nWhen building in the ``nativesdk-`` context,\n:term:`LDFLAGS` is set to the value of this variable\nby default.\n\n" },
      { name:"BUILDSTATS_BASE", content:"Points to the location of the directory that holds build statistics\nwhen you use and enable the :ref:`ref-classes-buildstats` class. The\n:term:`BUILDSTATS_BASE` directory defaults to\n``${``\\ :term:`TMPDIR`\\ ``}/buildstats/``.\n\n" },
      { name:"BUSYBOX_SPLIT_SUID", content:"For the BusyBox recipe, specifies whether to split the output\nexecutable file into two parts: one for features that require\n``setuid root``, and one for the remaining features (i.e. those that\ndo not require ``setuid root``).\n\nThe :term:`BUSYBOX_SPLIT_SUID` variable defaults to \"1\", which results in\nsplitting the output executable file. Set the variable to \"0\" to get\na single output executable file.\n\n" },
      { name:"BZRDIR", content:"See :term:`bitbake:BZRDIR` in the BitBake manual.\n\n" },
      { name:"CACHE", content:"Specifies the directory BitBake uses to store a cache of the\n:term:`Metadata` so it does not need to be parsed every time\nBitBake is started.\n\n" },
      { name:"CC", content:"The minimal command and arguments used to run the C compiler.\n\n" },
      { name:"CFLAGS", content:"Specifies the flags to pass to the C compiler. This variable is\nexported to an environment variable and thus made visible to the\nsoftware being built during the compilation step.\n\nDefault initialization for :term:`CFLAGS` varies depending on what is\nbeing built:\n\n-  :term:`TARGET_CFLAGS` when building for the\n   target\n\n-  :term:`BUILD_CFLAGS` when building for the\n   build host (i.e. ``-native``)\n\n-  :term:`BUILDSDK_CFLAGS` when building for\n   an SDK (i.e. ``nativesdk-``)\n\n" },
      { name:"CLASSOVERRIDE", content:"An internal variable specifying the special class override that\nshould currently apply (e.g. \"class-target\", \"class-native\", and so\nforth). The classes that use this variable (e.g.\n:ref:`ref-classes-native`, :ref:`ref-classes-nativesdk`, and so forth)\nset the variable to appropriate values.\n\n.. note::\n\n   :term:`CLASSOVERRIDE` gets its default \"class-target\" value from the\n   ``bitbake.conf`` file.\n\nAs an example, the following override allows you to install extra\nfiles, but only when building for the target::\n\n   do_install:append:class-target() {\n       install my-extra-file ${D}${sysconfdir}\n   }\n\nHere is an example where ``FOO`` is set to\n\"native\" when building for the build host, and to \"other\" when not\nbuilding for the build host::\n\n   FOO:class-native = \"native\"\n   FOO = \"other\"\n\nThe underlying mechanism behind :term:`CLASSOVERRIDE` is simply\nthat it is included in the default value of\n:term:`OVERRIDES`.\n\n" },
      { name:"CLEANBROKEN", content:"If set to \"1\" within a recipe, :term:`CLEANBROKEN` specifies that the\n``make clean`` command does not work for the software being built.\nConsequently, the OpenEmbedded build system will not try to run\n``make clean`` during the :ref:`ref-tasks-configure`\ntask, which is the default behavior.\n\n" },
      { name:"COMBINED_FEATURES", content:"Provides a list of hardware features that are enabled in both\n:term:`MACHINE_FEATURES` and\n:term:`DISTRO_FEATURES`. This select list of\nfeatures contains features that make sense to be controlled both at\nthe machine and distribution configuration level. For example, the\n\"bluetooth\" feature requires hardware support but should also be\noptional at the distribution level, in case the hardware supports\nBluetooth but you do not ever intend to use it.\n\n" },
      { name:"COMMERCIAL_AUDIO_PLUGINS", content:"This variable is specific to the :yocto_git:`GStreamer recipes\n</poky/tree/meta/recipes-multimedia/gstreamer/gstreamer1.0-meta-base.bb>`.\nIt allows to build the GStreamer `\"ugly\"\n<https://github.com/GStreamer/gst-plugins-ugly>`__  and\n`\"bad\" <https://github.com/GStreamer/gst-plugins-bad>`__ audio plugins.\n\nSee the :ref:`dev-manual/licenses:other variables related to commercial licenses`\nsection for usage details.\n\n" },
      { name:"COMMERCIAL_VIDEO_PLUGINS", content:"This variable is specific to the :yocto_git:`GStreamer recipes\n</poky/tree/meta/recipes-multimedia/gstreamer/gstreamer1.0-meta-base.bb>`.\nIt allows to build the GStreamer `\"ugly\"\n<https://github.com/GStreamer/gst-plugins-ugly>`__  and\n`\"bad\" <https://github.com/GStreamer/gst-plugins-bad>`__ video plugins.\n\nSee the :ref:`dev-manual/licenses:other variables related to commercial licenses`\nsection for usage details.\n\n" },
      { name:"COMMON_LICENSE_DIR", content:"Points to ``meta/files/common-licenses`` in the\n:term:`Source Directory`, which is where generic license\nfiles reside.\n\n" },
      { name:"COMPATIBLE_HOST", content:"A regular expression that resolves to one or more hosts (when the\nrecipe is native) or one or more targets (when the recipe is\nnon-native) with which a recipe is compatible. The regular expression\nis matched against :term:`HOST_SYS`. You can use the\nvariable to stop recipes from being built for classes of systems with\nwhich the recipes are not compatible. Stopping these builds is\nparticularly useful with kernels. The variable also helps to increase\nparsing speed since the build system skips parsing recipes not\ncompatible with the current system.\n\n" },
      { name:"COMPATIBLE_MACHINE", content:"A regular expression that resolves to one or more target machines\nwith which a recipe is compatible. The regular expression is matched\nagainst :term:`MACHINEOVERRIDES`. You can use\nthe variable to stop recipes from being built for machines with which\nthe recipes are not compatible. Stopping these builds is particularly\nuseful with kernels. The variable also helps to increase parsing\nspeed since the build system skips parsing recipes not compatible\nwith the current machine.\n\n" },
      { name:"COMPLEMENTARY_GLOB", content:"Defines wildcards to match when installing a list of complementary\npackages for all the packages explicitly (or implicitly) installed in\nan image.\n\nThe :term:`COMPLEMENTARY_GLOB` variable uses Unix filename pattern matching\n(`fnmatch <https://docs.python.org/3/library/fnmatch.html#module-fnmatch>`__),\nwhich is similar to the Unix style pathname pattern expansion\n(`glob <https://docs.python.org/3/library/glob.html>`__).\n\nThe resulting list of complementary packages is associated with an\nitem that can be added to\n:term:`IMAGE_FEATURES`. An example usage of\nthis is the \"dev-pkgs\" item that when added to :term:`IMAGE_FEATURES`\nwill install -dev packages (containing headers and other development\nfiles) for every package in the image.\n\nTo add a new feature item pointing to a wildcard, use a variable flag\nto specify the feature item name and use the value to specify the\nwildcard. Here is an example::\n\n   COMPLEMENTARY_GLOB[dev-pkgs] = '*-dev'\n\n.. note::\n\n   When installing complementary packages, recommends relationships\n   (set via :term:`RRECOMMENDS`) are always ignored.\n\n" },
      { name:"COMPONENTS_DIR", content:"Stores sysroot components for each recipe. The OpenEmbedded build\nsystem uses :term:`COMPONENTS_DIR` when constructing recipe-specific\nsysroots for other recipes.\n\nThe default is\n\"``${``\\ :term:`STAGING_DIR`\\ ``}-components``.\"\n(i.e.\n\"``${``\\ :term:`TMPDIR`\\ ``}/sysroots-components``\").\n\n" },
      { name:"CONF_VERSION", content:"Tracks the version of the local configuration file (i.e.\n``local.conf``). The value for :term:`CONF_VERSION` increments each time\n``build/conf/`` compatibility changes.\n\n" },
      { name:"CONFFILES", content:"Identifies editable or configurable files that are part of a package.\nIf the Package Management System (PMS) is being used to update\npackages on the target system, it is possible that configuration\nfiles you have changed after the original installation and that you\nnow want to remain unchanged are overwritten. In other words,\neditable files might exist in the package that you do not want reset\nas part of the package update process. You can use the :term:`CONFFILES`\nvariable to list the files in the package that you wish to prevent\nthe PMS from overwriting during this update process.\n\nTo use the :term:`CONFFILES` variable, provide a package name override\nthat identifies the resulting package. Then, provide a\nspace-separated list of files. Here is an example::\n\n   CONFFILES:${PN} += \"${sysconfdir}/file1 \\\n       ${sysconfdir}/file2 ${sysconfdir}/file3\"\n\nThere is a relationship between the :term:`CONFFILES` and :term:`FILES`\nvariables. The files listed within :term:`CONFFILES` must be a subset of\nthe files listed within :term:`FILES`. Because the configuration files\nyou provide with :term:`CONFFILES` are simply being identified so that\nthe PMS will not overwrite them, it makes sense that the files must\nalready be included as part of the package through the :term:`FILES`\nvariable.\n\n.. note::\n\n   When specifying paths as part of the :term:`CONFFILES` variable, it is\n   good practice to use appropriate path variables.\n   For example, ``${sysconfdir}`` rather than ``/etc`` or ``${bindir}``\n   rather than ``/usr/bin``. You can find a list of these variables at\n   the top of the ``meta/conf/bitbake.conf`` file in the\n   :term:`Source Directory`.\n\n" },
      { name:"CONFIG_INITRAMFS_SOURCE", content:"Identifies the initial RAM filesystem (:term:`Initramfs`) source files. The\nOpenEmbedded build system receives and uses this kernel Kconfig\nvariable as an environment variable. By default, the variable is set\nto null (\"\").\n\nThe :term:`CONFIG_INITRAMFS_SOURCE` can be either a single cpio archive\nwith a ``.cpio`` suffix or a space-separated list of directories and\nfiles for building the :term:`Initramfs` image. A cpio archive should contain\na filesystem archive to be used as an :term:`Initramfs` image. Directories\nshould contain a filesystem layout to be included in the :term:`Initramfs`\nimage. Files should contain entries according to the format described\nby the ``usr/gen_init_cpio`` program in the kernel tree.\n\nIf you specify multiple directories and files, the :term:`Initramfs` image\nwill be the aggregate of all of them.\n\nFor information on creating an :term:`Initramfs`, see the\n\":ref:`dev-manual/building:building an initial ram filesystem (Initramfs) image`\" section\nin the Yocto Project Development Tasks Manual.\n\n" },
      { name:"CONFIG_SITE", content:"A list of files that contains ``autoconf`` test results relevant to\nthe current build. This variable is used by the Autotools utilities\nwhen running ``configure``.\n\n" },
      { name:"CONFIGURE_FLAGS", content:"The minimal arguments for GNU configure.\n\n" },
      { name:"CONFLICT_DISTRO_FEATURES", content:"When inheriting the :ref:`ref-classes-features_check`\nclass, this variable identifies distribution features that would be\nin conflict should the recipe be built. In other words, if the\n:term:`CONFLICT_DISTRO_FEATURES` variable lists a feature that also\nappears in :term:`DISTRO_FEATURES` within the current configuration, then\nthe recipe will be skipped, and if the build system attempts to build\nthe recipe then an error will be triggered.\n\n" },
      { name:"CONVERSION_CMD", content:"This variable is used for storing image conversion commands.\nImage conversion can convert an image into different objects like:\n\n-   Compressed version of the image\n\n-   Checksums for the image\n\nAn example of :term:`CONVERSION_CMD` from :ref:`ref-classes-image_types`\nclass is::\n\n   CONVERSION_CMD:lzo = \"lzop -9 ${IMAGE_NAME}${IMAGE_NAME_SUFFIX}.${type}\"\n\n" },
      { name:"COPY_LIC_DIRS", content:"If set to \"1\" along with the\n:term:`COPY_LIC_MANIFEST` variable, the\nOpenEmbedded build system copies into the image the license files,\nwhich are located in ``/usr/share/common-licenses``, for each\npackage. The license files are placed in directories within the image\nitself during build time.\n\n.. note::\n\n   The :term:`COPY_LIC_DIRS` does not offer a path for adding licenses for\n   newly installed packages to an image, which might be most suitable for\n   read-only filesystems that cannot be upgraded. See the\n   :term:`LICENSE_CREATE_PACKAGE` variable for additional information.\n   You can also reference the \":ref:`dev-manual/licenses:providing license text`\"\n   section in the Yocto Project Development Tasks Manual for\n   information on providing license text.\n\n" },
      { name:"COPY_LIC_MANIFEST", content:"If set to \"1\", the OpenEmbedded build system copies the license\nmanifest for the image to\n``/usr/share/common-licenses/license.manifest`` within the image\nitself during build time.\n\n.. note::\n\n   The :term:`COPY_LIC_MANIFEST` does not offer a path for adding licenses for\n   newly installed packages to an image, which might be most suitable for\n   read-only filesystems that cannot be upgraded. See the\n   :term:`LICENSE_CREATE_PACKAGE` variable for additional information.\n   You can also reference the \":ref:`dev-manual/licenses:providing license text`\"\n   section in the Yocto Project Development Tasks Manual for\n   information on providing license text.\n\n" },
      { name:"COPYLEFT_LICENSE_EXCLUDE", content:"A space-separated list of licenses to exclude from the source archived by\nthe :ref:`ref-classes-archiver` class. In other words, if a license in a\nrecipe's :term:`LICENSE` value is in the value of\n:term:`COPYLEFT_LICENSE_EXCLUDE`, then its source is not archived by the\nclass.\n\n.. note::\n\n   The :term:`COPYLEFT_LICENSE_EXCLUDE` variable takes precedence over the\n   :term:`COPYLEFT_LICENSE_INCLUDE` variable.\n\nThe default value, which is \"CLOSED Proprietary\", for\n:term:`COPYLEFT_LICENSE_EXCLUDE` is set by the\n:ref:`ref-classes-copyleft_filter` class, which\nis inherited by the :ref:`ref-classes-archiver` class.\n\n" },
      { name:"COPYLEFT_LICENSE_INCLUDE", content:"A space-separated list of licenses to include in the source archived\nby the :ref:`ref-classes-archiver` class. In other\nwords, if a license in a recipe's :term:`LICENSE`\nvalue is in the value of :term:`COPYLEFT_LICENSE_INCLUDE`, then its\nsource is archived by the class.\n\nThe default value is set by the :ref:`ref-classes-copyleft_filter` class,\nwhich is inherited by the :ref:`ref-classes-archiver` class. The default\nvalue includes \"GPL*\", \"LGPL*\", and \"AGPL*\".\n\n" },
      { name:"COPYLEFT_PN_EXCLUDE", content:"A list of recipes to exclude in the source archived by the\n:ref:`ref-classes-archiver` class. The :term:`COPYLEFT_PN_EXCLUDE`\nvariable overrides the license inclusion and exclusion caused through the\n:term:`COPYLEFT_LICENSE_INCLUDE` and :term:`COPYLEFT_LICENSE_EXCLUDE`\nvariables, respectively.\n\nThe default value, which is \"\" indicating to not explicitly exclude\nany recipes by name, for :term:`COPYLEFT_PN_EXCLUDE` is set by the\n:ref:`ref-classes-copyleft_filter` class, which is inherited by the\n:ref:`ref-classes-archiver` class.\n\n" },
      { name:"COPYLEFT_PN_INCLUDE", content:"A list of recipes to include in the source archived by the\n:ref:`ref-classes-archiver` class. The :term:`COPYLEFT_PN_INCLUDE`\nvariable overrides the license inclusion and exclusion caused through the\n:term:`COPYLEFT_LICENSE_INCLUDE` and :term:`COPYLEFT_LICENSE_EXCLUDE`\nvariables, respectively.\n\nThe default value, which is \"\" indicating to not explicitly include\nany recipes by name, for :term:`COPYLEFT_PN_INCLUDE` is set by the\n:ref:`ref-classes-copyleft_filter` class, which is inherited by the\n:ref:`ref-classes-archiver` class.\n\n" },
      { name:"COPYLEFT_RECIPE_TYPES", content:"A space-separated list of recipe types to include in the source\narchived by the :ref:`archiver <ref-classes-archiver>` class.\nRecipe types are ``target``, :ref:`ref-classes-native`,\n:ref:`ref-classes-nativesdk`, :ref:`ref-classes-cross`,\n:ref:`ref-classes-crosssdk`, and :ref:`ref-classes-cross-canadian`.\n\nThe default value, which is \"target*\", for :term:`COPYLEFT_RECIPE_TYPES`\nis set by the :ref:`ref-classes-copyleft_filter` class, which is\ninherited by the :ref:`ref-classes-archiver` class.\n\n" },
      { name:"CORE_IMAGE_EXTRA_INSTALL", content:"Specifies the list of packages to be added to the image. You should\nonly set this variable in the ``local.conf`` configuration file found\nin the :term:`Build Directory`.\n\nThis variable replaces ``POKY_EXTRA_INSTALL``, which is no longer\nsupported.\n\n" },
      { name:"COREBASE", content:"Specifies the parent directory of the OpenEmbedded-Core Metadata\nlayer (i.e. ``meta``).\n\nIt is an important distinction that :term:`COREBASE` points to the parent\nof this layer and not the layer itself. Consider an example where you\nhave cloned the Poky Git repository and retained the ``poky`` name\nfor your local copy of the repository. In this case, :term:`COREBASE`\npoints to the ``poky`` folder because it is the parent directory of\nthe ``poky/meta`` layer.\n\n" },
      { name:"COREBASE_FILES", content:"Lists files from the :term:`COREBASE` directory that\nshould be copied other than the layers listed in the\n``bblayers.conf`` file. The :term:`COREBASE_FILES` variable allows\nto copy metadata from the OpenEmbedded build system\ninto the extensible SDK.\n\nExplicitly listing files in :term:`COREBASE` is needed because it\ntypically contains build directories and other files that should not\nnormally be copied into the extensible SDK. Consequently, the value\nof :term:`COREBASE_FILES` is used in order to only copy the files that\nare actually needed.\n\n" },
      { name:"CPP", content:"The minimal command and arguments used to run the C preprocessor.\n\n" },
      { name:"CPPFLAGS", content:"Specifies the flags to pass to the C pre-processor (i.e. to both the\nC and the C++ compilers). This variable is exported to an environment\nvariable and thus made visible to the software being built during the\ncompilation step.\n\nDefault initialization for :term:`CPPFLAGS` varies depending on what is\nbeing built:\n\n-  :term:`TARGET_CPPFLAGS` when building for\n   the target\n\n-  :term:`BUILD_CPPFLAGS` when building for the\n   build host (i.e. ``-native``)\n\n-  :term:`BUILDSDK_CPPFLAGS` when building\n   for an SDK (i.e. ``nativesdk-``)\n\n" },
      { name:"CROSS_COMPILE", content:"The toolchain binary prefix for the target tools. The\n:term:`CROSS_COMPILE` variable is the same as the\n:term:`TARGET_PREFIX` variable.\n\n.. note::\n\n   The OpenEmbedded build system sets the :term:`CROSS_COMPILE`\n   variable only in certain contexts (e.g. when building for kernel\n   and kernel module recipes).\n\n" },
      { name:"CVE_CHECK_IGNORE", content:"The list of CVE IDs which are ignored. Here is\nan example from the :oe_layerindex:`Python3 recipe</layerindex/recipe/23823>`::\n\n   # This is windows only issue.\n   CVE_CHECK_IGNORE += \"CVE-2020-15523\"\n\n" },
      { name:"CVE_CHECK_SHOW_WARNINGS", content:"Specifies whether or not the :ref:`ref-classes-cve-check`\nclass should generate warning messages on the console when unpatched\nCVEs are found. The default is \"1\", but you may wish to set it to \"0\" if\nyou are already examining/processing the logs after the build has\ncompleted and thus do not need the warning messages.\n\n" },
      { name:"CVE_CHECK_SKIP_RECIPE", content:"The list of package names (:term:`PN`) for which\nCVEs (Common Vulnerabilities and Exposures) are ignored.\n\n" },
      { name:"CVE_DB_UPDATE_INTERVAL", content:"Specifies the CVE database update interval in seconds, as used by\n``cve-update-db-native``. The default value is \"86400\" i.e. once a day\n(24*60*60). If the value is set to \"0\" then the update will be forced\nevery time. Alternatively, a negative value e.g. \"-1\" will disable\nupdates entirely.\n\n" },
      { name:"CVE_PRODUCT", content:"In a recipe, defines the name used to match the recipe name\nagainst the name in the upstream `NIST CVE database <https://nvd.nist.gov/>`__.\n\nThe default is ${:term:`BPN`} (except for recipes that inherit the\n:ref:`ref-classes-pypi` class where it is set based upon\n:term:`PYPI_PACKAGE`). If it does not match the name in the NIST CVE\ndatabase or matches with multiple entries in the database, the default\nvalue needs to be changed.\n\nHere is an example from the :oe_layerindex:`Berkeley DB recipe </layerindex/recipe/544>`::\n\n   CVE_PRODUCT = \"oracle_berkeley_db berkeley_db\"\n\nSometimes the product name is not specific enough, for example\n\"tar\" has been matching CVEs for the GNU ``tar`` package and also\nthe ``node-tar`` node.js extension. To avoid this problem, use the\nvendor name as a prefix. The syntax for this is::\n\n   CVE_PRODUCT = \"vendor:package\"\n\n" },
      { name:"CVE_VERSION", content:"In a recipe, defines the version used to match the recipe version\nagainst the version in the `NIST CVE database <https://nvd.nist.gov/>`__\nwhen usign :ref:`ref-classes-cve-check`.\n\nThe default is ${:term:`PV`} but if recipes use custom version numbers\nwhich do not map to upstream software component release versions and the versions\nused in the CVE database, then this variable can be used to set the\nversion number for :ref:`ref-classes-cve-check`. Example::\n\n    CVE_VERSION = \"2.39\"\n\n" },
      { name:"CVSDIR", content:"The directory in which files checked out under the CVS system are\nstored.\n\n" },
      { name:"CXX", content:"The minimal command and arguments used to run the C++ compiler.\n\n" },
      { name:"CXXFLAGS", content:"Specifies the flags to pass to the C++ compiler. This variable is\nexported to an environment variable and thus made visible to the\nsoftware being built during the compilation step.\n\nDefault initialization for :term:`CXXFLAGS` varies depending on what is\nbeing built:\n\n-  :term:`TARGET_CXXFLAGS` when building for\n   the target\n\n-  :term:`BUILD_CXXFLAGS` when building for the\n   build host (i.e. ``-native``)\n\n-  :term:`BUILDSDK_CXXFLAGS` when building\n   for an SDK (i.e. ``nativesdk-``)\n\n" },
      { name:"D", content:"The destination directory. The location in the :term:`Build Directory`\nwhere components are installed by the\n:ref:`ref-tasks-install` task. This location defaults\nto::\n\n   ${WORKDIR}/image\n\n.. note::\n\n   Tasks that read from or write to this directory should run under\n   :ref:`fakeroot <overview-manual/concepts:fakeroot and pseudo>`.\n\n" },
      { name:"DATE", content:"The date the build was started. Dates appear using the year, month,\nand day (YMD) format (e.g. \"20150209\" for February 9th, 2015).\n\n" },
      { name:"DATETIME", content:"The date and time on which the current build started. The format is\nsuitable for timestamps.\n\n" },
      { name:"DEBIAN_NOAUTONAME", content:"When the :ref:`ref-classes-debian` class is inherited,\nwhich is the default behavior, :term:`DEBIAN_NOAUTONAME` specifies a\nparticular package should not be renamed according to Debian library\npackage naming. You must use the package name as an override when you\nset this variable. Here is an example from the ``fontconfig`` recipe::\n\n   DEBIAN_NOAUTONAME:fontconfig-utils = \"1\"\n\n" },
      { name:"DEBIANNAME", content:"When the :ref:`ref-classes-debian` class is inherited,\nwhich is the default behavior, :term:`DEBIANNAME` allows you to override\nthe library name for an individual package. Overriding the library\nname in these cases is rare. You must use the package name as an\noverride when you set this variable. Here is an example from the\n``dbus`` recipe::\n\n   DEBIANNAME:${PN} = \"dbus-1\"\n\n" },
      { name:"DEBUG_BUILD", content:"Specifies to build packages with debugging information. This\ninfluences the value of the :term:`SELECTED_OPTIMIZATION` variable.\n\n" },
      { name:"DEBUG_OPTIMIZATION", content:"The options to pass in :term:`TARGET_CFLAGS` and :term:`CFLAGS` when\ncompiling a system for debugging. This variable defaults to \"-O\n-fno-omit-frame-pointer ${DEBUG_FLAGS} -pipe\".\n\n" },
      { name:"DEBUG_PREFIX_MAP", content:"Allows to set C compiler options, such as ``-fdebug-prefix-map``,\n``-fmacro-prefix-map``, and ``-ffile-prefix-map``, which allow to\nreplace build-time paths by install-time ones in the debugging sections\nof binaries.  This makes compiler output files location independent,\nat the cost of having to pass an extra command to tell the debugger\nwhere source files are.\n\nThis is used by the Yocto Project to guarantee\n:doc:`/test-manual/reproducible-builds` even when the source code of\na package uses the ``__FILE__`` or ``assert()`` macros. See the\n`reproducible-builds.org <https://reproducible-builds.org/docs/build-path/>`__\nwebsite for details.\n\nThis variable is set in the ``meta/conf/bitbake.conf`` file. It is\nnot intended to be user-configurable.\n\n" },
      { name:"DEFAULT_PREFERENCE", content:"Specifies a weak bias for recipe selection priority.\n\nThe most common usage of this is variable is to set it to \"-1\" within\na recipe for a development version of a piece of software. Using the\nvariable in this way causes the stable version of the recipe to build\nby default in the absence of :term:`PREFERRED_VERSION` being used to\nbuild the development version.\n\n.. note::\n\n   The bias provided by :term:`DEFAULT_PREFERENCE` is weak and is overridden\n   by :term:`BBFILE_PRIORITY` if that variable is different between two\n   layers that contain different versions of the same recipe.\n\n" },
      { name:"DEFAULTTUNE", content:"The default CPU and Application Binary Interface (ABI) tunings (i.e.\nthe \"tune\") used by the OpenEmbedded build system. The\n:term:`DEFAULTTUNE` helps define\n:term:`TUNE_FEATURES`.\n\nThe default tune is either implicitly or explicitly set by the\nmachine (:term:`MACHINE`). However, you can override\nthe setting using available tunes as defined with\n:term:`AVAILTUNES`.\n\n" },
      { name:"DEPENDS", content:"Lists a recipe's build-time dependencies. These are dependencies on\nother recipes whose contents (e.g. headers and shared libraries) are\nneeded by the recipe at build time.\n\nAs an example, consider a recipe ``foo`` that contains the following\nassignment::\n\n    DEPENDS = \"bar\"\n\nThe practical effect of the previous assignment is that all files\ninstalled by bar will be available in the appropriate staging sysroot,\ngiven by the :term:`STAGING_DIR* <STAGING_DIR>` variables, by the time\nthe :ref:`ref-tasks-configure` task for ``foo`` runs. This mechanism is\nimplemented by having :ref:`ref-tasks-configure` depend on the\n:ref:`ref-tasks-populate_sysroot` task of each recipe listed in\n:term:`DEPENDS`, through a\n``[``\\ :ref:`deptask <bitbake-user-manual/bitbake-user-manual-metadata:variable flags>`\\ ``]``\ndeclaration in the :ref:`ref-classes-base` class.\n\n.. note::\n\n   It seldom is necessary to reference, for example, :term:`STAGING_DIR_HOST`\n   explicitly. The standard classes and build-related variables are\n   configured to automatically use the appropriate staging sysroots.\n\nAs another example, :term:`DEPENDS` can also be used to add utilities\nthat run on the build machine during the build. For example, a recipe\nthat makes use of a code generator built by the recipe ``codegen``\nmight have the following::\n\n   DEPENDS = \"codegen-native\"\n\nFor more\ninformation, see the :ref:`ref-classes-native` class and\nthe :term:`EXTRANATIVEPATH` variable.\n\n.. note::\n\n   -  :term:`DEPENDS` is a list of recipe names. Or, to be more precise,\n      it is a list of :term:`PROVIDES` names, which\n      usually match recipe names. Putting a package name such as\n      \"foo-dev\" in :term:`DEPENDS` does not make sense. Use \"foo\"\n      instead, as this will put files from all the packages that make\n      up ``foo``, which includes those from ``foo-dev``, into the\n      sysroot.\n\n   -  One recipe having another recipe in :term:`DEPENDS` does not by\n      itself add any runtime dependencies between the packages\n      produced by the two recipes. However, as explained in the\n      \":ref:`overview-manual/concepts:automatically added runtime dependencies`\"\n      section in the Yocto Project Overview and Concepts Manual,\n      runtime dependencies will often be added automatically, meaning\n      :term:`DEPENDS` alone is sufficient for most recipes.\n\n   -  Counterintuitively, :term:`DEPENDS` is often necessary even for\n      recipes that install precompiled components. For example, if\n      ``libfoo`` is a precompiled library that links against\n      ``libbar``, then linking against ``libfoo`` requires both\n      ``libfoo`` and ``libbar`` to be available in the sysroot.\n      Without a :term:`DEPENDS` from the recipe that installs ``libfoo``\n      to the recipe that installs ``libbar``, other recipes might\n      fail to link against ``libfoo``.\n\nFor information on runtime dependencies, see the :term:`RDEPENDS`\nvariable. You can also see the\n\":ref:`bitbake-user-manual/bitbake-user-manual-metadata:tasks`\" and\n\":ref:`bitbake-user-manual/bitbake-user-manual-execution:dependencies`\"\nsections in the BitBake User Manual for additional information on tasks\nand dependencies.\n\n" },
      { name:"DEPLOY_DIR", content:"Points to the general area that the OpenEmbedded build system uses to\nplace images, packages, SDKs, and other output files that are ready\nto be used outside of the build system. By default, this directory\nresides within the :term:`Build Directory` as ``${TMPDIR}/deploy``.\n\nFor more information on the structure of the Build Directory, see\n\":ref:`ref-manual/structure:the build directory --- \\`\\`build/\\`\\``\" section.\nFor more detail on the contents of the ``deploy`` directory, see the\n\":ref:`overview-manual/concepts:images`\",\n\":ref:`overview-manual/concepts:package feeds`\", and\n\":ref:`overview-manual/concepts:application development sdk`\" sections all in the\nYocto Project Overview and Concepts Manual.\n\n" },
      { name:"DEPLOY_DIR_DEB", content:"Points to the area that the OpenEmbedded build system uses to place\nDebian packages that are ready to be used outside of the build\nsystem. This variable applies only when :term:`PACKAGE_CLASSES` contains\n\":ref:`ref-classes-package_deb`\".\n\nThe BitBake configuration file initially defines the\n:term:`DEPLOY_DIR_DEB` variable as a sub-folder of\n:term:`DEPLOY_DIR`::\n\n   DEPLOY_DIR_DEB = \"${DEPLOY_DIR}/deb\"\n\nThe :ref:`ref-classes-package_deb` class uses the\n:term:`DEPLOY_DIR_DEB` variable to make sure the\n:ref:`ref-tasks-package_write_deb` task\nwrites Debian packages into the appropriate folder. For more\ninformation on how packaging works, see the\n\":ref:`overview-manual/concepts:package feeds`\" section\nin the Yocto Project Overview and Concepts Manual.\n\n" },
      { name:"DEPLOY_DIR_IMAGE", content:"Points to the area that the OpenEmbedded build system uses to place\nimages and other associated output files that are ready to be\ndeployed onto the target machine. The directory is machine-specific\nas it contains the ``${MACHINE}`` name. By default, this directory\nresides within the :term:`Build Directory` as\n``${DEPLOY_DIR}/images/${MACHINE}/``.\n\nIt must not be used directly in recipes when deploying files. Instead,\nit's only useful when a recipe needs to \"read\" a file already deployed\nby a dependency. So, it should be filled with the contents of\n:term:`DEPLOYDIR` by the :ref:`ref-classes-deploy` class or with the\ncontents of :term:`IMGDEPLOYDIR` by the :ref:`ref-classes-image` class.\n\nFor more information on the structure of the :term:`Build Directory`, see\n\":ref:`ref-manual/structure:the build directory --- \\`\\`build/\\`\\``\" section.\nFor more detail on the contents of the ``deploy`` directory, see the\n\":ref:`overview-manual/concepts:images`\" and\n\":ref:`overview-manual/concepts:application development sdk`\" sections both in\nthe Yocto Project Overview and Concepts Manual.\n\n" },
      { name:"DEPLOY_DIR_IPK", content:"Points to the area that the OpenEmbedded build system uses to place\nIPK packages that are ready to be used outside of the build system.\nThis variable applies only when :term:`PACKAGE_CLASSES` contains\n\":ref:`ref-classes-package_ipk`\".\n\nThe BitBake configuration file initially defines this variable as a\nsub-folder of :term:`DEPLOY_DIR`::\n\n   DEPLOY_DIR_IPK = \"${DEPLOY_DIR}/ipk\"\n\nThe :ref:`ref-classes-package_ipk` class uses the :term:`DEPLOY_DIR_IPK`\nvariable to make sure the :ref:`ref-tasks-package_write_ipk` task\nwrites IPK packages into the appropriate folder. For more information\non how packaging works, see the\n\":ref:`overview-manual/concepts:package feeds`\" section\nin the Yocto Project Overview and Concepts Manual.\n\n" },
      { name:"DEPLOY_DIR_RPM", content:"Points to the area that the OpenEmbedded build system uses to place\nRPM packages that are ready to be used outside of the build system.\nThis variable applies only when :term:`PACKAGE_CLASSES` contains\n\":ref:`ref-classes-package_rpm`\".\n\nThe BitBake configuration file initially defines this variable as a\nsub-folder of :term:`DEPLOY_DIR`::\n\n   DEPLOY_DIR_RPM = \"${DEPLOY_DIR}/rpm\"\n\nThe :ref:`ref-classes-package_rpm` class uses the\n:term:`DEPLOY_DIR_RPM` variable to make sure the\n:ref:`ref-tasks-package_write_rpm` task\nwrites RPM packages into the appropriate folder. For more information\non how packaging works, see the\n\":ref:`overview-manual/concepts:package feeds`\" section\nin the Yocto Project Overview and Concepts Manual.\n\n" },
      { name:"DEPLOYDIR", content:"When inheriting the :ref:`ref-classes-deploy` class, the\n:term:`DEPLOYDIR` points to a temporary work area for deployed files that\nis set in the :ref:`ref-classes-deploy` class as follows::\n\n   DEPLOYDIR = \"${WORKDIR}/deploy-${PN}\"\n\nRecipes inheriting the :ref:`ref-classes-deploy` class should copy files to be\ndeployed into :term:`DEPLOYDIR`, and the class will take care of copying\nthem into :term:`DEPLOY_DIR_IMAGE`\nafterwards.\n\n" },
      { name:"DESCRIPTION", content:"The package description used by package managers. If not set,\n:term:`DESCRIPTION` takes the value of the :term:`SUMMARY`\nvariable.\n\n" },
      { name:"DEV_PKG_DEPENDENCY", content:"Provides an easy way for recipes to disable or adjust the runtime recommendation\n(:term:`RRECOMMENDS`) of the ``${PN}-dev`` package on the main\n(``${PN}``) package.\n\n" },
      { name:"DISABLE_STATIC", content:"Used in order to disable static linking by default (in order to save\nspace, since static libraries are often unused in embedded systems.)\nThe default value is \" --disable-static\", however it can be set to \"\"\nin order to enable static linking if desired. Certain recipes do this\nindividually, and also there is a\n``meta/conf/distro/include/no-static-libs.inc`` include file that\ndisables static linking for a number of recipes. Some software\npackages or build tools (such as CMake) have explicit support for\nenabling / disabling static linking, and in those cases\n:term:`DISABLE_STATIC` is not used.\n\n" },
      { name:"DISTRO", content:"The short name of the distribution. For information on the long name\nof the distribution, see the :term:`DISTRO_NAME`\nvariable.\n\nThe :term:`DISTRO` variable corresponds to a distribution configuration\nfile whose root name is the same as the variable's argument and whose\nfilename extension is ``.conf``. For example, the distribution\nconfiguration file for the Poky distribution is named ``poky.conf``\nand resides in the ``meta-poky/conf/distro`` directory of the\n:term:`Source Directory`.\n\nWithin that ``poky.conf`` file, the :term:`DISTRO` variable is set as\nfollows::\n\n   DISTRO = \"poky\"\n\nDistribution configuration files are located in a ``conf/distro``\ndirectory within the :term:`Metadata` that contains the\ndistribution configuration. The value for :term:`DISTRO` must not contain\nspaces, and is typically all lower-case.\n\n.. note::\n\n   If the :term:`DISTRO` variable is blank, a set of default configurations\n   are used, which are specified within\n   ``meta/conf/distro/defaultsetup.conf`` also in the Source Directory.\n\n" },
      { name:"DISTRO_CODENAME", content:"Specifies a codename for the distribution being built.\n\n" },
      { name:"DISTRO_EXTRA_RDEPENDS", content:"Specifies a list of distro-specific packages to add to all images.\nThis variable takes effect through ``packagegroup-base`` so the\nvariable only really applies to the more full-featured images that\ninclude ``packagegroup-base``. You can use this variable to keep\ndistro policy out of generic images. As with all other distro\nvariables, you set this variable in the distro ``.conf`` file.\n\n" },
      { name:"DISTRO_EXTRA_RRECOMMENDS", content:"Specifies a list of distro-specific packages to add to all images if\nthe packages exist. The packages might not exist or be empty (e.g.\nkernel modules). The list of packages are automatically installed but\nyou can remove them.\n\n" },
      { name:"DISTRO_FEATURES", content:"The software support you want in your distribution for various\nfeatures. You define your distribution features in the distribution\nconfiguration file.\n\nIn most cases, the presence or absence of a feature in\n:term:`DISTRO_FEATURES` is translated to the appropriate option supplied\nto the configure script during the\n:ref:`ref-tasks-configure` task for recipes that\noptionally support the feature. For example, specifying \"x11\" in\n:term:`DISTRO_FEATURES`, causes every piece of software built for the\ntarget that can optionally support X11 to have its X11 support\nenabled.\n\n.. note::\n\n   Just enabling :term:`DISTRO_FEATURES` alone doesn't\n   enable feature support for packages. Mechanisms such as making\n   :term:`PACKAGECONFIG` track :term:`DISTRO_FEATURES` are used\n   to enable/disable package features.\n\nTwo more examples are Bluetooth and NFS support. For a more complete\nlist of features that ships with the Yocto Project and that you can\nprovide with this variable, see the \":ref:`ref-features-distro`\" section.\n\n" },
      { name:"DISTRO_FEATURES_BACKFILL", content:"A space-separated list of features to be added to :term:`DISTRO_FEATURES`\nif not also present in :term:`DISTRO_FEATURES_BACKFILL_CONSIDERED`.\n\nThis variable is set in the ``meta/conf/bitbake.conf`` file. It is\nnot intended to be user-configurable. It is best to just reference\nthe variable to see which distro features are being\n:ref:`backfilled <ref-features-backfill>` for all distro configurations.\n\n" },
      { name:"DISTRO_FEATURES_BACKFILL_CONSIDERED", content:"A space-separated list of features from :term:`DISTRO_FEATURES_BACKFILL`\nthat should not be :ref:`backfilled <ref-features-backfill>` (i.e. added\nto :term:`DISTRO_FEATURES`) during the build.\n\nThis corresponds to an opt-out mechanism. When new default distro\nfeatures are introduced, distribution maintainers can review (`consider`)\nthem and decide to exclude them from the\n:ref:`backfilled <ref-features-backfill>` features. Therefore, the\ncombination of :term:`DISTRO_FEATURES_BACKFILL` and\n:term:`DISTRO_FEATURES_BACKFILL_CONSIDERED` makes it possible to\nadd new default features without breaking existing distributions.\n\n\n" },
      { name:"DISTRO_FEATURES_DEFAULT", content:"A convenience variable that gives you the default list of distro\nfeatures with the exception of any features specific to the C library\n(``libc``).\n\nWhen creating a custom distribution, you might find it useful to be\nable to reuse the default\n:term:`DISTRO_FEATURES` options without the\nneed to write out the full set. Here is an example that uses\n:term:`DISTRO_FEATURES_DEFAULT` from a custom distro configuration file::\n\n   DISTRO_FEATURES ?= \"${DISTRO_FEATURES_DEFAULT} myfeature\"\n\n" },
      { name:"DISTRO_FEATURES_FILTER_NATIVE", content:"Specifies a list of features that if present in the target\n:term:`DISTRO_FEATURES` value should be\nincluded in :term:`DISTRO_FEATURES` when building native recipes. This\nvariable is used in addition to the features filtered using the\n:term:`DISTRO_FEATURES_NATIVE`\nvariable.\n\n" },
      { name:"DISTRO_FEATURES_FILTER_NATIVESDK", content:"Specifies a list of features that if present in the target\n:term:`DISTRO_FEATURES` value should be included in\n:term:`DISTRO_FEATURES` when building :ref:`ref-classes-nativesdk`\nrecipes. This variable is used in addition to the features filtered using\nthe :term:`DISTRO_FEATURES_NATIVESDK` variable.\n\n" },
      { name:"DISTRO_FEATURES_NATIVE", content:"Specifies a list of features that should be included in\n:term:`DISTRO_FEATURES` when building native\nrecipes. This variable is used in addition to the features filtered\nusing the\n:term:`DISTRO_FEATURES_FILTER_NATIVE`\nvariable.\n\n" },
      { name:"DISTRO_FEATURES_NATIVESDK", content:"Specifies a list of features that should be included in\n:term:`DISTRO_FEATURES` when building\n:ref:`ref-classes-nativesdk` recipes. This variable is used\nin addition to the features filtered using the\n:term:`DISTRO_FEATURES_FILTER_NATIVESDK` variable.\n\n" },
      { name:"DISTRO_NAME", content:"The long name of the distribution. For information on the short name\nof the distribution, see the :term:`DISTRO` variable.\n\nThe :term:`DISTRO_NAME` variable corresponds to a distribution\nconfiguration file whose root name is the same as the variable's\nargument and whose filename extension is ``.conf``. For example, the\ndistribution configuration file for the Poky distribution is named\n``poky.conf`` and resides in the ``meta-poky/conf/distro`` directory\nof the :term:`Source Directory`.\n\nWithin that ``poky.conf`` file, the :term:`DISTRO_NAME` variable is set\nas follows::\n\n   DISTRO_NAME = \"Poky (Yocto Project Reference Distro)\"\n\nDistribution configuration files are located in a ``conf/distro``\ndirectory within the :term:`Metadata` that contains the\ndistribution configuration.\n\n.. note::\n\n   If the :term:`DISTRO_NAME` variable is blank, a set of default\n   configurations are used, which are specified within\n   ``meta/conf/distro/defaultsetup.conf`` also in the Source Directory.\n\n" },
      { name:"DISTRO_VERSION", content:"The version of the distribution.\n\n" },
      { name:"DISTROOVERRIDES", content:"A colon-separated list of overrides specific to the current\ndistribution. By default, this list includes the value of\n:term:`DISTRO`.\n\nYou can extend :term:`DISTROOVERRIDES` to add extra overrides that should\napply to the distribution.\n\nThe underlying mechanism behind :term:`DISTROOVERRIDES` is simply that it\nis included in the default value of\n:term:`OVERRIDES`.\n\n" },
      { name:"DL_DIR", content:"The central download directory used by the build process to store\ndownloads. By default, :term:`DL_DIR` gets files suitable for mirroring\nfor everything except Git repositories. If you want tarballs of Git\nrepositories, use the\n:term:`BB_GENERATE_MIRROR_TARBALLS`\nvariable.\n\nYou can set this directory by defining the :term:`DL_DIR` variable in the\n``conf/local.conf`` file. This directory is self-maintaining and you\nshould not have to touch it. By default, the directory is\n``downloads`` in the :term:`Build Directory`::\n\n   #DL_DIR ?= \"${TOPDIR}/downloads\"\n\nTo specify a different download directory,\nsimply remove the comment from the line and provide your directory.\n\nDuring a first build, the system downloads many different source code\ntarballs from various upstream projects. Downloading can take a\nwhile, particularly if your network connection is slow. Tarballs are\nall stored in the directory defined by :term:`DL_DIR` and the build\nsystem looks there first to find source tarballs.\n\n.. note::\n\n   When wiping and rebuilding, you can preserve this directory to\n   speed up this part of subsequent builds.\n\nYou can safely share this directory between multiple builds on the\nsame development machine. For additional information on how the build\nprocess gets source files when working behind a firewall or proxy\nserver, see this specific question in the \":doc:`faq`\"\nchapter. You can also refer to the\n\":yocto_wiki:`Working Behind a Network Proxy </Working_Behind_a_Network_Proxy>`\"\nWiki page.\n\n" },
      { name:"DOC_COMPRESS", content:"When inheriting the :ref:`ref-classes-compress_doc`\nclass, this variable sets the compression policy used when the\nOpenEmbedded build system compresses man pages and info pages. By\ndefault, the compression method used is gz (gzip). Other policies\navailable are xz and bz2.\n\nFor information on policies and on how to use this variable, see the\ncomments in the ``meta/classes-recipe/compress_doc.bbclass`` file.\n\n" },
      { name:"EFI_PROVIDER", content:"When building bootable images (i.e. where ``hddimg``, ``iso``, or\n``wic.vmdk`` is in :term:`IMAGE_FSTYPES`), the\n:term:`EFI_PROVIDER` variable specifies the EFI bootloader to use. The\ndefault is \"grub-efi\", but \"systemd-boot\" can be used instead.\n\nSee the :ref:`ref-classes-systemd-boot` and :ref:`ref-classes-image-live`\nclasses for more information.\n\n" },
      { name:"ENABLE_BINARY_LOCALE_GENERATION", content:"Variable that controls which locales for ``glibc`` are generated\nduring the build (useful if the target device has 64Mbytes of RAM or\nless).\n\n" },
      { name:"ERR_REPORT_DIR", content:"When used with the :ref:`ref-classes-report-error` class, specifies the\npath used for storing the debug files created by the :ref:`error reporting\ntool <dev-manual/error-reporting-tool:using the error reporting tool>`,\nwhich allows you to submit build errors you encounter to a central\ndatabase. By default, the value of this variable is\n``${``\\ :term:`LOG_DIR`\\ ``}/error-report``.\n\nYou can set :term:`ERR_REPORT_DIR` to the path you want the error\nreporting tool to store the debug files as follows in your\n``local.conf`` file::\n\n   ERR_REPORT_DIR = \"path\"\n\n" },
      { name:"ERROR_QA", content:"Specifies the quality assurance checks whose failures are reported as\nerrors by the OpenEmbedded build system. You set this variable in\nyour distribution configuration file. For a list of the checks you\ncan control with this variable, see the\n\":ref:`ref-classes-insane`\" section.\n\n" },
      { name:"ESDK_CLASS_INHERIT_DISABLE", content:"A list of classes to remove from the :term:`INHERIT`\nvalue globally within the extensible SDK configuration. The\n:ref:`populate-sdk-ext <ref-classes-populate-sdk-*>` class sets the\ndefault value::\n\n   ESDK_CLASS_INHERIT_DISABLE ?= \"buildhistory icecc\"\n\nSome classes are not generally applicable within the extensible SDK\ncontext. You can use this variable to disable those classes.\n\nFor additional information on how to customize the extensible SDK's\nconfiguration, see the\n\":ref:`sdk-manual/appendix-customizing:configuring the extensible sdk`\"\nsection in the Yocto Project Application Development and the\nExtensible Software Development Kit (eSDK) manual.\n\n" },
      { name:"ESDK_LOCALCONF_ALLOW", content:"A list of variables allowed through from the OpenEmbedded build\nsystem configuration into the extensible SDK configuration. By\ndefault, the list of variables is empty and is set in the\n:ref:`populate-sdk-ext <ref-classes-populate-sdk-*>` class.\n\nThis list overrides the variables specified using the\n:term:`ESDK_LOCALCONF_REMOVE` variable as well as\nother variables automatically added due to the \"/\" character\nbeing found at the start of the\nvalue, which is usually indicative of being a path and thus might not\nbe valid on the system where the SDK is installed.\n\nFor additional information on how to customize the extensible SDK's\nconfiguration, see the\n\":ref:`sdk-manual/appendix-customizing:configuring the extensible sdk`\"\nsection in the Yocto Project Application Development and the\nExtensible Software Development Kit (eSDK) manual.\n\n" },
      { name:"ESDK_LOCALCONF_REMOVE", content:"A list of variables not allowed through from the OpenEmbedded build\nsystem configuration into the extensible SDK configuration. Usually,\nthese are variables that are specific to the machine on which the\nbuild system is running and thus would be potentially problematic\nwithin the extensible SDK.\n\nBy default, :term:`ESDK_LOCALCONF_REMOVE` is set in the\n:ref:`populate-sdk-ext <ref-classes-populate-sdk-*>` class and\nexcludes the following variables:\n\n- :term:`CONF_VERSION`\n- :term:`BB_NUMBER_THREADS`\n- :term:`BB_NUMBER_PARSE_THREADS`\n- :term:`PARALLEL_MAKE`\n- :term:`PRSERV_HOST`\n- :term:`SSTATE_MIRRORS` :term:`DL_DIR`\n- :term:`SSTATE_DIR` :term:`TMPDIR`\n- :term:`BB_SERVER_TIMEOUT`\n\nFor additional information on how to customize the extensible SDK's\nconfiguration, see the\n\":ref:`sdk-manual/appendix-customizing:configuring the extensible sdk`\"\nsection in the Yocto Project Application Development and the\nExtensible Software Development Kit (eSDK) manual.\n\n" },
      { name:"EXCLUDE_FROM_SHLIBS", content:"Triggers the OpenEmbedded build system's shared libraries resolver to\nexclude an entire package when scanning for shared libraries.\n\n.. note::\n\n   The shared libraries resolver's functionality results in part from\n   the internal function ``package_do_shlibs``, which is part of the\n   :ref:`ref-tasks-package` task. You should be aware that the shared\n   libraries resolver might implicitly define some dependencies between\n   packages.\n\nThe :term:`EXCLUDE_FROM_SHLIBS` variable is similar to the\n:term:`PRIVATE_LIBS` variable, which excludes a\npackage's particular libraries only and not the whole package.\n\nUse the :term:`EXCLUDE_FROM_SHLIBS` variable by setting it to \"1\" for a\nparticular package::\n\n   EXCLUDE_FROM_SHLIBS = \"1\"\n\n" },
      { name:"EXCLUDE_FROM_WORLD", content:"Directs BitBake to exclude a recipe from world builds (i.e.\n``bitbake world``). During world builds, BitBake locates, parses and\nbuilds all recipes found in every layer exposed in the\n``bblayers.conf`` configuration file.\n\nTo exclude a recipe from a world build using this variable, set the\nvariable to \"1\" in the recipe.\n\n.. note::\n\n   Recipes added to :term:`EXCLUDE_FROM_WORLD` may still be built during a\n   world build in order to satisfy dependencies of other recipes. Adding\n   a recipe to :term:`EXCLUDE_FROM_WORLD` only ensures that the recipe is not\n   explicitly added to the list of build targets in a world build.\n\n" },
      { name:"EXTENDPE", content:"Used with file and pathnames to create a prefix for a recipe's\nversion based on the recipe's :term:`PE` value. If :term:`PE`\nis set and greater than zero for a recipe, :term:`EXTENDPE` becomes that\nvalue (e.g if :term:`PE` is equal to \"1\" then :term:`EXTENDPE` becomes \"1\").\nIf a recipe's :term:`PE` is not set (the default) or is equal to zero,\n:term:`EXTENDPE` becomes \"\".\n\nSee the :term:`STAMP` variable for an example.\n\n" },
      { name:"EXTENDPKGV", content:"The full package version specification as it appears on the final\npackages produced by a recipe. The variable's value is normally used\nto fix a runtime dependency to the exact same version of another\npackage in the same recipe::\n\n   RDEPENDS:${PN}-additional-module = \"${PN} (= ${EXTENDPKGV})\"\n\nThe dependency relationships are intended to force the package\nmanager to upgrade these types of packages in lock-step.\n\n" },
      { name:"EXTERNAL_KERNEL_TOOLS", content:"When set, the :term:`EXTERNAL_KERNEL_TOOLS` variable indicates that these\ntools are not in the source tree.\n\nWhen kernel tools are available in the tree, they are preferred over\nany externally installed tools. Setting the :term:`EXTERNAL_KERNEL_TOOLS`\nvariable tells the OpenEmbedded build system to prefer the installed\nexternal tools. See the :ref:`ref-classes-kernel-yocto` class in\n``meta/classes-recipe`` to see how the variable is used.\n\n" },
      { name:"EXTERNAL_TOOLCHAIN", content:"When you intend to use an\n:ref:`external toolchain <dev-manual/external-toolchain:optionally using an external toolchain>`,\nthis variable allows to specify the directory where this toolchain was\ninstalled.\n\n" },
      { name:"EXTERNALSRC", content:"When inheriting the :ref:`ref-classes-externalsrc`\nclass, this variable points to the source tree, which is outside of\nthe OpenEmbedded build system. When set, this variable sets the\n:term:`S` variable, which is what the OpenEmbedded build\nsystem uses to locate unpacked recipe source code.\n\nSee the \":ref:`ref-classes-externalsrc`\" section for details. You\ncan also find information on how to use this variable in the\n\":ref:`dev-manual/building:building software from an external source`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"EXTERNALSRC_BUILD", content:"When inheriting the :ref:`ref-classes-externalsrc`\nclass, this variable points to the directory in which the recipe's\nsource code is built, which is outside of the OpenEmbedded build\nsystem. When set, this variable sets the :term:`B` variable,\nwhich is what the OpenEmbedded build system uses to locate the\n:term:`Build Directory`.\n\nSee the \":ref:`ref-classes-externalsrc`\" section for details. You\ncan also find information on how to use this variable in the\n\":ref:`dev-manual/building:building software from an external source`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"EXTRA_AUTORECONF", content:"For recipes inheriting the :ref:`ref-classes-autotools`\nclass, you can use :term:`EXTRA_AUTORECONF` to specify extra options to\npass to the ``autoreconf`` command that is executed during the\n:ref:`ref-tasks-configure` task.\n\nThe default value is \"--exclude=autopoint\".\n\n" },
      { name:"EXTRA_IMAGE_FEATURES", content:"A list of additional features to include in an image. When listing\nmore than one feature, separate them with a space.\n\nTypically, you configure this variable in your ``local.conf`` file,\nwhich is found in the :term:`Build Directory`. Although you can use this\nvariable from within a recipe, best practices dictate that you do not.\n\n.. note::\n\n   To enable primary features from within the image recipe, use the\n   :term:`IMAGE_FEATURES` variable.\n\nHere are some examples of features you can add:\n\n  - \"dbg-pkgs\" --- adds -dbg packages for all installed packages including\n    symbol information for debugging and profiling.\n\n  - \"debug-tweaks\" --- makes an image suitable for debugging. For example, allows root logins without passwords and\n    enables post-installation logging. See the 'allow-empty-password' and\n    'post-install-logging' features in the \":ref:`ref-features-image`\"\n    section for more information.\n  - \"dev-pkgs\" --- adds -dev packages for all installed packages. This is\n    useful if you want to develop against the libraries in the image.\n  - \"read-only-rootfs\" --- creates an image whose root filesystem is\n    read-only. See the\n    \":ref:`dev-manual/read-only-rootfs:creating a read-only root filesystem`\"\n    section in the Yocto Project Development Tasks Manual for more\n    information\n  - \"tools-debug\" --- adds debugging tools such as gdb and strace.\n  - \"tools-sdk\" --- adds development tools such as gcc, make,\n    pkgconfig and so forth.\n  - \"tools-testapps\" --- adds useful testing tools\n    such as ts_print, aplay, arecord and so forth.\n\nFor a complete list of image features that ships with the Yocto\nProject, see the \":ref:`ref-features-image`\" section.\n\nFor an example that shows how to customize your image by using this\nvariable, see the \":ref:`dev-manual/customizing-images:customizing images using custom \\`\\`image_features\\`\\` and \\`\\`extra_image_features\\`\\``\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"EXTRA_IMAGECMD", content:"Specifies additional options for the image creation command that has\nbeen specified in :term:`IMAGE_CMD`. When setting\nthis variable, use an override for the associated image type. Here is\nan example::\n\n   EXTRA_IMAGECMD:ext3 ?= \"-i 4096\"\n\n" },
      { name:"EXTRA_IMAGEDEPENDS", content:"A list of recipes to build that do not provide packages for\ninstalling into the root filesystem.\n\nSometimes a recipe is required to build the final image but is not\nneeded in the root filesystem. You can use the :term:`EXTRA_IMAGEDEPENDS`\nvariable to list these recipes and thus specify the dependencies. A\ntypical example is a required bootloader in a machine configuration.\n\n.. note::\n\n   To add packages to the root filesystem, see the various\n   :term:`RDEPENDS` and :term:`RRECOMMENDS` variables.\n\n" },
      { name:"EXTRA_OECMAKE", content:"Additional `CMake <https://cmake.org/overview/>`__ options. See the\n:ref:`ref-classes-cmake` class for additional information.\n\n" },
      { name:"EXTRA_OECONF", content:"Additional ``configure`` script options. See\n:term:`PACKAGECONFIG_CONFARGS` for\nadditional information on passing configure script options.\n\n" },
      { name:"EXTRA_OEMAKE", content:"Additional GNU ``make`` options.\n\nBecause the :term:`EXTRA_OEMAKE` defaults to \"\", you need to set the\nvariable to specify any required GNU options.\n\n:term:`PARALLEL_MAKE` and\n:term:`PARALLEL_MAKEINST` also make use of\n:term:`EXTRA_OEMAKE` to pass the required flags.\n\n" },
      { name:"EXTRA_OESCONS", content:"When inheriting the :ref:`ref-classes-scons` class, this\nvariable specifies additional configuration options you want to pass\nto the ``scons`` command line.\n\n" },
      { name:"EXTRA_OEMESON", content:"Additional `Meson <https://mesonbuild.com/>`__ options. See the\n:ref:`ref-classes-meson` class for additional information.\n\nIn addition to standard Meson options, such options correspond to\n`Meson build options <https://mesonbuild.com/Build-options.html>`__\ndefined in the ``meson_options.txt`` file in the sources to build.\nHere is an example::\n\n   EXTRA_OEMESON = \"-Dpython=disabled -Dvalgrind=disabled\"\n\nNote that any custom value for the Meson ``--buildtype`` option\nshould be set through the :term:`MESON_BUILDTYPE` variable.\n\n" },
      { name:"EXTRA_USERS_PARAMS", content:"When inheriting the :ref:`ref-classes-extrausers`\nclass, this variable provides image level user and group operations.\nThis is a more global method of providing user and group\nconfiguration as compared to using the\n:ref:`ref-classes-useradd` class, which ties user and\ngroup configurations to a specific recipe.\n\nThe set list of commands you can configure using the\n:term:`EXTRA_USERS_PARAMS` is shown in the\n:ref:`ref-classes-extrausers` class. These commands map to the normal\nUnix commands of the same names::\n\n   # EXTRA_USERS_PARAMS = \"\\\n   # useradd -p '' tester; \\\n   # groupadd developers; \\\n   # userdel nobody; \\\n   # groupdel -g video; \\\n   # groupmod -g 1020 developers; \\\n   # usermod -s /bin/sh tester; \\\n   # \"\n\nHardcoded passwords are supported via the ``-p`` parameters for\n``useradd`` or ``usermod``, but only hashed.\n\nHere is an example that adds two users named \"tester-jim\" and \"tester-sue\" and assigns\npasswords. First on host, create the (escaped) password hash::\n\n   printf \"%q\" $(mkpasswd -m sha256crypt tester01)\n\nThe resulting hash is set to a variable and used in ``useradd`` command parameters::\n\n   inherit extrausers\n   PASSWD = \"\\$X\\$ABC123\\$A-Long-Hash\"\n   EXTRA_USERS_PARAMS = \"\\\n       useradd -p '${PASSWD}' tester-jim; \\\n       useradd -p '${PASSWD}' tester-sue; \\\n       \"\n\nFinally, here is an example that sets the root password::\n\n   inherit extrausers\n   EXTRA_USERS_PARAMS = \"\\\n       usermod -p '${PASSWD}' root; \\\n       \"\n\n.. note::\n\n   From a security perspective, hardcoding a default password is not\n   generally a good idea or even legal in some jurisdictions. It is\n   recommended that you do not do this if you are building a production\n   image.\n\nAdditionally there is a special ``passwd-expire`` command that will\ncause the password for a user to be expired and thus force changing it\non first login, for example::\n\n   EXTRA_USERS_PARAMS += \" useradd myuser; passwd-expire myuser;\"\n\n.. note::\n\n   At present, ``passwd-expire`` may only work for remote logins when\n   using OpenSSH and not dropbear as an SSH server.\n\n" },
      { name:"EXTRANATIVEPATH", content:"A list of subdirectories of\n``${``\\ :term:`STAGING_BINDIR_NATIVE`\\ ``}``\nadded to the beginning of the environment variable ``PATH``. As an\nexample, the following prepends\n\"${STAGING_BINDIR_NATIVE}/foo:${STAGING_BINDIR_NATIVE}/bar:\" to\n``PATH``::\n\n   EXTRANATIVEPATH = \"foo bar\"\n\n" },
      { name:"FAKEROOT", content:"See :term:`bitbake:FAKEROOT` in the BitBake manual.\n\n" },
      { name:"FAKEROOTBASEENV", content:"See :term:`bitbake:FAKEROOTBASEENV` in the BitBake manual.\n\n" },
      { name:"FAKEROOTCMD", content:"See :term:`bitbake:FAKEROOTCMD` in the BitBake manual.\n\n" },
      { name:"FAKEROOTDIRS", content:"See :term:`bitbake:FAKEROOTDIRS` in the BitBake manual.\n\n" },
      { name:"FAKEROOTENV", content:"See :term:`bitbake:FAKEROOTENV` in the BitBake manual.\n\n" },
      { name:"FAKEROOTNOENV", content:"See :term:`bitbake:FAKEROOTNOENV` in the BitBake manual.\n\n" },
      { name:"FEATURE_PACKAGES", content:"Defines one or more packages to include in an image when a specific\nitem is included in :term:`IMAGE_FEATURES`.\nWhen setting the value, :term:`FEATURE_PACKAGES` should have the name of\nthe feature item as an override. Here is an example::\n\n   FEATURE_PACKAGES_widget = \"package1 package2\"\n\nIn this example, if \"widget\" were added to :term:`IMAGE_FEATURES`,\npackage1 and package2 would be included in the image.\n\n.. note::\n\n   Packages installed by features defined through :term:`FEATURE_PACKAGES`\n   are often package groups. While similarly named, you should not\n   confuse the :term:`FEATURE_PACKAGES` variable with package groups, which\n   are discussed elsewhere in the documentation.\n\n" },
      { name:"FEED_DEPLOYDIR_BASE_URI", content:"Points to the base URL of the server and location within the\ndocument-root that provides the metadata and packages required by\nOPKG to support runtime package management of IPK packages. You set\nthis variable in your ``local.conf`` file.\n\nConsider the following example::\n\n   FEED_DEPLOYDIR_BASE_URI = \"http://192.168.7.1/BOARD-dir\"\n\nThis example assumes you are serving\nyour packages over HTTP and your databases are located in a directory\nnamed ``BOARD-dir``, which is underneath your HTTP server's\ndocument-root. In this case, the OpenEmbedded build system generates\na set of configuration files for you in your target that work with\nthe feed.\n\n" },
      { name:"FETCHCMD", content:"See :term:`bitbake:FETCHCMD` in the BitBake manual.\n\n" },
      { name:"FILE", content:"See :term:`bitbake:FILE` in the BitBake manual.\n\n" },
      { name:"FILES", content:"The list of files and directories that are placed in a package. The\n:term:`PACKAGES` variable lists the packages\ngenerated by a recipe.\n\nTo use the :term:`FILES` variable, provide a package name override that\nidentifies the resulting package. Then, provide a space-separated\nlist of files or paths that identify the files you want included as\npart of the resulting package. Here is an example::\n\n   FILES:${PN} += \"${bindir}/mydir1 ${bindir}/mydir2/myfile\"\n\n.. note::\n\n   -  When specifying files or paths, you can pattern match using\n      Python's\n      `glob <https://docs.python.org/3/library/glob.html>`__\n      syntax. For details on the syntax, see the documentation by\n      following the previous link.\n\n   -  When specifying paths as part of the :term:`FILES` variable, it is\n      good practice to use appropriate path variables. For example,\n      use ``${sysconfdir}`` rather than ``/etc``, or ``${bindir}``\n      rather than ``/usr/bin``. You can find a list of these\n      variables at the top of the ``meta/conf/bitbake.conf`` file in\n      the :term:`Source Directory`. You will also\n      find the default values of the various ``FILES:*`` variables in\n      this file.\n\nIf some of the files you provide with the :term:`FILES` variable are\neditable and you know they should not be overwritten during the\npackage update process by the Package Management System (PMS), you\ncan identify these files so that the PMS will not overwrite them. See\nthe :term:`CONFFILES` variable for information on\nhow to identify these files to the PMS.\n\n" },
      { name:"FILES_SOLIBSDEV", content:"Defines the file specification to match\n:term:`SOLIBSDEV`. In other words,\n:term:`FILES_SOLIBSDEV` defines the full path name of the development\nsymbolic link (symlink) for shared libraries on the target platform.\n\nThe following statement from the ``bitbake.conf`` shows how it is\nset::\n\n   FILES_SOLIBSDEV ?= \"${base_libdir}/lib*${SOLIBSDEV} ${libdir}/lib*${SOLIBSDEV}\"\n\n" },
      { name:"FILESEXTRAPATHS", content:"Extends the search path the OpenEmbedded build system uses when\nlooking for files and patches as it processes recipes and append\nfiles. The default directories BitBake uses when it processes recipes\nare initially defined by the :term:`FILESPATH`\nvariable. You can extend :term:`FILESPATH` variable by using\n:term:`FILESEXTRAPATHS`.\n\nBest practices dictate that you accomplish this by using\n:term:`FILESEXTRAPATHS` from within a ``.bbappend`` file and that you\nprepend paths as follows::\n\n   FILESEXTRAPATHS:prepend := \"${THISDIR}/${PN}:\"\n\nIn the above example, the build system first\nlooks for files in a directory that has the same name as the\ncorresponding append file.\n\n.. note::\n\n   When extending :term:`FILESEXTRAPATHS`, be sure to use the immediate\n   expansion (``:=``) operator. Immediate expansion makes sure that\n   BitBake evaluates :term:`THISDIR` at the time the\n   directive is encountered rather than at some later time when\n   expansion might result in a directory that does not contain the\n   files you need.\n\n   Also, include the trailing separating colon character if you are\n   prepending. The trailing colon character is necessary because you\n   are directing BitBake to extend the path by prepending directories\n   to the search path.\n\nHere is another common use::\n\n   FILESEXTRAPATHS:prepend := \"${THISDIR}/files:\"\n\nIn this example, the build system extends the\n:term:`FILESPATH` variable to include a directory named ``files`` that is\nin the same directory as the corresponding append file.\n\nThis next example specifically adds three paths::\n\n   FILESEXTRAPATHS:prepend := \"path_1:path_2:path_3:\"\n\nA final example shows how you can extend the search path and include\na :term:`MACHINE`-specific override, which is useful\nin a BSP layer::\n\n    FILESEXTRAPATHS:prepend:intel-x86-common := \"${THISDIR}/${PN}:\"\n\nThe previous statement appears in the\n``linux-yocto-dev.bbappend`` file, which is found in the\n:ref:`overview-manual/development-environment:yocto project source repositories` in\n``meta-intel/common/recipes-kernel/linux``. Here, the machine\noverride is a special :term:`PACKAGE_ARCH`\ndefinition for multiple ``meta-intel`` machines.\n\n.. note::\n\n   For a layer that supports a single BSP, the override could just be\n   the value of :term:`MACHINE`.\n\nBy prepending paths in ``.bbappend`` files, you allow multiple append\nfiles that reside in different layers but are used for the same\nrecipe to correctly extend the path.\n\n" },
      { name:"FILESOVERRIDES", content:"A subset of :term:`OVERRIDES` used by the OpenEmbedded build system for\ncreating :term:`FILESPATH`. The :term:`FILESOVERRIDES` variable uses\noverrides to automatically extend the :term:`FILESPATH` variable. For an\nexample of how that works, see the :term:`FILESPATH` variable\ndescription. Additionally, you find more information on how overrides\nare handled in the\n\":ref:`bitbake-user-manual/bitbake-user-manual-metadata:conditional syntax (overrides)`\"\nsection of the BitBake User Manual.\n\nBy default, the :term:`FILESOVERRIDES` variable is defined as::\n\n   FILESOVERRIDES = \"${TRANSLATED_TARGET_ARCH}:${MACHINEOVERRIDES}:${DISTROOVERRIDES}\"\n\n.. note::\n\n   Do not hand-edit the :term:`FILESOVERRIDES` variable. The values match up\n   with expected overrides and are used in an expected manner by the\n   build system.\n\n" },
      { name:"FILESPATH", content:"The default set of directories the OpenEmbedded build system uses\nwhen searching for patches and files.\n\nDuring the build process, BitBake searches each directory in\n:term:`FILESPATH` in the specified order when looking for files and\npatches specified by each ``file://`` URI in a recipe's\n:term:`SRC_URI` statements.\n\nThe default value for the :term:`FILESPATH` variable is defined in the\n:ref:`ref-classes-base` class found in ``meta/classes-global`` in the\n:term:`Source Directory`::\n\n   FILESPATH = \"${@base_set_filespath([\"${FILE_DIRNAME}/${BP}\", \\\n       \"${FILE_DIRNAME}/${BPN}\", \"${FILE_DIRNAME}/files\"], d)}\"\n\nThe\n:term:`FILESPATH` variable is automatically extended using the overrides\nfrom the :term:`FILESOVERRIDES` variable.\n\n.. note::\n\n   -  Do not hand-edit the :term:`FILESPATH` variable. If you want the\n      build system to look in directories other than the defaults,\n      extend the :term:`FILESPATH` variable by using the\n      :term:`FILESEXTRAPATHS` variable.\n\n   -  Be aware that the default :term:`FILESPATH` directories do not map\n      to directories in custom layers where append files\n      (``.bbappend``) are used. If you want the build system to find\n      patches or files that reside with your append files, you need\n      to extend the :term:`FILESPATH` variable by using the\n      :term:`FILESEXTRAPATHS` variable.\n\nYou can take advantage of this searching behavior in useful ways. For\nexample, consider a case where there is the following directory structure\nfor general and machine-specific configurations::\n\n   files/defconfig\n   files/MACHINEA/defconfig\n   files/MACHINEB/defconfig\n\nAlso in the example, the :term:`SRC_URI` statement contains\n\"file://defconfig\". Given this scenario, you can set\n:term:`MACHINE` to \"MACHINEA\" and cause the build\nsystem to use files from ``files/MACHINEA``. Set :term:`MACHINE` to\n\"MACHINEB\" and the build system uses files from ``files/MACHINEB``.\nFinally, for any machine other than \"MACHINEA\" and \"MACHINEB\", the\nbuild system uses files from ``files/defconfig``.\n\nYou can find out more about the patching process in the\n\":ref:`overview-manual/concepts:patching`\" section\nin the Yocto Project Overview and Concepts Manual and the\n\":ref:`dev-manual/new-recipe:patching code`\" section in\nthe Yocto Project Development Tasks Manual. See the\n:ref:`ref-tasks-patch` task as well.\n\n" },
      { name:"FILESYSTEM_PERMS_TABLES", content:"Allows you to define your own file permissions settings table as part\nof your configuration for the packaging process. For example, suppose\nyou need a consistent set of custom permissions for a set of groups\nand users across an entire work project. It is best to do this in the\npackages themselves but this is not always possible.\n\nBy default, the OpenEmbedded build system uses the ``fs-perms.txt``,\nwhich is located in the ``meta/files`` folder in the :term:`Source Directory`.\nIf you create your own file\npermissions setting table, you should place it in your layer or the\ndistro's layer.\n\nYou define the :term:`FILESYSTEM_PERMS_TABLES` variable in the\n``conf/local.conf`` file, which is found in the :term:`Build Directory`,\nto point to your custom ``fs-perms.txt``. You can specify more than a\nsingle file permissions setting table. The paths you specify to these\nfiles must be defined within the :term:`BBPATH` variable.\n\nFor guidance on how to create your own file permissions settings\ntable file, examine the existing ``fs-perms.txt``.\n\n" },
      { name:"FIT_CONF_DEFAULT_DTB", content:"Specifies the default device tree binary (dtb) file for a fitImage when\nmultiple are provided.\n\n" },
      { name:"FIT_DESC", content:"Specifies the description string encoded into a fitImage. The default\nvalue is set by the :ref:`ref-classes-kernel-fitimage`\nclass as follows::\n\n   FIT_DESC ?= \"U-Boot fitImage for ${DISTRO_NAME}/${PV}/${MACHINE}\"\n\n" },
      { name:"FIT_GENERATE_KEYS", content:"Decides whether to generate the keys for signing fitImage if they\ndon't already exist. The keys are created in :term:`UBOOT_SIGN_KEYDIR`.\nThe default value is 0.\n\n" },
      { name:"FIT_HASH_ALG", content:"Specifies the hash algorithm used in creating the FIT Image. For e.g. sha256.\n\n" },
      { name:"FIT_KERNEL_COMP_ALG", content:"Compression algorithm to use for the kernel image inside the FIT Image.\nAt present, the only supported values are \"gzip\" (default), \"lzo\" or \"none\".\nIf you set this variable to anything other than \"none\" you may also need\nto set :term:`FIT_KERNEL_COMP_ALG_EXTENSION`.\n\n" },
      { name:"FIT_KERNEL_COMP_ALG_EXTENSION", content:"File extension corresponding to :term:`FIT_KERNEL_COMP_ALG`. The default\nvalue is \".gz\". If you set :term:`FIT_KERNEL_COMP_ALG` to \"lzo\",\nyou may want to set this variable to \".lzo\".\n\n" },
      { name:"FIT_KEY_GENRSA_ARGS", content:"Arguments to openssl genrsa for generating RSA private key for signing\nfitImage. The default value is \"-F4\". i.e. the public exponent 65537 to\nuse.\n\n" },
      { name:"FIT_KEY_REQ_ARGS", content:"Arguments to openssl req for generating certificate for signing fitImage.\nThe default value is \"-batch -new\". batch for non interactive mode\nand new for generating new keys.\n\n" },
      { name:"FIT_KEY_SIGN_PKCS", content:"Format for public key certificate used in signing fitImage.\nThe default value is \"x509\".\n\n" },
      { name:"FIT_SIGN_ALG", content:"Specifies the signature algorithm used in creating the FIT Image.\nFor e.g. rsa2048.\n\n" },
      { name:"FIT_PAD_ALG", content:"Specifies the padding algorithm used in creating the FIT Image.\nThe default value is \"pkcs-1.5\".\n\n" },
      { name:"FIT_SIGN_INDIVIDUAL", content:"If set to \"1\", then the :ref:`ref-classes-kernel-fitimage`\nclass will sign the kernel, dtb and ramdisk images individually in addition\nto signing the fitImage itself. This could be useful if you are\nintending to verify signatures in another context than booting via\nU-Boot.\n\n" },
      { name:"FIT_SIGN_NUMBITS", content:"Size of private key in number of bits used in fitImage. The default\nvalue is \"2048\".\n\n" },
      { name:"FONT_EXTRA_RDEPENDS", content:"When inheriting the :ref:`ref-classes-fontcache` class,\nthis variable specifies the runtime dependencies for font packages.\nBy default, the :term:`FONT_EXTRA_RDEPENDS` is set to \"fontconfig-utils\".\n\n" },
      { name:"FONT_PACKAGES", content:"When inheriting the :ref:`ref-classes-fontcache` class, this variable\nidentifies packages containing font files that need to be cached by\nFontconfig. By default, the :ref:`ref-classes-fontcache` class assumes\nthat fonts are in the recipe's main package (i.e.\n``${``\\ :term:`PN`\\ ``}``). Use this variable if fonts you\nneed are in a package other than that main package.\n\n" },
      { name:"FORCE_RO_REMOVE", content:"Forces the removal of the packages listed in ``ROOTFS_RO_UNNEEDED``\nduring the generation of the root filesystem.\n\nSet the variable to \"1\" to force the removal of these packages.\n\n" },
      { name:"FULL_OPTIMIZATION", content:"The options to pass in :term:`TARGET_CFLAGS` and :term:`CFLAGS` when\ncompiling an optimized system. This variable defaults to \"-O2 -pipe\n${DEBUG_FLAGS}\".\n\n" },
      { name:"GCCPIE", content:"Enables Position Independent Executables (PIE) within the GNU C\nCompiler (GCC). Enabling PIE in the GCC makes Return Oriented\nProgramming (ROP) attacks much more difficult to execute.\n\nBy default the ``security_flags.inc`` file enables PIE by setting the\nvariable as follows::\n\n   GCCPIE ?= \"--enable-default-pie\"\n\n" },
      { name:"GCCVERSION", content:"Specifies the default version of the GNU C Compiler (GCC) used for\ncompilation. By default, :term:`GCCVERSION` is set to \"8.x\" in the\n``meta/conf/distro/include/tcmode-default.inc`` include file::\n\n   GCCVERSION ?= \"8.%\"\n\nYou can override this value by setting it in a\nconfiguration file such as the ``local.conf``.\n\n" },
      { name:"GDB", content:"The minimal command and arguments to run the GNU Debugger.\n\n" },
      { name:"GIR_EXTRA_LIBS_PATH", content:"Allows to specify an extra search path for ``.so`` files\nin GLib related recipes using GObject introspection,\nand which do not compile without this setting.\nSee the \":ref:`dev-manual/gobject-introspection:enabling gobject introspection support`\"\nsection for details.\n\n" },
      { name:"GITDIR", content:"The directory in which a local copy of a Git repository is stored\nwhen it is cloned.\n\n" },
      { name:"GITHUB_BASE_URI", content:"When inheriting the :ref:`ref-classes-github-releases`\nclass, specifies the base URL for fetching releases for the github\nproject you wish to fetch sources from. The default value is as follows::\n\n   GITHUB_BASE_URI ?= \"https://github.com/${BPN}/${BPN}/releases/\"\n\n" },
      { name:"GLIBC_GENERATE_LOCALES", content:"Specifies the list of GLIBC locales to generate should you not wish\nto generate all LIBC locals, which can be time consuming.\n\n.. note::\n\n   If you specifically remove the locale ``en_US.UTF-8``, you must set\n   :term:`IMAGE_LINGUAS` appropriately.\n\nYou can set :term:`GLIBC_GENERATE_LOCALES` in your ``local.conf`` file.\nBy default, all locales are generated::\n\n   GLIBC_GENERATE_LOCALES = \"en_GB.UTF-8 en_US.UTF-8\"\n\n" },
      { name:"GO_IMPORT", content:"When inheriting the :ref:`ref-classes-go` class, this mandatory variable\nsets the import path for the Go package that will be created for the code\nto build. If you have a ``go.mod`` file in the source directory, this\ntypically matches the path in the ``module`` line in this file.\n\nOther Go programs importing this package will use this path.\n\nHere is an example setting from the\n:yocto_git:`go-helloworld_0.1.bb </poky/tree/meta/recipes-extended/go-examples/go-helloworld_0.1.bb>`\nrecipe::\n\n    GO_IMPORT = \"golang.org/x/example\"\n\n" },
      { name:"GO_INSTALL", content:"When inheriting the :ref:`ref-classes-go` class, this optional variable\nspecifies which packages in the sources should be compiled and\ninstalled in the Go build space by the\n`go install <https://go.dev/ref/mod#go-install>`__ command.\n\nHere is an example setting from the\n:oe_git:`crucible </meta-openembedded/tree/meta-oe/recipes-support/crucible/>`\nrecipe::\n\n   GO_INSTALL = \"\\\n       ${GO_IMPORT}/cmd/crucible \\\n       ${GO_IMPORT}/cmd/habtool \\\n   \"\n\nBy default, :term:`GO_INSTALL` is defined as::\n\n   GO_INSTALL ?= \"${GO_IMPORT}/...\"\n\nThe ``...`` wildcard means that it will catch all\npackages found in the sources.\n\nSee the :term:`GO_INSTALL_FILTEROUT` variable for\nfiltering out unwanted packages from the ones\nfound from the :term:`GO_INSTALL` value.\n\n" },
      { name:"GO_INSTALL_FILTEROUT", content:"When using the Go \"vendor\" mechanism to bring in dependencies for a Go\npackage, the default :term:`GO_INSTALL` setting, which uses the ``...``\nwildcard, will include the vendored packages in the build, which produces\nincorrect results.\n\nThere are also some Go packages that are structured poorly, so that the\n``...`` wildcard results in building example or test code that should not\nbe included in the build, or could fail to build.\n\nThis optional variable allows for filtering out a subset of the sources.\nIt defaults to excluding everything under the ``vendor`` subdirectory\nunder package's main directory. This is the normal location for vendored\npackages, but it can be overridden by a recipe to filter out other\nsubdirectories if needed.\n\n" },
      { name:"GO_WORKDIR", content:"When using Go Modules, the current working directory must be the directory\ncontaining the ``go.mod`` file, or one of its subdirectories. When the\n``go`` tool is used, it will automatically look for the ``go.mod`` file\nin the Go working directory or in any parent directory, but not in\nsubdirectories.\n\nWhen using the :ref:`ref-classes-go-mod` class to use Go modules,\nthe optional :term:`GO_WORKDIR` variable, defaulting to the value\nof :term:`GO_IMPORT`, allows to specify a different Go working directory.\n\n" },
      { name:"GROUPADD_PARAM", content:"When inheriting the :ref:`ref-classes-useradd` class,\nthis variable specifies for a package what parameters should be\npassed to the ``groupadd`` command if you wish to add a group to the\nsystem when the package is installed.\n\nHere is an example from the ``dbus`` recipe::\n\n   GROUPADD_PARAM:${PN} = \"-r netdev\"\n\nFor information on the standard Linux shell command\n``groupadd``, see https://linux.die.net/man/8/groupadd.\n\n" },
      { name:"GROUPMEMS_PARAM", content:"When inheriting the :ref:`ref-classes-useradd` class,\nthis variable specifies for a package what parameters should be\npassed to the ``groupmems`` command if you wish to modify the members\nof a group when the package is installed.\n\nFor information on the standard Linux shell command ``groupmems``,\nsee https://linux.die.net/man/8/groupmems.\n\n" },
      { name:"GRUB_GFXSERIAL", content:"Configures the GNU GRand Unified Bootloader (GRUB) to have graphics\nand serial in the boot menu. Set this variable to \"1\" in your\n``local.conf`` or distribution configuration file to enable graphics\nand serial in the menu.\n\nSee the :ref:`ref-classes-grub-efi` class for more\ninformation on how this variable is used.\n\n" },
      { name:"GRUB_OPTS", content:"Additional options to add to the GNU GRand Unified Bootloader (GRUB)\nconfiguration. Use a semi-colon character (``;``) to separate\nmultiple options.\n\nThe :term:`GRUB_OPTS` variable is optional. See the\n:ref:`ref-classes-grub-efi` class for more information\non how this variable is used.\n\n" },
      { name:"GRUB_TIMEOUT", content:"Specifies the timeout before executing the default ``LABEL`` in the\nGNU GRand Unified Bootloader (GRUB).\n\nThe :term:`GRUB_TIMEOUT` variable is optional. See the\n:ref:`ref-classes-grub-efi` class for more information\non how this variable is used.\n\n" },
      { name:"GTKIMMODULES_PACKAGES", content:"When inheriting the :ref:`ref-classes-gtk-immodules-cache` class,\nthis variable specifies the packages that contain the GTK+ input\nmethod modules being installed when the modules are in packages other\nthan the main package.\n\n" },
      { name:"HGDIR", content:"See :term:`bitbake:HGDIR` in the BitBake manual.\n\n" },
      { name:"HOMEPAGE", content:"Website where more information about the software the recipe is\nbuilding can be found.\n\n" },
      { name:"HOST_ARCH", content:"The name of the target architecture, which is normally the same as\n:term:`TARGET_ARCH`. The OpenEmbedded build system\nsupports many architectures. Here is an example list of architectures\nsupported. This list is by no means complete as the architecture is\nconfigurable:\n\n- arm\n- i586\n- x86_64\n- powerpc\n- powerpc64\n- mips\n- mipsel\n\n" },
      { name:"HOST_CC_ARCH", content:"Specifies architecture-specific compiler flags that are passed to the\nC compiler.\n\nDefault initialization for :term:`HOST_CC_ARCH` varies depending on what\nis being built:\n\n-  :term:`TARGET_CC_ARCH` when building for the\n   target\n\n-  :term:`BUILD_CC_ARCH` when building for the build host (i.e.\n   ``-native``)\n\n-  ``BUILDSDK_CC_ARCH`` when building for an SDK (i.e.\n   ``nativesdk-``)\n\n" },
      { name:"HOST_OS", content:"Specifies the name of the target operating system, which is normally\nthe same as the :term:`TARGET_OS`. The variable can\nbe set to \"linux\" for ``glibc``-based systems and to \"linux-musl\" for\n``musl``. For ARM/EABI targets, there are also \"linux-gnueabi\" and\n\"linux-musleabi\" values possible.\n\n" },
      { name:"HOST_PREFIX", content:"Specifies the prefix for the cross-compile toolchain. :term:`HOST_PREFIX`\nis normally the same as :term:`TARGET_PREFIX`.\n\n" },
      { name:"HOST_SYS", content:"Specifies the system, including the architecture and the operating\nsystem, for which the build is occurring in the context of the\ncurrent recipe.\n\nThe OpenEmbedded build system automatically sets this variable based\non :term:`HOST_ARCH`,\n:term:`HOST_VENDOR`, and\n:term:`HOST_OS` variables.\n\n.. note::\n\n   You do not need to set the variable yourself.\n\nConsider these two examples:\n\n-  Given a native recipe on a 32-bit x86 machine running Linux, the\n   value is \"i686-linux\".\n\n-  Given a recipe being built for a little-endian MIPS target running\n   Linux, the value might be \"mipsel-linux\".\n\n" },
      { name:"HOST_VENDOR", content:"Specifies the name of the vendor. :term:`HOST_VENDOR` is normally the\nsame as :term:`TARGET_VENDOR`.\n\n" },
      { name:"HOSTTOOLS", content:"A space-separated list (filter) of tools on the build host that\nshould be allowed to be called from within build tasks. Using this\nfilter helps reduce the possibility of host contamination. If a tool\nspecified in the value of :term:`HOSTTOOLS` is not found on the build\nhost, the OpenEmbedded build system produces an error and the build\nis not started.\n\nFor additional information, see\n:term:`HOSTTOOLS_NONFATAL`.\n\n" },
      { name:"HOSTTOOLS_NONFATAL", content:"A space-separated list (filter) of tools on the build host that\nshould be allowed to be called from within build tasks. Using this\nfilter helps reduce the possibility of host contamination. Unlike\n:term:`HOSTTOOLS`, the OpenEmbedded build system\ndoes not produce an error if a tool specified in the value of\n:term:`HOSTTOOLS_NONFATAL` is not found on the build host. Thus, you can\nuse :term:`HOSTTOOLS_NONFATAL` to filter optional host tools.\n\n" },
      { name:"ICECC_CLASS_DISABLE", content:"Identifies user classes that you do not want the Icecream distributed\ncompile support to consider. This variable is used by the\n:ref:`ref-classes-icecc` class. You set this variable in\nyour ``local.conf`` file.\n\nWhen you list classes using this variable, the recipes inheriting\nthose classes will not benefit from distributed compilation across\nremote hosts. Instead they will be built locally.\n\n" },
      { name:"ICECC_DISABLED", content:"Disables or enables the ``icecc`` (Icecream) function. For more\ninformation on this function and best practices for using this\nvariable, see the \":ref:`ref-classes-icecc`\"\nsection.\n\nSetting this variable to \"1\" in your ``local.conf`` disables the\nfunction::\n\n   ICECC_DISABLED ??= \"1\"\n\nTo enable the function, set the variable as follows::\n\n   ICECC_DISABLED = \"\"\n\n" },
      { name:"ICECC_ENV_EXEC", content:"Points to the ``icecc-create-env`` script that you provide. This\nvariable is used by the :ref:`ref-classes-icecc` class. You\nset this variable in your ``local.conf`` file.\n\nIf you do not point to a script that you provide, the OpenEmbedded\nbuild system uses the default script provided by the\n:oe_git:`icecc-create-env_0.1.bb\n</openembedded-core/tree/meta/recipes-devtools/icecc-create-env/icecc-create-env_0.1.bb>`\nrecipe, which is a modified version and not the one that comes with\n``icecream``.\n\n" },
      { name:"ICECC_PARALLEL_MAKE", content:"Extra options passed to the ``make`` command during the\n:ref:`ref-tasks-compile` task that specify parallel\ncompilation. This variable usually takes the form of \"-j x\", where x\nrepresents the maximum number of parallel threads ``make`` can run.\n\n.. note::\n\n   The options passed affect builds on all enabled machines on the\n   network, which are machines running the ``iceccd`` daemon.\n\nIf your enabled machines support multiple cores, coming up with the\nmaximum number of parallel threads that gives you the best\nperformance could take some experimentation since machine speed,\nnetwork lag, available memory, and existing machine loads can all\naffect build time. Consequently, unlike the\n:term:`PARALLEL_MAKE` variable, there is no\nrule-of-thumb for setting :term:`ICECC_PARALLEL_MAKE` to achieve optimal\nperformance.\n\nIf you do not set :term:`ICECC_PARALLEL_MAKE`, the build system does not\nuse it (i.e. the system does not detect and assign the number of\ncores as is done with :term:`PARALLEL_MAKE`).\n\n" },
      { name:"ICECC_PATH", content:"The location of the ``icecc`` binary. You can set this variable in\nyour ``local.conf`` file. If your ``local.conf`` file does not define\nthis variable, the :ref:`ref-classes-icecc` class attempts\nto define it by locating ``icecc`` using ``which``.\n\n" },
      { name:"ICECC_RECIPE_DISABLE", content:"Identifies user recipes that you do not want the Icecream distributed\ncompile support to consider. This variable is used by the\n:ref:`ref-classes-icecc` class. You set this variable in\nyour ``local.conf`` file.\n\nWhen you list recipes using this variable, you are excluding them\nfrom distributed compilation across remote hosts. Instead they will\nbe built locally.\n\n" },
      { name:"ICECC_RECIPE_ENABLE", content:"Identifies user recipes that use an empty\n:term:`PARALLEL_MAKE` variable that you want to\nforce remote distributed compilation on using the Icecream\ndistributed compile support. This variable is used by the\n:ref:`ref-classes-icecc` class. You set this variable in\nyour ``local.conf`` file.\n\n" },
      { name:"IMAGE_BASENAME", content:"The base name of image output files. This variable defaults to the\nrecipe name (``${``\\ :term:`PN`\\ ``}``).\n\n" },
      { name:"IMAGE_BOOT_FILES", content:"A space-separated list of files installed into the boot partition\nwhen preparing an image using the Wic tool with the\n``bootimg-partition`` source plugin. By default,\nthe files are\ninstalled under the same name as the source files. To change the\ninstalled name, separate it from the original name with a semi-colon\n(;). Source files need to be located in\n:term:`DEPLOY_DIR_IMAGE`. Here are two\nexamples::\n\n   IMAGE_BOOT_FILES = \"u-boot.img uImage;kernel\"\n   IMAGE_BOOT_FILES = \"u-boot.${UBOOT_SUFFIX} ${KERNEL_IMAGETYPE}\"\n\nAlternatively, source files can be picked up using a glob pattern. In\nthis case, the destination file must have the same name as the base\nname of the source file path. To install files into a directory\nwithin the target location, pass its name after a semi-colon (;).\nHere are two examples::\n\n   IMAGE_BOOT_FILES = \"bcm2835-bootfiles/*\"\n   IMAGE_BOOT_FILES = \"bcm2835-bootfiles/*;boot/\"\n\nThe first example\ninstalls all files from ``${DEPLOY_DIR_IMAGE}/bcm2835-bootfiles``\ninto the root of the target partition. The second example installs\nthe same files into a ``boot`` directory within the target partition.\n\nYou can find information on how to use the Wic tool in the\n\":ref:`dev-manual/wic:creating partitioned images using wic`\"\nsection of the Yocto Project Development Tasks Manual. Reference\nmaterial for Wic is located in the\n\":doc:`/ref-manual/kickstart`\" chapter.\n\n" },
      { name:"IMAGE_BUILDINFO_FILE", content:"When using the :ref:`ref-classes-image-buildinfo` class,\nspecifies the file in the image to write the build information into. The\ndefault value is \"``${sysconfdir}/buildinfo``\".\n\n" },
      { name:"IMAGE_BUILDINFO_VARS", content:"When using the :ref:`ref-classes-image-buildinfo` class,\nspecifies the list of variables to include in the `Build Configuration`\nsection of the output file (as a space-separated list). Defaults to\n\":term:`DISTRO` :term:`DISTRO_VERSION`\".\n\n" },
      { name:"IMAGE_CLASSES", content:"A list of classes that all images should inherit. This is typically used\nto enable functionality across all image recipes.\n\nClasses specified in :term:`IMAGE_CLASSES` must be located in the\n``classes-recipe/`` or ``classes/`` subdirectories.\n\n" },
      { name:"IMAGE_CMD", content:"Specifies the command to create the image file for a specific image\ntype, which corresponds to the value set in\n:term:`IMAGE_FSTYPES`, (e.g. ``ext3``,\n``btrfs``, and so forth). When setting this variable, you should use\nan override for the associated type. Here is an example::\n\n   IMAGE_CMD:jffs2 = \"mkfs.jffs2 --root=${IMAGE_ROOTFS} --faketime \\\n       --output=${IMGDEPLOYDIR}/${IMAGE_NAME}${IMAGE_NAME_SUFFIX}.jffs2 \\\n       ${EXTRA_IMAGECMD}\"\n\nYou typically do not need to set this variable unless you are adding\nsupport for a new image type. For more examples on how to set this\nvariable, see the :ref:`ref-classes-image_types`\nclass file, which is ``meta/classes-recipe/image_types.bbclass``.\n\n" },
      { name:"IMAGE_DEVICE_TABLES", content:"Specifies one or more files that contain custom device tables that\nare passed to the ``makedevs`` command as part of creating an image.\nThese files list basic device nodes that should be created under\n``/dev`` within the image. If :term:`IMAGE_DEVICE_TABLES` is not set,\n``files/device_table-minimal.txt`` is used, which is located by\n:term:`BBPATH`. For details on how you should write\ndevice table files, see ``meta/files/device_table-minimal.txt`` as an\nexample.\n\n" },
      { name:"IMAGE_EFI_BOOT_FILES", content:"A space-separated list of files installed into the boot partition\nwhen preparing an image using the Wic tool with the\n``bootimg-efi`` source plugin. By default,\nthe files are\ninstalled under the same name as the source files. To change the\ninstalled name, separate it from the original name with a semi-colon\n(;). Source files need to be located in\n:term:`DEPLOY_DIR_IMAGE`. Here are two\nexamples::\n\n   IMAGE_EFI_BOOT_FILES = \"${KERNEL_IMAGETYPE};bz2\"\n   IMAGE_EFI_BOOT_FILES = \"${KERNEL_IMAGETYPE} microcode.cpio\"\n\nAlternatively, source files can be picked up using a glob pattern. In\nthis case, the destination file must have the same name as the base\nname of the source file path. To install files into a directory\nwithin the target location, pass its name after a semi-colon (;).\nHere are two examples::\n\n   IMAGE_EFI_BOOT_FILES = \"boot/loader/*\"\n   IMAGE_EFI_BOOT_FILES = \"boot/loader/*;boot/\"\n\nThe first example\ninstalls all files from ``${DEPLOY_DIR_IMAGE}/boot/loader/``\ninto the root of the target partition. The second example installs\nthe same files into a ``boot`` directory within the target partition.\n\nYou can find information on how to use the Wic tool in the\n\":ref:`dev-manual/wic:creating partitioned images using wic`\"\nsection of the Yocto Project Development Tasks Manual. Reference\nmaterial for Wic is located in the\n\":doc:`/ref-manual/kickstart`\" chapter.\n\n" },
      { name:"IMAGE_FEATURES", content:"The primary list of features to include in an image. Typically, you\nconfigure this variable in an image recipe. Although you can use this\nvariable from your ``local.conf`` file, which is found in the\n:term:`Build Directory`, best practices dictate that you do\nnot.\n\n.. note::\n\n   To enable extra features from outside the image recipe, use the\n   :term:`EXTRA_IMAGE_FEATURES` variable.\n\nFor a list of image features that ships with the Yocto Project, see\nthe \":ref:`ref-features-image`\" section.\n\nFor an example that shows how to customize your image by using this\nvariable, see the \":ref:`dev-manual/customizing-images:customizing images using custom \\`\\`image_features\\`\\` and \\`\\`extra_image_features\\`\\``\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"IMAGE_FSTYPES", content:"Specifies the formats the OpenEmbedded build system uses during the\nbuild when creating the root filesystem. For example, setting\n:term:`IMAGE_FSTYPES` as follows causes the build system to create root\nfilesystems using two formats: ``.ext3`` and ``.tar.bz2``::\n\n   IMAGE_FSTYPES = \"ext3 tar.bz2\"\n\nFor the complete list of supported image formats from which you can\nchoose, see :term:`IMAGE_TYPES`.\n\n.. note::\n\n   -  If an image recipe uses the \"inherit image\" line and you are\n      setting :term:`IMAGE_FSTYPES` inside the recipe, you must set\n      :term:`IMAGE_FSTYPES` prior to using the \"inherit image\" line.\n\n   -  Due to the way the OpenEmbedded build system processes this\n      variable, you cannot update its contents by using ``:append``\n      or ``:prepend``. You must use the ``+=`` operator to add one or\n      more options to the :term:`IMAGE_FSTYPES` variable.\n\n" },
      { name:"IMAGE_INSTALL", content:"Used by recipes to specify the packages to install into an image\nthrough the :ref:`ref-classes-image` class. Use the\n:term:`IMAGE_INSTALL` variable with care to avoid ordering issues.\n\nImage recipes set :term:`IMAGE_INSTALL` to specify the packages to\ninstall into an image through :ref:`ref-classes-image`. Additionally,\nthere are \"helper\" classes such as the :ref:`ref-classes-core-image`\nclass which can take lists used with :term:`IMAGE_FEATURES` and turn\nthem into auto-generated entries in :term:`IMAGE_INSTALL` in addition\nto its default contents.\n\nWhen you use this variable, it is best to use it as follows::\n\n   IMAGE_INSTALL:append = \" package-name\"\n\nBe sure to include the space\nbetween the quotation character and the start of the package name or\nnames.\n\n.. note::\n\n   -  When working with a\n      :ref:`core-image-minimal-initramfs <ref-manual/images:images>`\n      image, do not use the :term:`IMAGE_INSTALL` variable to specify\n      packages for installation. Instead, use the\n      :term:`PACKAGE_INSTALL` variable, which\n      allows the initial RAM filesystem (:term:`Initramfs`) recipe to use a\n      fixed set of packages and not be affected by :term:`IMAGE_INSTALL`.\n      For information on creating an :term:`Initramfs`, see the\n      \":ref:`dev-manual/building:building an initial ram filesystem (Initramfs) image`\"\n      section in the Yocto Project Development Tasks Manual.\n\n   -  Using :term:`IMAGE_INSTALL` with the\n      :ref:`+= <bitbake-user-manual/bitbake-user-manual-metadata:appending (+=) and prepending (=+) with spaces>`\n      BitBake operator within the ``/conf/local.conf`` file or from\n      within an image recipe is not recommended. Use of this operator in\n      these ways can cause ordering issues. Since\n      :ref:`ref-classes-core-image` sets :term:`IMAGE_INSTALL` to a\n      default value using the\n      :ref:`?= <bitbake-user-manual/bitbake-user-manual-metadata:setting a default value (?=)>`\n      operator, using a ``+=`` operation against :term:`IMAGE_INSTALL`\n      results in unexpected behavior when used within\n      ``conf/local.conf``. Furthermore, the same operation from within an\n      image recipe may or may not succeed depending on the specific\n      situation. In both these cases, the behavior is contrary to how\n      most users expect the ``+=`` operator to work.\n\n" },
      { name:"IMAGE_LINGUAS", content:"Specifies the list of locales to install into the image during the\nroot filesystem construction process. The OpenEmbedded build system\nautomatically splits locale files, which are used for localization,\ninto separate packages. Setting the :term:`IMAGE_LINGUAS` variable\nensures that any locale packages that correspond to packages already\nselected for installation into the image are also installed. Here is\nan example::\n\n   IMAGE_LINGUAS = \"pt-br de-de\"\n\nIn this example, the build system ensures any Brazilian Portuguese\nand German locale files that correspond to packages in the image are\ninstalled (i.e. ``*-locale-pt-br`` and ``*-locale-de-de`` as well as\n``*-locale-pt`` and ``*-locale-de``, since some software packages\nonly provide locale files by language and not by country-specific\nlanguage).\n\nSee the :term:`GLIBC_GENERATE_LOCALES`\nvariable for information on generating GLIBC locales.\n\n\n" },
      { name:"IMAGE_LINK_NAME", content:"The name of the output image symlink (which does not include\nthe version part as :term:`IMAGE_NAME` does). The default value\nis derived using the :term:`IMAGE_BASENAME` and\n:term:`IMAGE_MACHINE_SUFFIX` variables::\n\n   IMAGE_LINK_NAME ?= \"${IMAGE_BASENAME}${IMAGE_MACHINE_SUFFIX}\"\n\n.. note::\n\n   It is possible to set this to \"\" to disable symlink creation,\n   however, you also need to set :term:`IMAGE_NAME` to still have\n   a reasonable value e.g.::\n\n      IMAGE_LINK_NAME = \"\"\n      IMAGE_NAME = \"${IMAGE_BASENAME}${IMAGE_MACHINE_SUFFIX}${IMAGE_VERSION_SUFFIX}\"\n\n" },
      { name:"IMAGE_MACHINE_SUFFIX", content:"Specifies the by default machine-specific suffix for image file names\n(before the extension). The default value is set as follows::\n\n   IMAGE_MACHINE_SUFFIX ??= \"-${MACHINE}\"\n\nThe default :term:`DEPLOY_DIR_IMAGE` already has a :term:`MACHINE`\nsubdirectory, so you may find it unnecessary to also include this suffix\nin the name of every image file. If you prefer to remove the suffix you\ncan set this variable to an empty string::\n\n   IMAGE_MACHINE_SUFFIX = \"\"\n\n(Not to be confused with :term:`IMAGE_NAME_SUFFIX`.)\n\n" },
      { name:"IMAGE_MANIFEST", content:"The manifest file for the image. This file lists all the installed\npackages that make up the image. The file contains package\ninformation on a line-per-package basis as follows::\n\n    packagename packagearch version\n\nThe :ref:`rootfs-postcommands <ref-classes-rootfs*>` class defines the manifest\nfile as follows::\n\n   IMAGE_MANIFEST =\"${IMGDEPLOYDIR}/${IMAGE_NAME}${IMAGE_NAME_SUFFIX}.manifest\"\n\nThe location is\nderived using the :term:`IMGDEPLOYDIR`\nand :term:`IMAGE_NAME` variables. You can find\ninformation on how the image is created in the \":ref:`overview-manual/concepts:image generation`\"\nsection in the Yocto Project Overview and Concepts Manual.\n\n" },
      { name:"IMAGE_NAME", content:"The name of the output image files minus the extension. By default\nthis variable is set using the :term:`IMAGE_LINK_NAME`, and\n:term:`IMAGE_VERSION_SUFFIX` variables::\n\n   IMAGE_NAME ?= \"${IMAGE_LINK_NAME}${IMAGE_VERSION_SUFFIX}\"\n\n" },
      { name:"IMAGE_NAME_SUFFIX", content:"Suffix used for the image output filename --- defaults to ``\".rootfs\"``\nto distinguish the image file from other files created during image\nbuilding; however if this suffix is redundant or not desired you can\nclear the value of this variable (set the value to \"\"). For example,\nthis is typically cleared in :term:`Initramfs` image recipes.\n\n" },
      { name:"IMAGE_OVERHEAD_FACTOR", content:"Defines a multiplier that the build system applies to the initial\nimage size for cases when the multiplier times the returned disk\nusage value for the image is greater than the sum of\n:term:`IMAGE_ROOTFS_SIZE` and :term:`IMAGE_ROOTFS_EXTRA_SPACE`. The result of\nthe multiplier applied to the initial image size creates free disk\nspace in the image as overhead. By default, the build process uses a\nmultiplier of 1.3 for this variable. This default value results in\n30% free disk space added to the image when this method is used to\ndetermine the final generated image size. You should be aware that\npost install scripts and the package management system uses disk\nspace inside this overhead area. Consequently, the multiplier does\nnot produce an image with all the theoretical free disk space. See\n:term:`IMAGE_ROOTFS_SIZE` for information on how the build system\ndetermines the overall image size.\n\nThe default 30% free disk space typically gives the image enough room\nto boot and allows for basic post installs while still leaving a\nsmall amount of free disk space. If 30% free space is inadequate, you\ncan increase the default value. For example, the following setting\ngives you 50% free space added to the image::\n\n   IMAGE_OVERHEAD_FACTOR = \"1.5\"\n\nAlternatively, you can ensure a specific amount of free disk space is\nadded to the image by using the :term:`IMAGE_ROOTFS_EXTRA_SPACE`\nvariable.\n\n" },
      { name:"IMAGE_PKGTYPE", content:"Defines the package type (i.e. DEB, RPM, IPK, or TAR) used by the\nOpenEmbedded build system. The variable is defined appropriately by\nthe :ref:`ref-classes-package_deb`, :ref:`ref-classes-package_rpm`,\nor :ref:`ref-classes-package_ipk` class.\n\nThe :ref:`ref-classes-populate-sdk-*` and :ref:`ref-classes-image`\nclasses use the :term:`IMAGE_PKGTYPE` for packaging up images and SDKs.\n\nYou should not set the :term:`IMAGE_PKGTYPE` manually. Rather, the\nvariable is set indirectly through the appropriate\n:ref:`package_* <ref-classes-package>` class using the\n:term:`PACKAGE_CLASSES` variable. The\nOpenEmbedded build system uses the first package type (e.g. DEB, RPM,\nor IPK) that appears with the variable\n\n.. note::\n\n   Files using the ``.tar`` format are never used as a substitute\n   packaging format for DEB, RPM, and IPK formatted files for your image\n   or SDK.\n\n" },
      { name:"IMAGE_POSTPROCESS_COMMAND", content:"Specifies a list of functions to call once the OpenEmbedded build\nsystem creates the final image output files. You can specify\nfunctions separated by semicolons::\n\n   IMAGE_POSTPROCESS_COMMAND += \"function; ... \"\n\nIf you need to pass the root filesystem path to a command within the\nfunction, you can use ``${IMAGE_ROOTFS}``, which points to the\ndirectory that becomes the root filesystem image. See the\n:term:`IMAGE_ROOTFS` variable for more\ninformation.\n\n" },
      { name:"IMAGE_PREPROCESS_COMMAND", content:"Specifies a list of functions to call before the OpenEmbedded build\nsystem creates the final image output files. You can specify\nfunctions separated by semicolons::\n\n   IMAGE_PREPROCESS_COMMAND += \"function; ... \"\n\nIf you need to pass the root filesystem path to a command within the\nfunction, you can use ``${IMAGE_ROOTFS}``, which points to the\ndirectory that becomes the root filesystem image. See the\n:term:`IMAGE_ROOTFS` variable for more\ninformation.\n\n" },
      { name:"IMAGE_ROOTFS", content:"The location of the root filesystem while it is under construction\n(i.e. during the :ref:`ref-tasks-rootfs` task). This\nvariable is not configurable. Do not change it.\n\n" },
      { name:"IMAGE_ROOTFS_ALIGNMENT", content:"Specifies the alignment for the output image file in Kbytes. If the\nsize of the image is not a multiple of this value, then the size is\nrounded up to the nearest multiple of the value. The default value is\n\"1\". See :term:`IMAGE_ROOTFS_SIZE` for\nadditional information.\n\n" },
      { name:"IMAGE_ROOTFS_EXTRA_SPACE", content:"Defines additional free disk space created in the image in Kbytes. By\ndefault, this variable is set to \"0\". This free disk space is added\nto the image after the build system determines the image size as\ndescribed in :term:`IMAGE_ROOTFS_SIZE`.\n\nThis variable is particularly useful when you want to ensure that a\nspecific amount of free disk space is available on a device after an\nimage is installed and running. For example, to be sure 5 Gbytes of\nfree disk space is available, set the variable as follows::\n\n   IMAGE_ROOTFS_EXTRA_SPACE = \"5242880\"\n\nFor example, the Yocto Project Build Appliance specifically requests\n40 Gbytes of extra space with the line::\n\n   IMAGE_ROOTFS_EXTRA_SPACE = \"41943040\"\n\n" },
      { name:"IMAGE_ROOTFS_SIZE", content:"Defines the size in Kbytes for the generated image. The OpenEmbedded\nbuild system determines the final size for the generated image using\nan algorithm that takes into account the initial disk space used for\nthe generated image, a requested size for the image, and requested\nadditional free disk space to be added to the image. Programatically,\nthe build system determines the final size of the generated image as\nfollows::\n\n   if (image-du * overhead) < rootfs-size:\n       internal-rootfs-size = rootfs-size + xspace\n   else:\n       internal-rootfs-size = (image-du * overhead) + xspace\n   where:\n       image-du = Returned value of the du command on the image.\n       overhead = IMAGE_OVERHEAD_FACTOR\n       rootfs-size = IMAGE_ROOTFS_SIZE\n       internal-rootfs-size = Initial root filesystem size before any modifications.\n       xspace = IMAGE_ROOTFS_EXTRA_SPACE\n\nSee the :term:`IMAGE_OVERHEAD_FACTOR`\nand :term:`IMAGE_ROOTFS_EXTRA_SPACE`\nvariables for related information.\n\n" },
      { name:"IMAGE_TYPEDEP", content:"Specifies a dependency from one image type on another. Here is an\nexample from the :ref:`ref-classes-image-live` class::\n\n   IMAGE_TYPEDEP:live = \"ext3\"\n\nIn the previous example, the variable ensures that when \"live\" is\nlisted with the :term:`IMAGE_FSTYPES` variable,\nthe OpenEmbedded build system produces an ``ext3`` image first since\none of the components of the live image is an ``ext3`` formatted\npartition containing the root filesystem.\n\n" },
      { name:"IMAGE_TYPES", content:"Specifies the complete list of supported image types by default:\n\n- btrfs\n- container\n- cpio\n- cpio.gz\n- cpio.lz4\n- cpio.lzma\n- cpio.xz\n- cramfs\n- erofs\n- erofs-lz4\n- erofs-lz4hc\n- ext2\n- ext2.bz2\n- ext2.gz\n- ext2.lzma\n- ext3\n- ext3.gz\n- ext4\n- ext4.gz\n- f2fs\n- hddimg\n- iso\n- jffs2\n- jffs2.sum\n- multiubi\n- squashfs\n- squashfs-lz4\n- squashfs-lzo\n- squashfs-xz\n- tar\n- tar.bz2\n- tar.gz\n- tar.lz4\n- tar.xz\n- tar.zst\n- ubi\n- ubifs\n- wic\n- wic.bz2\n- wic.gz\n- wic.lzma\n\nFor more information about these types of images, see\n``meta/classes-recipe/image_types*.bbclass`` in the :term:`Source Directory`.\n\n" },
      { name:"IMAGE_VERSION_SUFFIX", content:"Version suffix that is part of the default :term:`IMAGE_NAME` and\n:term:`KERNEL_ARTIFACT_NAME` values.\nDefaults to ``\"-${DATETIME}\"``, however you could set this to a\nversion string that comes from your external build environment if\ndesired, and this suffix would then be used consistently across\nthe build artifacts.\n\n" },
      { name:"IMGDEPLOYDIR", content:"When inheriting the :ref:`ref-classes-image` class directly or\nthrough the :ref:`ref-classes-core-image` class, the\n:term:`IMGDEPLOYDIR` points to a temporary work area for deployed files\nthat is set in the ``image`` class as follows::\n\n   IMGDEPLOYDIR = \"${WORKDIR}/deploy-${PN}-image-complete\"\n\nRecipes inheriting the :ref:`ref-classes-image` class should copy\nfiles to be deployed into :term:`IMGDEPLOYDIR`, and the class will take\ncare of copying them into :term:`DEPLOY_DIR_IMAGE` afterwards.\n\n" },
      { name:"INCOMPATIBLE_LICENSE", content:"Specifies a space-separated list of license names (as they would\nappear in :term:`LICENSE`) that should be excluded\nfrom the build. Recipes that provide no alternatives to listed\nincompatible licenses are not built. Packages that are individually\nlicensed with the specified incompatible licenses will be deleted.\n\nThere is some support for wildcards in this variable's value,\nhowever it is restricted to specific licenses. Currently only\nthese wildcards are allowed and expand as follows:\n\n- ``AGPL-3.0*\"``: ``AGPL-3.0-only``, ``AGPL-3.0-or-later``\n- ``GPL-3.0*``: ``GPL-3.0-only``, ``GPL-3.0-or-later``\n- ``LGPL-3.0*``: ``LGPL-3.0-only``, ``LGPL-3.0-or-later``\n\n.. note::\n\n   This functionality is only regularly tested using the following\n   setting::\n\n           INCOMPATIBLE_LICENSE = \"GPL-3.0* LGPL-3.0* AGPL-3.0*\"\n\n\n   Although you can use other settings, you might be required to\n   remove dependencies on (or provide alternatives to) components that\n   are required to produce a functional system image.\n\n" },
      { name:"INCOMPATIBLE_LICENSE_EXCEPTIONS", content:"Specifies a space-separated list of package and license pairs that\nare allowed to be used even if the license is specified in\n:term:`INCOMPATIBLE_LICENSE`. The package and license pairs are\nseparated using a colon. Example::\n\n   INCOMPATIBLE_LICENSE_EXCEPTIONS = \"gdbserver:GPL-3.0-only gdbserver:LGPL-3.0-only\"\n\n" },
      { name:"INHERIT", content:"Causes the named class or classes to be inherited globally. Anonymous\nfunctions in the class or classes are not executed for the base\nconfiguration and in each individual recipe. The OpenEmbedded build\nsystem ignores changes to :term:`INHERIT` in individual recipes.\nClasses inherited using :term:`INHERIT` must be located in the\n``classes-global/`` or ``classes/`` subdirectories.\n\nFor more information on :term:`INHERIT`, see the\n:ref:`bitbake-user-manual/bitbake-user-manual-metadata:\\`\\`inherit\\`\\` configuration directive`\"\nsection in the BitBake User Manual.\n\n" },
      { name:"INHERIT_DISTRO", content:"Lists classes that will be inherited at the distribution level. It is\nunlikely that you want to edit this variable.\n\nClasses specified in :term:`INHERIT_DISTRO` must be located in the\n``classes-global/`` or ``classes/`` subdirectories.\n\nThe default value of the variable is set as follows in the\n``meta/conf/distro/defaultsetup.conf`` file::\n\n   INHERIT_DISTRO ?= \"debian devshell sstate license\"\n\n" },
      { name:"INHIBIT_DEFAULT_DEPS", content:"Prevents the default dependencies, namely the C compiler and standard\nC library (libc), from being added to :term:`DEPENDS`.\nThis variable is usually used within recipes that do not require any\ncompilation using the C compiler.\n\nSet the variable to \"1\" to prevent the default dependencies from\nbeing added.\n\n" },
      { name:"INHIBIT_PACKAGE_DEBUG_SPLIT", content:"Prevents the OpenEmbedded build system from splitting out debug\ninformation during packaging. By default, the build system splits out\ndebugging information during the\n:ref:`ref-tasks-package` task. For more information on\nhow debug information is split out, see the\n:term:`PACKAGE_DEBUG_SPLIT_STYLE`\nvariable.\n\nTo prevent the build system from splitting out debug information\nduring packaging, set the :term:`INHIBIT_PACKAGE_DEBUG_SPLIT` variable as\nfollows::\n\n   INHIBIT_PACKAGE_DEBUG_SPLIT = \"1\"\n\n" },
      { name:"INHIBIT_PACKAGE_STRIP", content:"If set to \"1\", causes the build to not strip binaries in resulting\npackages and prevents the ``-dbg`` package from containing the source\nfiles.\n\nBy default, the OpenEmbedded build system strips binaries and puts\nthe debugging symbols into ``${``\\ :term:`PN`\\ ``}-dbg``.\nConsequently, you should not set :term:`INHIBIT_PACKAGE_STRIP` when you\nplan to debug in general.\n\n" },
      { name:"INHIBIT_SYSROOT_STRIP", content:"If set to \"1\", causes the build to not strip binaries in the\nresulting sysroot.\n\nBy default, the OpenEmbedded build system strips binaries in the\nresulting sysroot. When you specifically set the\n:term:`INHIBIT_SYSROOT_STRIP` variable to \"1\" in your recipe, you inhibit\nthis stripping.\n\nIf you want to use this variable, include the :ref:`ref-classes-staging`\nclass. This class uses a ``sys_strip()`` function to test for the variable\nand acts accordingly.\n\n.. note::\n\n   Use of the :term:`INHIBIT_SYSROOT_STRIP` variable occurs in rare and\n   special circumstances. For example, suppose you are building\n   bare-metal firmware by using an external GCC toolchain. Furthermore,\n   even if the toolchain's binaries are strippable, there are other files\n   needed for the build that are not strippable.\n\n" },
      { name:"INIT_MANAGER", content:"Specifies the system init manager to use. Available options are:\n\n-  ``sysvinit``\n-  ``systemd``\n-  ``mdev-busybox``\n\nWith ``sysvinit``, the init manager is set to\n:wikipedia:`SysVinit <Init#SysV-style>`, the traditional UNIX init\nsystem. This is the default choice in the Poky distribution, together with\nthe Udev device manager (see the \":ref:`device-manager`\" section).\n\nWith ``systemd``, the init manager becomes :wikipedia:`systemd <Systemd>`,\nwhich comes with the :wikipedia:`udev <Udev>` device manager.\n\nWith ``mdev-busybox``, the init manager becomes the much simpler BusyBox\ninit, together with the BusyBox mdev device manager. This is the simplest\nand lightest solution, and probably the best choice for low-end systems\nwith a rather slow CPU and a limited amount of RAM.\n\nMore concretely, this is used to include\n``conf/distro/include/init-manager-${INIT_MANAGER}.inc`` into the global\nconfiguration. You can have a look at the\n:yocto_git:`meta/conf/distro/include/init-manager-*.inc </poky/tree/meta/conf/distro/include>`\nfiles for more information, and also the \":ref:`init-manager`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"INITRAMFS_DEPLOY_DIR_IMAGE", content:"Indicates the deploy directory used by :ref:`ref-tasks-bundle_initramfs`\nwhere the :term:`INITRAMFS_IMAGE` will be fetched from. This variable is\nset by default to ``${DEPLOY_DIR_IMAGE}`` in the\n:ref:`ref-classes-kernel` class and it's only meant to be changed when\nbuilding an :term:`Initramfs` image from a separate multiconfig via\n:term:`INITRAMFS_MULTICONFIG`.\n\n" },
      { name:"INITRAMFS_FSTYPES", content:"Defines the format for the output image of an initial RAM filesystem\n(:term:`Initramfs`), which is used during boot. Supported formats are the\nsame as those supported by the\n:term:`IMAGE_FSTYPES` variable.\n\nThe default value of this variable, which is set in the\n``meta/conf/bitbake.conf`` configuration file in the\n:term:`Source Directory`, is \"cpio.gz\". The Linux kernel's\n:term:`Initramfs` mechanism, as opposed to the initial RAM filesystem\n:wikipedia:`initrd <Initrd>` mechanism, expects\nan optionally compressed cpio archive.\n\n" },
      { name:"INITRAMFS_IMAGE", content:"Specifies the :term:`PROVIDES` name of an image\nrecipe that is used to build an initial RAM filesystem (:term:`Initramfs`)\nimage. In other words, the :term:`INITRAMFS_IMAGE` variable causes an\nadditional recipe to be built as a dependency to whatever root\nfilesystem recipe you might be using (e.g. ``core-image-sato``). The\n:term:`Initramfs` image recipe you provide should set\n:term:`IMAGE_FSTYPES` to\n:term:`INITRAMFS_FSTYPES`.\n\nAn :term:`Initramfs` image provides a temporary root filesystem used for\nearly system initialization (e.g. loading of modules needed to locate\nand mount the \"real\" root filesystem).\n\n.. note::\n\n   See the ``meta/recipes-core/images/core-image-minimal-initramfs.bb``\n   recipe in the :term:`Source Directory`\n   for an example :term:`Initramfs` recipe. To select this sample recipe as\n   the one built to provide the :term:`Initramfs` image, set :term:`INITRAMFS_IMAGE`\n   to \"core-image-minimal-initramfs\".\n\nYou can also find more information by referencing the\n``meta-poky/conf/templates/default/local.conf.sample.extended``\nconfiguration file in the Source Directory, the :ref:`ref-classes-image`\nclass, and the :ref:`ref-classes-kernel` class to see how to use the\n:term:`INITRAMFS_IMAGE` variable.\n\nIf :term:`INITRAMFS_IMAGE` is empty, which is the default, then no\n:term:`Initramfs` image is built.\n\nFor more information, you can also see the\n:term:`INITRAMFS_IMAGE_BUNDLE`\nvariable, which allows the generated image to be bundled inside the\nkernel image. Additionally, for information on creating an :term:`Initramfs`\nimage, see the \":ref:`dev-manual/building:building an initial ram filesystem (Initramfs) image`\" section\nin the Yocto Project Development Tasks Manual.\n\n" },
      { name:"INITRAMFS_IMAGE_BUNDLE", content:"Controls whether or not the image recipe specified by\n:term:`INITRAMFS_IMAGE` is run through an\nextra pass\n(:ref:`ref-tasks-bundle_initramfs`) during\nkernel compilation in order to build a single binary that contains\nboth the kernel image and the initial RAM filesystem (:term:`Initramfs`)\nimage. This makes use of the\n:term:`CONFIG_INITRAMFS_SOURCE` kernel\nfeature.\n\n.. note::\n\n   Bundling the :term:`Initramfs` with the kernel conflates the code in the\n   :term:`Initramfs` with the GPLv2 licensed Linux kernel binary. Thus only GPLv2\n   compatible software may be part of a bundled :term:`Initramfs`.\n\n.. note::\n\n   Using an extra compilation pass to bundle the :term:`Initramfs` avoids a\n   circular dependency between the kernel recipe and the :term:`Initramfs`\n   recipe should the :term:`Initramfs` include kernel modules. Should that be\n   the case, the :term:`Initramfs` recipe depends on the kernel for the\n   kernel modules, and the kernel depends on the :term:`Initramfs` recipe\n   since the :term:`Initramfs` is bundled inside the kernel image.\n\nThe combined binary is deposited into the ``tmp/deploy`` directory,\nwhich is part of the :term:`Build Directory`.\n\nSetting the variable to \"1\" in a configuration file causes the\nOpenEmbedded build system to generate a kernel image with the\n:term:`Initramfs` specified in :term:`INITRAMFS_IMAGE` bundled within::\n\n   INITRAMFS_IMAGE_BUNDLE = \"1\"\n\nBy default, the :ref:`ref-classes-kernel` class sets this variable to a\nnull string as follows::\n\n   INITRAMFS_IMAGE_BUNDLE ?= \"\"\n\n.. note::\n\n   You must set the :term:`INITRAMFS_IMAGE_BUNDLE` variable in a\n   configuration file. You cannot set the variable in a recipe file.\n\nSee the\n:yocto_git:`local.conf.sample.extended </poky/tree/meta-poky/conf/templates/default/local.conf.sample.extended>`\nfile for additional information. Also, for information on creating an\n:term:`Initramfs`, see the \":ref:`dev-manual/building:building an initial ram filesystem (Initramfs) image`\" section\nin the Yocto Project Development Tasks Manual.\n\n" },
      { name:"INITRAMFS_IMAGE_NAME", content:"\nThis value needs to stay in sync with :term:`IMAGE_LINK_NAME`, but with\n:term:`INITRAMFS_IMAGE` instead of :term:`IMAGE_BASENAME`. The default value\nis set as follows:\n\n   INITRAMFS_IMAGE_NAME ?= \"${@['${INITRAMFS_IMAGE}${IMAGE_MACHINE_SUFFIX}', ''][d.getVar('INITRAMFS_IMAGE') == '']}\"\n\nThat is, if :term:`INITRAMFS_IMAGE` is set, the value of\n:term:`INITRAMFS_IMAGE_NAME` will be set based upon\n:term:`INITRAMFS_IMAGE` and :term:`IMAGE_MACHINE_SUFFIX`.\n\n\n" },
      { name:"INITRAMFS_LINK_NAME", content:"The link name of the initial RAM filesystem image. This variable is\nset in the ``meta/classes-recipe/kernel-artifact-names.bbclass`` file as\nfollows::\n\n   INITRAMFS_LINK_NAME ?= \"initramfs-${KERNEL_ARTIFACT_LINK_NAME}\"\n\nThe value of the\n``KERNEL_ARTIFACT_LINK_NAME`` variable, which is set in the same\nfile, has the following value::\n\n   KERNEL_ARTIFACT_LINK_NAME ?= \"${MACHINE}\"\n\nSee the :term:`MACHINE` variable for additional\ninformation.\n\n" },
      { name:"INITRAMFS_MULTICONFIG", content:"Defines the multiconfig to create a multiconfig dependency to be used by\nthe :ref:`ref-classes-kernel` class.\n\nThis allows the kernel to bundle an :term:`INITRAMFS_IMAGE` coming from\na separate multiconfig, this is meant to be used in addition to :term:`INITRAMFS_DEPLOY_DIR_IMAGE`.\n\nFor more information on how to bundle an :term:`Initramfs` image from a separate\nmulticonfig see the \":ref:`dev-manual/building:Bundling an Initramfs Image From a Separate Multiconfig`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"INITRAMFS_NAME", content:"The base name of the initial RAM filesystem image. This variable is\nset in the ``meta/classes-recipe/kernel-artifact-names.bbclass`` file as\nfollows::\n\n   INITRAMFS_NAME ?= \"initramfs-${KERNEL_ARTIFACT_NAME}\"\n\nSee :term:`KERNEL_ARTIFACT_NAME` for additional information.\n\n" },
      { name:"INITRD", content:"Indicates list of filesystem images to concatenate and use as an\ninitial RAM disk (``initrd``).\n\nThe :term:`INITRD` variable is an optional variable used with the\n:ref:`ref-classes-image-live` class.\n\n" },
      { name:"INITRD_IMAGE", content:"When building a \"live\" bootable image (i.e. when\n:term:`IMAGE_FSTYPES` contains \"live\"),\n:term:`INITRD_IMAGE` specifies the image recipe that should be built to\nprovide the initial RAM disk image. The default value is\n\"core-image-minimal-initramfs\".\n\nSee the :ref:`ref-classes-image-live` class for more information.\n\n" },
      { name:"INITSCRIPT_NAME", content:"The filename of the initialization script as installed to\n``${sysconfdir}/init.d``.\n\nThis variable is used in recipes when using :ref:`ref-classes-update-rc.d`.\nThe variable is mandatory.\n\n" },
      { name:"INITSCRIPT_PACKAGES", content:"A list of the packages that contain initscripts. If multiple packages\nare specified, you need to append the package name to the other\n``INITSCRIPT_*`` as an override.\n\nThis variable is used in recipes when using :ref:`ref-classes-update-rc.d`.\nThe variable is optional and defaults to the :term:`PN`\nvariable.\n\n" },
      { name:"INITSCRIPT_PARAMS", content:"Specifies the options to pass to ``update-rc.d``. Here is an example::\n\n   INITSCRIPT_PARAMS = \"start 99 5 2 . stop 20 0 1 6 .\"\n\nIn this example, the script has a runlevel of 99, starts the script\nin initlevels 2 and 5, and stops the script in levels 0, 1 and 6.\n\nThe variable's default value is \"defaults\", which is set in the\n:ref:`ref-classes-update-rc.d` class.\n\nThe value in :term:`INITSCRIPT_PARAMS` is passed through to the\n``update-rc.d`` command. For more information on valid parameters,\nplease see the ``update-rc.d`` manual page at\nhttps://manpages.debian.org/buster/init-system-helpers/update-rc.d.8.en.html\n\n" },
      { name:"INSANE_SKIP", content:"Specifies the QA checks to skip for a specific package within a\nrecipe. For example, to skip the check for symbolic link ``.so``\nfiles in the main package of a recipe, add the following to the\nrecipe. The package name override must be used, which in this example\nis ``${PN}``::\n\n   INSANE_SKIP:${PN} += \"dev-so\"\n\nSee the \":ref:`ref-classes-insane`\" section for a\nlist of the valid QA checks you can specify using this variable.\n\n" },
      { name:"INSTALL_TIMEZONE_FILE", content:"By default, the ``tzdata`` recipe packages an ``/etc/timezone`` file.\nSet the :term:`INSTALL_TIMEZONE_FILE` variable to \"0\" at the\nconfiguration level to disable this behavior.\n\n" },
      { name:"IPK_FEED_URIS", content:"When the IPK backend is in use and package management is enabled on\nthe target, you can use this variable to set up ``opkg`` in the\ntarget image to point to package feeds on a nominated server. Once\nthe feed is established, you can perform installations or upgrades\nusing the package manager at runtime.\n\n" },
      { name:"KARCH", content:"Defines the kernel architecture used when assembling the\nconfiguration. Architectures supported for this release are:\n\n- powerpc\n- i386\n- x86_64\n- arm\n- qemu\n- mips\n\nYou define the :term:`KARCH` variable in the :ref:`kernel-dev/advanced:bsp descriptions`.\n\n" },
      { name:"KBRANCH", content:"A regular expression used by the build process to explicitly identify\nthe kernel branch that is validated, patched, and configured during a\nbuild. You must set this variable to ensure the exact kernel branch\nyou want is being used by the build process.\n\nValues for this variable are set in the kernel's recipe file and the\nkernel's append file. For example, if you are using the\n``linux-yocto_4.12`` kernel, the kernel recipe file is the\n``meta/recipes-kernel/linux/linux-yocto_4.12.bb`` file. :term:`KBRANCH`\nis set as follows in that kernel recipe file::\n\n   KBRANCH ?= \"standard/base\"\n\nThis variable is also used from the kernel's append file to identify\nthe kernel branch specific to a particular machine or target\nhardware. Continuing with the previous kernel example, the kernel's\nappend file (i.e. ``linux-yocto_4.12.bbappend``) is located in the\nBSP layer for a given machine. For example, the append file for the\nBeaglebone, EdgeRouter, and generic versions of both 32 and 64-bit IA\nmachines (``meta-yocto-bsp``) is named\n``meta-yocto-bsp/recipes-kernel/linux/linux-yocto_4.12.bbappend``.\nHere are the related statements from that append file::\n\n   KBRANCH:genericx86 = \"standard/base\"\n   KBRANCH:genericx86-64 = \"standard/base\"\n   KBRANCH:edgerouter = \"standard/edgerouter\"\n   KBRANCH:beaglebone = \"standard/beaglebone\"\n\nThe :term:`KBRANCH` statements\nidentify the kernel branch to use when building for each supported\nBSP.\n\n" },
      { name:"KBUILD_DEFCONFIG", content:"When used with the :ref:`ref-classes-kernel-yocto`\nclass, specifies an \"in-tree\" kernel configuration file for use\nduring a kernel build.\n\nTypically, when using a ``defconfig`` to configure a kernel during a\nbuild, you place the file in your layer in the same manner as you\nwould place patch files and configuration fragment files (i.e.\n\"out-of-tree\"). However, if you want to use a ``defconfig`` file that\nis part of the kernel tree (i.e. \"in-tree\"), you can use the\n:term:`KBUILD_DEFCONFIG` variable and append the\n:term:`KMACHINE` variable to point to the\n``defconfig`` file.\n\nTo use the variable, set it in the append file for your kernel recipe\nusing the following form::\n\n   KBUILD_DEFCONFIG:<machine> ?= \"defconfig_file\"\n\nHere is an example from a \"raspberrypi2\" :term:`MACHINE` build that uses\na ``defconfig`` file named \"bcm2709_defconfig\"::\n\n   KBUILD_DEFCONFIG:raspberrypi2 = \"bcm2709_defconfig\"\n\nAs an alternative, you can use the following within your append file::\n\n   KBUILD_DEFCONFIG:pn-linux-yocto ?= \"defconfig_file\"\n\nFor more\ninformation on how to use the :term:`KBUILD_DEFCONFIG` variable, see the\n\":ref:`kernel-dev/common:using an \"in-tree\" \\`\\`defconfig\\`\\` file`\"\nsection in the Yocto Project Linux Kernel Development Manual.\n\n" },
      { name:"KCONFIG_MODE", content:"When used with the :ref:`ref-classes-kernel-yocto`\nclass, specifies the kernel configuration values to use for options\nnot specified in the provided ``defconfig`` file. Valid options are::\n\n   KCONFIG_MODE = \"alldefconfig\"\n   KCONFIG_MODE = \"allnoconfig\"\n\nIn ``alldefconfig`` mode the options not explicitly specified will be\nassigned their Kconfig default value. In ``allnoconfig`` mode the\noptions not explicitly specified will be disabled in the kernel\nconfig.\n\nIn case :term:`KCONFIG_MODE` is not set the behaviour will depend on where\nthe ``defconfig`` file is coming from. An \"in-tree\" ``defconfig`` file\nwill be handled in ``alldefconfig`` mode, a ``defconfig`` file placed\nin ``${WORKDIR}`` through a meta-layer will be handled in\n``allnoconfig`` mode.\n\nAn \"in-tree\" ``defconfig`` file can be selected via the\n:term:`KBUILD_DEFCONFIG` variable. :term:`KCONFIG_MODE` does not need to\nbe explicitly set.\n\nA ``defconfig`` file compatible with ``allnoconfig`` mode can be\ngenerated by copying the ``.config`` file from a working Linux kernel\nbuild, renaming it to ``defconfig`` and placing it into the Linux\nkernel ``${WORKDIR}`` through your meta-layer. :term:`KCONFIG_MODE` does\nnot need to be explicitly set.\n\nA ``defconfig`` file compatible with ``alldefconfig`` mode can be\ngenerated using the\n:ref:`ref-tasks-savedefconfig`\ntask and placed into the Linux kernel ``${WORKDIR}`` through your\nmeta-layer. Explicitely set :term:`KCONFIG_MODE`::\n\n   KCONFIG_MODE = \"alldefconfig\"\n\n" },
      { name:"KERNEL_ALT_IMAGETYPE", content:"Specifies an alternate kernel image type for creation in addition to\nthe kernel image type specified using the :term:`KERNEL_IMAGETYPE` and\n:term:`KERNEL_IMAGETYPES` variables.\n\n" },
      { name:"KERNEL_ARTIFACT_NAME", content:"Specifies the name of all of the build artifacts. You can change the\nname of the artifacts by changing the :term:`KERNEL_ARTIFACT_NAME`\nvariable.\n\nThe value of :term:`KERNEL_ARTIFACT_NAME`, which is set in the\n``meta/classes-recipe/kernel-artifact-names.bbclass`` file, has the\nfollowing default value::\n\n   KERNEL_ARTIFACT_NAME ?= \"${PKGE}-${PKGV}-${PKGR}${IMAGE_MACHINE_SUFFIX}${IMAGE_VERSION_SUFFIX}\"\n\nSee the :term:`PKGE`, :term:`PKGV`, :term:`PKGR`, :term:`IMAGE_MACHINE_SUFFIX`\nand :term:`IMAGE_VERSION_SUFFIX` variables for additional information.\n\n" },
      { name:"KERNEL_CLASSES", content:"A list of classes defining kernel image types that the\n:ref:`ref-classes-kernel` class should inherit. You typically\nappend this variable to enable extended image types. An example is\n\":ref:`ref-classes-kernel-fitimage`\", which enables\nfitImage support and resides in ``meta/classes-recipe/kernel-fitimage.bbclass``.\nYou can register custom kernel image types with the\n:ref:`ref-classes-kernel` class using this variable.\n\n" },
      { name:"KERNEL_DANGLING_FEATURES_WARN_ONLY", content:"When kernel configuration fragments are missing for some\n:term:`KERNEL_FEATURES` specified by layers or BSPs,\nbuilding and configuring the kernel stops with an error.\n\nYou can turn these errors into warnings by setting the\nfollowing in ``conf/local.conf``::\n\n   KERNEL_DANGLING_FEATURES_WARN_ONLY = \"1\"\n\nYou will still be warned that runtime issues may occur,\nbut at least the kernel configuration and build process will\nbe allowed to continue.\n\n" },
      { name:"KERNEL_DEBUG_TIMESTAMPS", content:"If set to \"1\", enables timestamping functionality during building\nthe kernel. The default is \"0\" to disable this for reproducibility\nreasons.\n\n" },
      { name:"KERNEL_DEPLOY_DEPEND", content:"Provides a means of controlling the dependency of an image recipe\non the kernel. The default value is \"virtual/kernel:do_deploy\",\nhowever for a small initramfs image or other images that do not\nneed the kernel, this can be set to \"\" in the image recipe.\n\n" },
      { name:"KERNEL_DEVICETREE", content:"Specifies the name of the generated Linux kernel device tree (i.e.\nthe ``.dtb``) file.\n\n.. note::\n\n   There is legacy support for specifying the full path to the device\n   tree. However, providing just the ``.dtb`` file is preferred.\n\nIn order to use this variable, the :ref:`ref-classes-kernel-devicetree`\nclass must be inherited.\n\n" },
      { name:"KERNEL_DTB_LINK_NAME", content:"The link name of the kernel device tree binary (DTB). This variable\nis set in the ``meta/classes-recipe/kernel-artifact-names.bbclass`` file as\nfollows::\n\n   KERNEL_DTB_LINK_NAME ?= \"${KERNEL_ARTIFACT_LINK_NAME}\"\n\nThe\nvalue of the ``KERNEL_ARTIFACT_LINK_NAME`` variable, which is set in\nthe same file, has the following value::\n\n   KERNEL_ARTIFACT_LINK_NAME ?= \"${MACHINE}\"\n\nSee the :term:`MACHINE` variable for additional\ninformation.\n\n" },
      { name:"KERNEL_DTB_NAME", content:"The base name of the kernel device tree binary (DTB). This variable\nis set in the ``meta/classes-recipe/kernel-artifact-names.bbclass`` file as\nfollows::\n\n   KERNEL_DTB_NAME ?= \"${KERNEL_ARTIFACT_NAME}\"\n\nSee :term:`KERNEL_ARTIFACT_NAME` for additional information.\n\n" },
      { name:"KERNEL_DTC_FLAGS", content:"Specifies the ``dtc`` flags that are passed to the Linux kernel build\nsystem when generating the device trees (via ``DTC_FLAGS`` environment\nvariable).\n\nIn order to use this variable, the :ref:`ref-classes-kernel-devicetree`\nclass must be inherited.\n\n" },
      { name:"KERNEL_EXTRA_ARGS", content:"Specifies additional ``make`` command-line arguments the OpenEmbedded\nbuild system passes on when compiling the kernel.\n\n" },
      { name:"KERNEL_FEATURES", content:"Includes additional kernel metadata. In the OpenEmbedded build\nsystem, the default Board Support Packages (BSPs)\n:term:`Metadata` is provided through the\n:term:`KMACHINE` and :term:`KBRANCH`\nvariables. You can use the :term:`KERNEL_FEATURES` variable from within\nthe kernel recipe or kernel append file to further add metadata for\nall BSPs or specific BSPs.\n\nThe metadata you add through this variable includes config fragments\nand features descriptions, which usually includes patches as well as\nconfig fragments. You typically override the :term:`KERNEL_FEATURES`\nvariable for a specific machine. In this way, you can provide\nvalidated, but optional, sets of kernel configurations and features.\n\nFor example, the following example from the ``linux-yocto-rt_4.12``\nkernel recipe adds \"netfilter\" and \"taskstats\" features to all BSPs\nas well as \"virtio\" configurations to all QEMU machines. The last two\nstatements add specific configurations to targeted machine types::\n\n   KERNEL_EXTRA_FEATURES ?= \"features/netfilter/netfilter.scc features/taskstats/taskstats.scc\"\n   KERNEL_FEATURES:append = \" ${KERNEL_EXTRA_FEATURES}\"\n   KERNEL_FEATURES:append:qemuall = \" cfg/virtio.scc\"\n   KERNEL_FEATURES:append:qemux86 = \"  cfg/sound.scc cfg/paravirt_kvm.scc\"\n   KERNEL_FEATURES:append:qemux86-64 = \" cfg/sound.scc\"\n\n" },
      { name:"KERNEL_FIT_LINK_NAME", content:"The link name of the kernel flattened image tree (FIT) image. This\nvariable is set in the ``meta/classes-recipe/kernel-artifact-names.bbclass``\nfile as follows::\n\n   KERNEL_FIT_LINK_NAME ?= \"${KERNEL_ARTIFACT_LINK_NAME}\"\n\nThe value of the\n``KERNEL_ARTIFACT_LINK_NAME`` variable, which is set in the same\nfile, has the following value::\n\n   KERNEL_ARTIFACT_LINK_NAME ?= \"${MACHINE}\"\n\nSee the :term:`MACHINE` variable for additional\ninformation.\n\n" },
      { name:"KERNEL_FIT_NAME", content:"The base name of the kernel flattened image tree (FIT) image. This\nvariable is set in the ``meta/classes-recipe/kernel-artifact-names.bbclass``\nfile as follows::\n\n   KERNEL_FIT_NAME ?= \"${KERNEL_ARTIFACT_NAME}\"\n\nSee :term:`KERNEL_ARTIFACT_NAME` for additional information.\n\n" },
      { name:"KERNEL_IMAGE_LINK_NAME", content:"The link name for the kernel image. This variable is set in the\n``meta/classes-recipe/kernel-artifact-names.bbclass`` file as follows::\n\n   KERNEL_IMAGE_LINK_NAME ?= \"${KERNEL_ARTIFACT_LINK_NAME}\"\n\nThe value of\nthe ``KERNEL_ARTIFACT_LINK_NAME`` variable, which is set in the same\nfile, has the following value::\n\n   KERNEL_ARTIFACT_LINK_NAME ?= \"${MACHINE}\"\n\nSee the :term:`MACHINE` variable for additional\ninformation.\n\n" },
      { name:"KERNEL_IMAGE_MAXSIZE", content:"Specifies the maximum size of the kernel image file in kilobytes. If\n:term:`KERNEL_IMAGE_MAXSIZE` is set, the size of the kernel image file is\nchecked against the set value during the\n:ref:`ref-tasks-sizecheck` task. The task fails if\nthe kernel image file is larger than the setting.\n\n:term:`KERNEL_IMAGE_MAXSIZE` is useful for target devices that have a\nlimited amount of space in which the kernel image must be stored.\n\nBy default, this variable is not set, which means the size of the\nkernel image is not checked.\n\n" },
      { name:"KERNEL_IMAGE_NAME", content:"The base name of the kernel image. This variable is set in the\n``meta/classes-recipe/kernel-artifact-names.bbclass`` file as follows::\n\n   KERNEL_IMAGE_NAME ?= \"${KERNEL_ARTIFACT_NAME}\"\n\nSee :term:`KERNEL_ARTIFACT_NAME` for additional information.\n\n" },
      { name:"KERNEL_IMAGETYPE", content:"The type of kernel to build for a device, usually set by the machine\nconfiguration files and defaults to \"zImage\". This variable is used\nwhen building the kernel and is passed to ``make`` as the target to\nbuild.\n\nTo build additional kernel image types, use :term:`KERNEL_IMAGETYPES`.\n\n" },
      { name:"KERNEL_IMAGETYPES", content:"Lists additional types of kernel images to build for a device in addition\nto image type specified in :term:`KERNEL_IMAGETYPE`. Usually set by the\nmachine configuration files.\n\n" },
      { name:"KERNEL_MODULE_AUTOLOAD", content:"Lists kernel modules that need to be auto-loaded during boot.\n\n.. note::\n\n   This variable replaces the deprecated :term:`module_autoload`\n   variable.\n\nYou can use the :term:`KERNEL_MODULE_AUTOLOAD` variable anywhere that it\ncan be recognized by the kernel recipe or by an out-of-tree kernel\nmodule recipe (e.g. a machine configuration file, a distribution\nconfiguration file, an append file for the recipe, or the recipe\nitself).\n\nSpecify it as follows::\n\n   KERNEL_MODULE_AUTOLOAD += \"module_name1 module_name2 module_name3\"\n\nIncluding :term:`KERNEL_MODULE_AUTOLOAD` causes the OpenEmbedded build\nsystem to populate the ``/etc/modules-load.d/modname.conf`` file with\nthe list of modules to be auto-loaded on boot. The modules appear\none-per-line in the file. Here is an example of the most common use\ncase::\n\n   KERNEL_MODULE_AUTOLOAD += \"module_name\"\n\nFor information on how to populate the ``modname.conf`` file with\n``modprobe.d`` syntax lines, see the :term:`KERNEL_MODULE_PROBECONF` variable.\n\n" },
      { name:"KERNEL_MODULE_PROBECONF", content:"Provides a list of modules for which the OpenEmbedded build system\nexpects to find ``module_conf_``\\ modname values that specify\nconfiguration for each of the modules. For information on how to\nprovide those module configurations, see the\n:term:`module_conf_* <module_conf>` variable.\n\n" },
      { name:"KERNEL_PATH", content:"The location of the kernel sources. This variable is set to the value\nof the :term:`STAGING_KERNEL_DIR` within the :ref:`ref-classes-module`\nclass. For information on how this variable is used, see the\n\":ref:`kernel-dev/common:incorporating out-of-tree modules`\"\nsection in the Yocto Project Linux Kernel Development Manual.\n\nTo help maximize compatibility with out-of-tree drivers used to build\nmodules, the OpenEmbedded build system also recognizes and uses the\n:term:`KERNEL_SRC` variable, which is identical to\nthe :term:`KERNEL_PATH` variable. Both variables are common variables\nused by external Makefiles to point to the kernel source directory.\n\n" },
      { name:"KERNEL_SRC", content:"The location of the kernel sources. This variable is set to the value\nof the :term:`STAGING_KERNEL_DIR` within the :ref:`ref-classes-module`\nclass. For information on how this variable is used, see the\n\":ref:`kernel-dev/common:incorporating out-of-tree modules`\"\nsection in the Yocto Project Linux Kernel Development Manual.\n\nTo help maximize compatibility with out-of-tree drivers used to build\nmodules, the OpenEmbedded build system also recognizes and uses the\n:term:`KERNEL_PATH` variable, which is identical\nto the :term:`KERNEL_SRC` variable. Both variables are common variables\nused by external Makefiles to point to the kernel source directory.\n\n" },
      { name:"KERNEL_VERSION", content:"Specifies the version of the kernel as extracted from ``version.h``\nor ``utsrelease.h`` within the kernel sources. Effects of setting\nthis variable do not take effect until the kernel has been\nconfigured. Consequently, attempting to refer to this variable in\ncontexts prior to configuration will not work.\n\n" },
      { name:"KERNELDEPMODDEPEND", content:"Specifies whether the data referenced through\n:term:`PKGDATA_DIR` is needed or not.\n:term:`KERNELDEPMODDEPEND` does not control whether or not that data\nexists, but simply whether or not it is used. If you do not need to\nuse the data, set the :term:`KERNELDEPMODDEPEND` variable in your\n:term:`Initramfs` recipe. Setting the variable there when the data is not\nneeded avoids a potential dependency loop.\n\n" },
      { name:"KFEATURE_DESCRIPTION", content:"Provides a short description of a configuration fragment. You use\nthis variable in the ``.scc`` file that describes a configuration\nfragment file. Here is the variable used in a file named ``smp.scc``\nto describe SMP being enabled::\n\n    define KFEATURE_DESCRIPTION \"Enable SMP\"\n\n" },
      { name:"KMACHINE", content:"The machine as known by the kernel. Sometimes the machine name used\nby the kernel does not match the machine name used by the\nOpenEmbedded build system. For example, the machine name that the\nOpenEmbedded build system understands as ``core2-32-intel-common``\ngoes by a different name in the Linux Yocto kernel. The kernel\nunderstands that machine as ``intel-core2-32``. For cases like these,\nthe :term:`KMACHINE` variable maps the kernel machine name to the\nOpenEmbedded build system machine name.\n\nThese mappings between different names occur in the Yocto Linux\nKernel's ``meta`` branch. As an example take a look in the\n``common/recipes-kernel/linux/linux-yocto_3.19.bbappend`` file::\n\n   LINUX_VERSION:core2-32-intel-common = \"3.19.0\"\n   COMPATIBLE_MACHINE:core2-32-intel-common = \"${MACHINE}\"\n   SRCREV_meta:core2-32-intel-common = \"8897ef68b30e7426bc1d39895e71fb155d694974\"\n   SRCREV_machine:core2-32-intel-common = \"43b9eced9ba8a57add36af07736344dcc383f711\"\n   KMACHINE:core2-32-intel-common = \"intel-core2-32\"\n   KBRANCH:core2-32-intel-common = \"standard/base\"\n   KERNEL_FEATURES:append:core2-32-intel-common = \" ${KERNEL_FEATURES_INTEL_COMMON}\"\n\nThe :term:`KMACHINE` statement says\nthat the kernel understands the machine name as \"intel-core2-32\".\nHowever, the OpenEmbedded build system understands the machine as\n\"core2-32-intel-common\".\n\n" },
      { name:"KTYPE", content:"Defines the kernel type to be used in assembling the configuration.\nThe linux-yocto recipes define \"standard\", \"tiny\", and \"preempt-rt\"\nkernel types. See the \":ref:`kernel-dev/advanced:kernel types`\"\nsection in the\nYocto Project Linux Kernel Development Manual for more information on\nkernel types.\n\nYou define the :term:`KTYPE` variable in the\n:ref:`kernel-dev/advanced:bsp descriptions`. The\nvalue you use must match the value used for the\n:term:`LINUX_KERNEL_TYPE` value used by the\nkernel recipe.\n\n" },
      { name:"LABELS", content:"Provides a list of targets for automatic configuration.\n\nSee the :ref:`ref-classes-grub-efi` class for more\ninformation on how this variable is used.\n\n" },
      { name:"LAYERDEPENDS", content:"Lists the layers, separated by spaces, on which this recipe depends.\nOptionally, you can specify a specific layer version for a dependency\nby adding it to the end of the layer name. Here is an example::\n\n   LAYERDEPENDS_mylayer = \"anotherlayer (=3)\"\n\nIn this previous example,\nversion 3 of \"anotherlayer\" is compared against\n:term:`LAYERVERSION`\\ ``_anotherlayer``.\n\nAn error is produced if any dependency is missing or the version\nnumbers (if specified) do not match exactly. This variable is used in\nthe ``conf/layer.conf`` file and must be suffixed with the name of\nthe specific layer (e.g. ``LAYERDEPENDS_mylayer``).\n\n" },
      { name:"LAYERDIR", content:"When used inside the ``layer.conf`` configuration file, this variable\nprovides the path of the current layer. This variable is not\navailable outside of ``layer.conf`` and references are expanded\nimmediately when parsing of the file completes.\n\n" },
      { name:"LAYERDIR_RE", content:"See :term:`bitbake:LAYERDIR_RE` in the BitBake manual.\n\n" },
      { name:"LAYERRECOMMENDS", content:"Lists the layers, separated by spaces, recommended for use with this\nlayer.\n\nOptionally, you can specify a specific layer version for a\nrecommendation by adding the version to the end of the layer name.\nHere is an example::\n\n   LAYERRECOMMENDS_mylayer = \"anotherlayer (=3)\"\n\nIn this previous example, version 3 of \"anotherlayer\" is compared\nagainst ``LAYERVERSION_anotherlayer``.\n\nThis variable is used in the ``conf/layer.conf`` file and must be\nsuffixed with the name of the specific layer (e.g.\n``LAYERRECOMMENDS_mylayer``).\n\n" },
      { name:"LAYERSERIES_COMPAT", content:"See :term:`bitbake:LAYERSERIES_COMPAT` in the BitBake manual.\n\n" },
      { name:"LAYERVERSION", content:"Optionally specifies the version of a layer as a single number. You\ncan use this within :term:`LAYERDEPENDS` for\nanother layer in order to depend on a specific version of the layer.\nThis variable is used in the ``conf/layer.conf`` file and must be\nsuffixed with the name of the specific layer (e.g.\n``LAYERVERSION_mylayer``).\n\n" },
      { name:"LD", content:"The minimal command and arguments used to run the linker.\n\n" },
      { name:"LDFLAGS", content:"Specifies the flags to pass to the linker. This variable is exported\nto an environment variable and thus made visible to the software\nbeing built during the compilation step.\n\nDefault initialization for :term:`LDFLAGS` varies depending on what is\nbeing built:\n\n-  :term:`TARGET_LDFLAGS` when building for the\n   target\n\n-  :term:`BUILD_LDFLAGS` when building for the\n   build host (i.e. ``-native``)\n\n-  :term:`BUILDSDK_LDFLAGS` when building for\n   an SDK (i.e. ``nativesdk-``)\n\n" },
      { name:"LEAD_SONAME", content:"Specifies the lead (or primary) compiled library file (i.e. ``.so``)\nthat the :ref:`ref-classes-debian` class applies its\nnaming policy to given a recipe that packages multiple libraries.\n\nThis variable works in conjunction with the :ref:`ref-classes-debian`\nclass.\n\n" },
      { name:"LIC_FILES_CHKSUM", content:"Checksums of the license text in the recipe source code.\n\nThis variable tracks changes in license text of the source code\nfiles. If the license text is changed, it will trigger a build\nfailure, which gives the developer an opportunity to review any\nlicense change.\n\nThis variable must be defined for all recipes (unless\n:term:`LICENSE` is set to \"CLOSED\").\n\nFor more information, see the \":ref:`dev-manual/licenses:tracking license changes`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"LICENSE", content:"The list of source licenses for the recipe. Follow these rules:\n\n-  Do not use spaces within individual license names.\n\n-  Separate license names using \\| (pipe) when there is a choice\n   between licenses.\n\n-  Separate license names using & (ampersand) when there are\n   multiple licenses for different parts of the source.\n\n-  You can use spaces between license names.\n\n-  For standard licenses, use the names of the files in\n   ``meta/files/common-licenses/`` or the\n   :term:`SPDXLICENSEMAP` flag names defined in\n   ``meta/conf/licenses.conf``.\n\nHere are some examples::\n\n   LICENSE = \"LGPL-2.1-only | GPL-3.0-only\"\n   LICENSE = \"MPL-1.0 & LGPL-2.1-only\"\n   LICENSE = \"GPL-2.0-or-later\"\n\nThe first example is from the\nrecipes for Qt, which the user may choose to distribute under either\nthe LGPL version 2.1 or GPL version 3. The second example is from\nCairo where two licenses cover different parts of the source code.\nThe final example is from ``sysstat``, which presents a single\nlicense.\n\nYou can also specify licenses on a per-package basis to handle\nsituations where components of the output have different licenses.\nFor example, a piece of software whose code is licensed under GPLv2\nbut has accompanying documentation licensed under the GNU Free\nDocumentation License 1.2 could be specified as follows::\n\n   LICENSE = \"GFDL-1.2 & GPL-2.0-only\"\n   LICENSE:${PN} = \"GPL-2.0.only\"\n   LICENSE:${PN}-doc = \"GFDL-1.2\"\n\n" },
      { name:"LICENSE_CREATE_PACKAGE", content:"Setting :term:`LICENSE_CREATE_PACKAGE` to \"1\" causes the OpenEmbedded\nbuild system to create an extra package (i.e.\n``${``\\ :term:`PN`\\ ``}-lic``) for each recipe and to add\nthose packages to the\n:term:`RRECOMMENDS`\\ ``:${PN}``.\n\nThe ``${PN}-lic`` package installs a directory in\n``/usr/share/licenses`` named ``${PN}``, which is the recipe's base\nname, and installs files in that directory that contain license and\ncopyright information (i.e. copies of the appropriate license files\nfrom ``meta/common-licenses`` that match the licenses specified in\nthe :term:`LICENSE` variable of the recipe metadata\nand copies of files marked in\n:term:`LIC_FILES_CHKSUM` as containing\nlicense text).\n\nFor related information on providing license text, see the\n:term:`COPY_LIC_DIRS` variable, the\n:term:`COPY_LIC_MANIFEST` variable, and the\n\":ref:`dev-manual/licenses:providing license text`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"LICENSE_FLAGS", content:"Specifies additional flags for a recipe you must allow through\n:term:`LICENSE_FLAGS_ACCEPTED` in\norder for the recipe to be built. When providing multiple flags,\nseparate them with spaces.\n\nThis value is independent of :term:`LICENSE` and is\ntypically used to mark recipes that might require additional licenses\nin order to be used in a commercial product. For more information,\nsee the\n\":ref:`dev-manual/licenses:enabling commercially licensed recipes`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"LICENSE_FLAGS_ACCEPTED", content:"Lists license flags that when specified in\n:term:`LICENSE_FLAGS` within a recipe should not\nprevent that recipe from being built.  For more information, see the\n\":ref:`dev-manual/licenses:enabling commercially licensed recipes`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"LICENSE_PATH", content:"Path to additional licenses used during the build. By default, the\nOpenEmbedded build system uses :term:`COMMON_LICENSE_DIR` to define the\ndirectory that holds common license text used during the build. The\n:term:`LICENSE_PATH` variable allows you to extend that location to other\nareas that have additional licenses::\n\n   LICENSE_PATH += \"path-to-additional-common-licenses\"\n\n" },
      { name:"LINUX_KERNEL_TYPE", content:"Defines the kernel type to be used in assembling the configuration.\nThe linux-yocto recipes define \"standard\", \"tiny\", and \"preempt-rt\"\nkernel types. See the \":ref:`kernel-dev/advanced:kernel types`\"\nsection in the\nYocto Project Linux Kernel Development Manual for more information on\nkernel types.\n\nIf you do not specify a :term:`LINUX_KERNEL_TYPE`, it defaults to\n\"standard\". Together with :term:`KMACHINE`, the\n:term:`LINUX_KERNEL_TYPE` variable defines the search arguments used by\nthe kernel tools to find the appropriate description within the\nkernel :term:`Metadata` with which to build out the sources\nand configuration.\n\n" },
      { name:"LINUX_VERSION", content:"The Linux version from ``kernel.org`` on which the Linux kernel image\nbeing built using the OpenEmbedded build system is based. You define\nthis variable in the kernel recipe. For example, the\n``linux-yocto-3.4.bb`` kernel recipe found in\n``meta/recipes-kernel/linux`` defines the variables as follows::\n\n   LINUX_VERSION ?= \"3.4.24\"\n\nThe :term:`LINUX_VERSION` variable is used to define :term:`PV`\nfor the recipe::\n\n   PV = \"${LINUX_VERSION}+git${SRCPV}\"\n\n" },
      { name:"LINUX_VERSION_EXTENSION", content:"A string extension compiled into the version string of the Linux\nkernel built with the OpenEmbedded build system. You define this\nvariable in the kernel recipe. For example, the linux-yocto kernel\nrecipes all define the variable as follows::\n\n   LINUX_VERSION_EXTENSION ?= \"-yocto-${LINUX_KERNEL_TYPE}\"\n\nDefining this variable essentially sets the Linux kernel\nconfiguration item ``CONFIG_LOCALVERSION``, which is visible through\nthe ``uname`` command. Here is an example that shows the extension\nassuming it was set as previously shown::\n\n   $ uname -r\n   3.7.0-rc8-custom\n\n" },
      { name:"LOG_DIR", content:"Specifies the directory to which the OpenEmbedded build system writes\noverall log files. The default directory is ``${TMPDIR}/log``.\n\nFor the directory containing logs specific to each task, see the\n:term:`T` variable.\n\n" },
      { name:"MACHINE", content:"Specifies the target device for which the image is built. You define\n:term:`MACHINE` in the ``local.conf`` file found in the\n:term:`Build Directory`. By default, :term:`MACHINE` is set to\n\"qemux86\", which is an x86-based architecture machine to be emulated\nusing QEMU::\n\n   MACHINE ?= \"qemux86\"\n\nThe variable corresponds to a machine configuration file of the same\nname, through which machine-specific configurations are set. Thus,\nwhen :term:`MACHINE` is set to \"qemux86\", the corresponding\n``qemux86.conf`` machine configuration file can be found in\nthe :term:`Source Directory` in\n``meta/conf/machine``.\n\nThe list of machines supported by the Yocto Project as shipped\ninclude the following::\n\n   MACHINE ?= \"qemuarm\"\n   MACHINE ?= \"qemuarm64\"\n   MACHINE ?= \"qemumips\"\n   MACHINE ?= \"qemumips64\"\n   MACHINE ?= \"qemuppc\"\n   MACHINE ?= \"qemux86\"\n   MACHINE ?= \"qemux86-64\"\n   MACHINE ?= \"genericx86\"\n   MACHINE ?= \"genericx86-64\"\n   MACHINE ?= \"beaglebone\"\n   MACHINE ?= \"edgerouter\"\n\nThe last five are Yocto Project reference hardware\nboards, which are provided in the ``meta-yocto-bsp`` layer.\n\n.. note::\n\n   Adding additional Board Support Package (BSP) layers to your\n   configuration adds new possible settings for :term:`MACHINE`.\n\n" },
      { name:"MACHINE_ARCH", content:"Specifies the name of the machine-specific architecture. This\nvariable is set automatically from :term:`MACHINE` or\n:term:`TUNE_PKGARCH`. You should not hand-edit\nthe :term:`MACHINE_ARCH` variable.\n\n" },
      { name:"MACHINE_ESSENTIAL_EXTRA_RDEPENDS", content:"A list of required machine-specific packages to install as part of\nthe image being built. The build process depends on these packages\nbeing present. Furthermore, because this is a \"machine-essential\"\nvariable, the list of packages are essential for the machine to boot.\nThe impact of this variable affects images based on\n``packagegroup-core-boot``, including the ``core-image-minimal``\nimage.\n\nThis variable is similar to the\n:term:`MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS` variable with the exception\nthat the image being built has a build dependency on the variable's\nlist of packages. In other words, the image will not build if a file\nin this list is not found.\n\nAs an example, suppose the machine for which you are building\nrequires ``example-init`` to be run during boot to initialize the\nhardware. In this case, you would use the following in the machine's\n``.conf`` configuration file::\n\n   MACHINE_ESSENTIAL_EXTRA_RDEPENDS += \"example-init\"\n\n" },
      { name:"MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS", content:"A list of recommended machine-specific packages to install as part of\nthe image being built. The build process does not depend on these\npackages being present. However, because this is a\n\"machine-essential\" variable, the list of packages are essential for\nthe machine to boot. The impact of this variable affects images based\non ``packagegroup-core-boot``, including the ``core-image-minimal``\nimage.\n\nThis variable is similar to the :term:`MACHINE_ESSENTIAL_EXTRA_RDEPENDS`\nvariable with the exception that the image being built does not have\na build dependency on the variable's list of packages. In other\nwords, the image will still build if a package in this list is not\nfound. Typically, this variable is used to handle essential kernel\nmodules, whose functionality may be selected to be built into the\nkernel rather than as a module, in which case a package will not be\nproduced.\n\nConsider an example where you have a custom kernel where a specific\ntouchscreen driver is required for the machine to be usable. However,\nthe driver can be built as a module or into the kernel depending on\nthe kernel configuration. If the driver is built as a module, you\nwant it to be installed. But, when the driver is built into the\nkernel, you still want the build to succeed. This variable sets up a\n\"recommends\" relationship so that in the latter case, the build will\nnot fail due to the missing package. To accomplish this, assuming the\npackage for the module was called ``kernel-module-ab123``, you would\nuse the following in the machine's ``.conf`` configuration file::\n\n   MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS += \"kernel-module-ab123\"\n\n.. note::\n\n   In this example, the ``kernel-module-ab123`` recipe needs to\n   explicitly set its :term:`PACKAGES` variable to ensure that BitBake\n   does not use the kernel recipe's :term:`PACKAGES_DYNAMIC` variable to\n   satisfy the dependency.\n\nSome examples of these machine essentials are flash, screen,\nkeyboard, mouse, or touchscreen drivers (depending on the machine).\n\n" },
      { name:"MACHINE_EXTRA_RDEPENDS", content:"A list of machine-specific packages to install as part of the image\nbeing built that are not essential for the machine to boot. However,\nthe build process for more fully-featured images depends on the\npackages being present.\n\nThis variable affects all images based on ``packagegroup-base``,\nwhich does not include the ``core-image-minimal`` or\n``core-image-full-cmdline`` images.\n\nThe variable is similar to the :term:`MACHINE_EXTRA_RRECOMMENDS` variable\nwith the exception that the image being built has a build dependency\non the variable's list of packages. In other words, the image will\nnot build if a file in this list is not found.\n\nAn example is a machine that has WiFi capability but is not essential\nfor the machine to boot the image. However, if you are building a\nmore fully-featured image, you want to enable the WiFi. The package\ncontaining the firmware for the WiFi hardware is always expected to\nexist, so it is acceptable for the build process to depend upon\nfinding the package. In this case, assuming the package for the\nfirmware was called ``wifidriver-firmware``, you would use the\nfollowing in the ``.conf`` file for the machine::\n\n   MACHINE_EXTRA_RDEPENDS += \"wifidriver-firmware\"\n\n" },
      { name:"MACHINE_EXTRA_RRECOMMENDS", content:"A list of machine-specific packages to install as part of the image\nbeing built that are not essential for booting the machine. The image\nbeing built has no build dependency on this list of packages.\n\nThis variable affects only images based on ``packagegroup-base``,\nwhich does not include the ``core-image-minimal`` or\n``core-image-full-cmdline`` images.\n\nThis variable is similar to the :term:`MACHINE_EXTRA_RDEPENDS` variable\nwith the exception that the image being built does not have a build\ndependency on the variable's list of packages. In other words, the\nimage will build if a file in this list is not found.\n\nAn example is a machine that has WiFi capability but is not essential\nFor the machine to boot the image. However, if you are building a\nmore fully-featured image, you want to enable WiFi. In this case, the\npackage containing the WiFi kernel module will not be produced if the\nWiFi driver is built into the kernel, in which case you still want\nthe build to succeed instead of failing as a result of the package\nnot being found. To accomplish this, assuming the package for the\nmodule was called ``kernel-module-examplewifi``, you would use the\nfollowing in the ``.conf`` file for the machine::\n\n   MACHINE_EXTRA_RRECOMMENDS += \"kernel-module-examplewifi\"\n\n" },
      { name:"MACHINE_FEATURES", content:"Specifies the list of hardware features the\n:term:`MACHINE` is capable of supporting. For related\ninformation on enabling features, see the\n:term:`DISTRO_FEATURES`,\n:term:`COMBINED_FEATURES`, and\n:term:`IMAGE_FEATURES` variables.\n\nFor a list of hardware features supported by the Yocto Project as\nshipped, see the \":ref:`ref-features-machine`\" section.\n\n" },
      { name:"MACHINE_FEATURES_BACKFILL", content:"A list of space-separated features to be added to\n:term:`MACHINE_FEATURES` if not also present in\n:term:`MACHINE_FEATURES_BACKFILL_CONSIDERED`.\n\nThis variable is set in the ``meta/conf/bitbake.conf`` file. It is not\nintended to be user-configurable. It is best to just reference the\nvariable to see which machine features are being\n:ref:`backfilled <ref-features-backfill>` for all machine configurations.\n\n" },
      { name:"MACHINE_FEATURES_BACKFILL_CONSIDERED", content:"A list of space-separated features from :term:`MACHINE_FEATURES_BACKFILL`\nthat should not be :ref:`backfilled <ref-features-backfill>` (i.e. added\nto :term:`MACHINE_FEATURES`) during the build.\n\nThis corresponds to an opt-out mechanism. When new default machine\nfeatures are introduced, machine definition maintainers can review\n(`consider`) them and decide to exclude them from the\n:ref:`backfilled <ref-features-backfill>` features. Therefore, the\ncombination of :term:`MACHINE_FEATURES_BACKFILL` and\n:term:`MACHINE_FEATURES_BACKFILL_CONSIDERED` makes it possible to\nadd new default features without breaking existing machine definitions.\n\n" },
      { name:"MACHINEOVERRIDES", content:"A colon-separated list of overrides that apply to the current\nmachine. By default, this list includes the value of\n:term:`MACHINE`.\n\nYou can extend :term:`MACHINEOVERRIDES` to add extra overrides that\nshould apply to a machine. For example, all machines emulated in QEMU\n(e.g. ``qemuarm``, ``qemux86``, and so forth) include a file named\n``meta/conf/machine/include/qemu.inc`` that prepends the following\noverride to :term:`MACHINEOVERRIDES`::\n\n   MACHINEOVERRIDES =. \"qemuall:\"\n\nThis\noverride allows variables to be overridden for all machines emulated\nin QEMU, like in the following example from the ``connman-conf``\nrecipe::\n\n   SRC_URI:append:qemuall = \" file://wired.config \\\n       file://wired-setup \\\n       \"\n\nThe underlying mechanism behind\n:term:`MACHINEOVERRIDES` is simply that it is included in the default\nvalue of :term:`OVERRIDES`.\n\n" },
      { name:"MAINTAINER", content:"The email address of the distribution maintainer.\n\n" },
      { name:"MESON_BUILDTYPE", content:"Value of the Meson ``--buildtype`` argument used by the\n:ref:`ref-classes-meson` class. It defaults to ``debug`` if\n:term:`DEBUG_BUILD` is set to \"1\", and ``plain`` otherwise.\n\nSee `Meson build options <https://mesonbuild.com/Builtin-options.html>`__\nfor the values you could set in a recipe. Values such as ``plain``,\n``debug``, ``debugoptimized``, ``release`` and ``minsize`` allow\nyou to specify the inclusion of debugging symbols and the compiler\noptimizations (none, performance or size).\n\n" },
      { name:"METADATA_BRANCH", content:"The branch currently checked out for the OpenEmbedded-Core layer (path\ndetermined by :term:`COREBASE`).\n\n" },
      { name:"METADATA_REVISION", content:"The revision currently checked out for the OpenEmbedded-Core layer (path\ndetermined by :term:`COREBASE`).\n\n" },
      { name:"MIME_XDG_PACKAGES", content:"The current implementation of the :ref:`ref-classes-mime-xdg`\nclass cannot detect ``.desktop`` files installed through absolute\nsymbolic links. Use this setting to make the class create post-install\nand post-remove scripts for these packages anyway, to invoke the\n``update-destop-database`` command.\n\n" },
      { name:"MIRRORS", content:"Specifies additional paths from which the OpenEmbedded build system\ngets source code. When the build system searches for source code, it\nfirst tries the local download directory. If that location fails, the\nbuild system tries locations defined by\n:term:`PREMIRRORS`, the upstream source, and then\nlocations specified by :term:`MIRRORS` in that order.\n\nAssuming your distribution (:term:`DISTRO`) is \"poky\",\nthe default value for :term:`MIRRORS` is defined in the\n``conf/distro/poky.conf`` file in the ``meta-poky`` Git repository.\n\n" },
      { name:"MLPREFIX", content:"Specifies a prefix has been added to :term:`PN` to create a\nspecial version of a recipe or package (i.e. a Multilib version). The\nvariable is used in places where the prefix needs to be added to or\nremoved from a name (e.g. the :term:`BPN` variable).\n:term:`MLPREFIX` gets set when a prefix has been added to :term:`PN`.\n\n.. note::\n\n   The \"ML\" in :term:`MLPREFIX` stands for \"MultiLib\". This representation\n   is historical and comes from a time when \":ref:`ref-classes-nativesdk`\"\n   was a suffix rather than a prefix on the recipe name. When\n   \":ref:`ref-classes-nativesdk`\" was turned into a prefix, it made sense\n   to set :term:`MLPREFIX` for it as well.\n\nTo help understand when :term:`MLPREFIX` might be needed, consider when\n:term:`BBCLASSEXTEND` is used to provide a :ref:`ref-classes-nativesdk`\nversion of a recipe in addition to the target version. If that recipe\ndeclares build-time dependencies on tasks in other recipes by using\n:term:`DEPENDS`, then a dependency on \"foo\" will automatically get\nrewritten to a dependency on \"nativesdk-foo\". However, dependencies like\nthe following will not get rewritten automatically::\n\n   do_foo[depends] += \"recipe:do_foo\"\n\nIf you want such a dependency to also get transformed, you can do the\nfollowing::\n\n   do_foo[depends] += \"${MLPREFIX}recipe:do_foo\"\n\n" },
      { name:"module_autoload", content:"This variable has been replaced by the :term:`KERNEL_MODULE_AUTOLOAD`\nvariable. You should replace all occurrences of :term:`module_autoload`\nwith additions to :term:`KERNEL_MODULE_AUTOLOAD`, for example::\n\n   module_autoload_rfcomm = \"rfcomm\"\n\nshould now be replaced with::\n\n   KERNEL_MODULE_AUTOLOAD += \"rfcomm\"\n\nSee the :term:`KERNEL_MODULE_AUTOLOAD` variable for more information.\n\n" },
      { name:"module_conf", content:"Specifies `modprobe.d <https://linux.die.net/man/5/modprobe.d>`__\nsyntax lines for inclusion in the ``/etc/modprobe.d/modname.conf``\nfile.\n\nYou can use this variable anywhere that it can be recognized by the\nkernel recipe or out-of-tree kernel module recipe (e.g. a machine\nconfiguration file, a distribution configuration file, an append file\nfor the recipe, or the recipe itself). If you use this variable, you\nmust also be sure to list the module name in the\n:term:`KERNEL_MODULE_PROBECONF`\nvariable.\n\nHere is the general syntax::\n\n   module_conf_module_name = \"modprobe.d-syntax\"\n\nYou must use the kernel module name override.\n\nRun ``man modprobe.d`` in the shell to find out more information on\nthe exact syntax you want to provide with :term:`module_conf`.\n\nIncluding :term:`module_conf` causes the OpenEmbedded build system to\npopulate the ``/etc/modprobe.d/modname.conf`` file with\n``modprobe.d`` syntax lines. Here is an example that adds the options\n``arg1`` and ``arg2`` to a module named ``mymodule``::\n\n   module_conf_mymodule = \"options mymodule arg1=val1 arg2=val2\"\n\nFor information on how to specify kernel modules to auto-load on\nboot, see the :term:`KERNEL_MODULE_AUTOLOAD` variable.\n\n" },
      { name:"MODULE_TARBALL_DEPLOY", content:"Controls creation of the ``modules-*.tgz`` file. Set this variable to\n\"0\" to disable creation of this file, which contains all of the\nkernel modules resulting from a kernel build.\n\n" },
      { name:"MODULE_TARBALL_LINK_NAME", content:"The link name of the kernel module tarball. This variable is set in\nthe ``meta/classes-recipe/kernel-artifact-names.bbclass`` file as follows::\n\n   MODULE_TARBALL_LINK_NAME ?= \"${KERNEL_ARTIFACT_LINK_NAME}\"\n\nThe value\nof the ``KERNEL_ARTIFACT_LINK_NAME`` variable, which is set in the\nsame file, has the following value::\n\n   KERNEL_ARTIFACT_LINK_NAME ?= \"${MACHINE}\"\n\nSee the :term:`MACHINE` variable for additional information.\n\n" },
      { name:"MODULE_TARBALL_NAME", content:"The base name of the kernel module tarball. This variable is set in\nthe ``meta/classes-recipe/kernel-artifact-names.bbclass`` file as follows::\n\n   MODULE_TARBALL_NAME ?= \"${KERNEL_ARTIFACT_NAME}\"\n\nSee :term:`KERNEL_ARTIFACT_NAME` for additional information.\n\n" },
      { name:"MOUNT_BASE", content:"On non-systemd systems (where ``udev-extraconf`` is being used),\nspecifies the base directory for auto-mounting filesystems. The\ndefault value is \"/run/media\".\n\n" },
      { name:"MULTIMACH_TARGET_SYS", content:"Uniquely identifies the type of the target system for which packages\nare being built. This variable allows output for different types of\ntarget systems to be put into different subdirectories of the same\noutput directory.\n\nThe default value of this variable is::\n\n   ${PACKAGE_ARCH}${TARGET_VENDOR}-${TARGET_OS}\n\nSome classes (e.g.  :ref:`ref-classes-cross-canadian`) modify the\n:term:`MULTIMACH_TARGET_SYS` value.\n\nSee the :term:`STAMP` variable for an example. See the\n:term:`STAGING_DIR_TARGET` variable for more information.\n\n" },
      { name:"NATIVELSBSTRING", content:"A string identifying the host distribution. Strings consist of the\nhost distributor ID followed by the release, as reported by the\n``lsb_release`` tool or as read from ``/etc/lsb-release``. For\nexample, when running a build on Ubuntu 12.10, the value is\n\"Ubuntu-12.10\". If this information is unable to be determined, the\nvalue resolves to \"Unknown\".\n\nThis variable is used by default to isolate native shared state\npackages for different distributions (e.g. to avoid problems with\n``glibc`` version incompatibilities). Additionally, the variable is\nchecked against\n:term:`SANITY_TESTED_DISTROS` if that\nvariable is set.\n\n" },
      { name:"NM", content:"The minimal command and arguments to run ``nm``.\n\n" },
      { name:"NO_GENERIC_LICENSE", content:"Avoids QA errors when you use a non-common, non-CLOSED license in a\nrecipe. There are packages, such as the linux-firmware package, with many\nlicenses that are not in any way common. Also, new licenses are added\noccasionally to avoid introducing a lot of common license files,\nwhich are only applicable to a specific package.\n:term:`NO_GENERIC_LICENSE` is used to allow copying a license that does\nnot exist in common licenses.\n\nThe following example shows how to add :term:`NO_GENERIC_LICENSE` to a\nrecipe::\n\n   NO_GENERIC_LICENSE[license_name] = \"license_file_in_fetched_source\"\n\nHere is an example that\nuses the ``LICENSE.Abilis.txt`` file as the license from the fetched\nsource::\n\n   NO_GENERIC_LICENSE[Firmware-Abilis] = \"LICENSE.Abilis.txt\"\n\n" },
      { name:"NO_RECOMMENDATIONS", content:"Prevents installation of all \"recommended-only\" packages.\nRecommended-only packages are packages installed only through the\n:term:`RRECOMMENDS` variable). Setting the\n:term:`NO_RECOMMENDATIONS` variable to \"1\" turns this feature on::\n\n   NO_RECOMMENDATIONS = \"1\"\n\nYou can set this variable globally in your ``local.conf`` file or you\ncan attach it to a specific image recipe by using the recipe name\noverride::\n\n   NO_RECOMMENDATIONS:pn-target_image = \"1\"\n\nIt is important to realize that if you choose to not install packages\nusing this variable and some other packages are dependent on them\n(i.e. listed in a recipe's :term:`RDEPENDS`\nvariable), the OpenEmbedded build system ignores your request and\nwill install the packages to avoid dependency errors.\n\n.. note::\n\n   Some recommended packages might be required for certain system\n   functionality, such as kernel modules. It is up to you to add\n   packages with the :term:`IMAGE_INSTALL` variable.\n\nThis variable is only supported when using the IPK and RPM\npackaging backends. DEB is not supported.\n\nSee the :term:`BAD_RECOMMENDATIONS` and\nthe :term:`PACKAGE_EXCLUDE` variables for\nrelated information.\n\n" },
      { name:"NOAUTOPACKAGEDEBUG", content:"Disables auto package from splitting ``.debug`` files. If a recipe\nrequires ``FILES:${PN}-dbg`` to be set manually, the\n:term:`NOAUTOPACKAGEDEBUG` can be defined allowing you to define the\ncontent of the debug package. For example::\n\n   NOAUTOPACKAGEDEBUG = \"1\"\n   FILES:${PN}-dev = \"${includedir}/${QT_DIR_NAME}/Qt/*\"\n   FILES:${PN}-dbg = \"/usr/src/debug/\"\n   FILES:${QT_BASE_NAME}-demos-doc = \"${docdir}/${QT_DIR_NAME}/qch/qt.qch\"\n\n" },
      { name:"NON_MULTILIB_RECIPES", content:"A list of recipes that should not be built for multilib. OE-Core's\n``multilib.conf`` file defines a reasonable starting point for this\nlist with::\n\n   NON_MULTILIB_RECIPES = \"grub grub-efi make-mod-scripts ovmf u-boot\"\n\n" },
      { name:"OBJCOPY", content:"The minimal command and arguments to run ``objcopy``.\n\n" },
      { name:"OBJDUMP", content:"The minimal command and arguments to run ``objdump``.\n\n" },
      { name:"OE_BINCONFIG_EXTRA_MANGLE", content:"When inheriting the :ref:`ref-classes-binconfig` class,\nthis variable specifies additional arguments passed to the \"sed\"\ncommand. The sed command alters any paths in configuration scripts\nthat have been set up during compilation. Inheriting this class\nresults in all paths in these scripts being changed to point into the\n``sysroots/`` directory so that all builds that use the script will\nuse the correct directories for the cross compiling layout.\n\nSee the ``meta/classes-recipe/binconfig.bbclass`` in the\n:term:`Source Directory` for details on how this class\napplies these additional sed command arguments.\n\n" },
      { name:"OECMAKE_GENERATOR", content:"A variable for the :ref:`ref-classes-cmake` class, allowing to choose\nwhich back-end will be generated by CMake to build an application.\n\nBy default, this variable is set to ``Ninja``, which is faster than GNU\nmake, but if building is broken with Ninja, a recipe can use this\nvariable to use GNU make instead::\n\n   OECMAKE_GENERATOR = \"Unix Makefiles\"\n\n" },
      { name:"OE_IMPORTS", content:"An internal variable used to tell the OpenEmbedded build system what\nPython modules to import for every Python function run by the system.\n\n.. note::\n\n   Do not set this variable. It is for internal use only.\n\n" },
      { name:"OE_INIT_ENV_SCRIPT", content:"The name of the build environment setup script for the purposes of\nsetting up the environment within the extensible SDK. The default\nvalue is \"oe-init-build-env\".\n\nIf you use a custom script to set up your build environment, set the\n:term:`OE_INIT_ENV_SCRIPT` variable to its name.\n\n" },
      { name:"OE_TERMINAL", content:"Controls how the OpenEmbedded build system spawns interactive\nterminals on the host development system (e.g. using the BitBake\ncommand with the ``-c devshell`` command-line option). For more\ninformation, see the \":ref:`dev-manual/development-shell:using a development shell`\" section in\nthe Yocto Project Development Tasks Manual.\n\nYou can use the following values for the :term:`OE_TERMINAL` variable:\n\n- auto\n- gnome\n- xfce\n- rxvt\n- screen\n- konsole\n- none\n\n" },
      { name:"OEROOT", content:"The directory from which the top-level build environment setup script\nis sourced. The Yocto Project provides a top-level build environment\nsetup script: :ref:`structure-core-script`. When you run this\nscript, the :term:`OEROOT` variable resolves to the directory that\ncontains the script.\n\nFor additional information on how this variable is used, see the\ninitialization script.\n\n" },
      { name:"OLDEST_KERNEL", content:"Declares the oldest version of the Linux kernel that the produced\nbinaries must support. This variable is passed into the build of the\nEmbedded GNU C Library (``glibc``).\n\nThe default for this variable comes from the\n``meta/conf/bitbake.conf`` configuration file. You can override this\ndefault by setting the variable in a custom distribution\nconfiguration file.\n\n" },
      { name:"OVERLAYFS_ETC_DEVICE", content:"When the :ref:`ref-classes-overlayfs-etc` class is\ninherited, specifies the device to be mounted for the read/write\nlayer of ``/etc``. There is no default, so you must set this if you\nwish to enable :ref:`ref-classes-overlayfs-etc`, for\nexample, assuming ``/dev/mmcblk0p2`` was the desired device::\n\n   OVERLAYFS_ETC_DEVICE = \"/dev/mmcblk0p2\"\n\n" },
      { name:"OVERLAYFS_ETC_EXPOSE_LOWER", content:"When the :ref:`ref-classes-overlayfs-etc` class is\ninherited, if set to \"1\" then a read-only access to the original\n``/etc`` content will be provided as a ``lower/`` subdirectory of\n:term:`OVERLAYFS_ETC_MOUNT_POINT`. The default value is \"0\".\n\n" },
      { name:"OVERLAYFS_ETC_FSTYPE", content:"When the :ref:`ref-classes-overlayfs-etc` class is\ninherited, specifies the file system type for the read/write\nlayer of ``/etc``. There is no default, so you must set this if you\nwish to enable :ref:`ref-classes-overlayfs-etc`,\nfor example, assuming the file system is ext4::\n\n   OVERLAYFS_ETC_FSTYPE = \"ext4\"\n\n" },
      { name:"OVERLAYFS_ETC_MOUNT_OPTIONS", content:"When the :ref:`ref-classes-overlayfs-etc` class is\ninherited, specifies the mount options for the read-write layer.\nThe default value is \"defaults\".\n\n" },
      { name:"OVERLAYFS_ETC_MOUNT_POINT", content:"When the :ref:`ref-classes-overlayfs-etc` class is\ninherited, specifies the parent mount path for the filesystem layers.\nThere is no default, so you must set this if you wish to enable\n:ref:`ref-classes-overlayfs-etc`, for example if the desired path is\n\"/data\"::\n\n   OVERLAYFS_ETC_MOUNT_POINT = \"/data\"\n\n" },
      { name:"OVERLAYFS_ETC_USE_ORIG_INIT_NAME", content:"When the :ref:`ref-classes-overlayfs-etc` class is inherited, controls\nhow the generated init will be named. For more information, see the\n:ref:`ref-classes-overlayfs-etc` class documentation. The default value\nis \"1\".\n\n" },
      { name:"OVERLAYFS_MOUNT_POINT", content:"When inheriting the :ref:`ref-classes-overlayfs` class,\nspecifies mount point(s) to be used. For example::\n\n   OVERLAYFS_MOUNT_POINT[data] = \"/data\"\n\nThe assumes you have a ``data.mount`` systemd unit defined elsewhere in\nyour BSP (e.g. in ``systemd-machine-units`` recipe) and it is installed\ninto the image. For more information see :ref:`ref-classes-overlayfs`.\n\n.. note::\n\n   Although the :ref:`ref-classes-overlayfs` class is\n   inherited by individual recipes, :term:`OVERLAYFS_MOUNT_POINT`\n   should be set in your machine configuration.\n\n" },
      { name:"OVERLAYFS_QA_SKIP", content:"When inheriting the :ref:`ref-classes-overlayfs` class,\nprovides the ability to disable QA checks for particular overlayfs\nmounts. For example::\n\n   OVERLAYFS_QA_SKIP[data] = \"mount-configured\"\n\n.. note::\n\n   Although the :ref:`ref-classes-overlayfs` class is\n   inherited by individual recipes, :term:`OVERLAYFS_QA_SKIP`\n   should be set in your machine configuration.\n\n" },
      { name:"OVERLAYFS_WRITABLE_PATHS", content:"When inheriting the :ref:`ref-classes-overlayfs` class,\nspecifies writable paths used at runtime for the recipe. For\nexample::\n\n   OVERLAYFS_WRITABLE_PATHS[data] = \"/usr/share/my-custom-application\"\n\n" },
      { name:"OVERRIDES", content:"A colon-separated list of overrides that currently apply. Overrides\nare a BitBake mechanism that allows variables to be selectively\noverridden at the end of parsing. The set of overrides in\n:term:`OVERRIDES` represents the \"state\" during building, which includes\nthe current recipe being built, the machine for which it is being\nbuilt, and so forth.\n\nAs an example, if the string \"an-override\" appears as an element in\nthe colon-separated list in :term:`OVERRIDES`, then the following\nassignment will override ``FOO`` with the value \"overridden\" at the\nend of parsing::\n\n   FOO:an-override = \"overridden\"\n\nSee the\n\":ref:`bitbake-user-manual/bitbake-user-manual-metadata:conditional syntax (overrides)`\"\nsection in the BitBake User Manual for more information on the\noverrides mechanism.\n\nThe default value of :term:`OVERRIDES` includes the values of the\n:term:`CLASSOVERRIDE`,\n:term:`MACHINEOVERRIDES`, and\n:term:`DISTROOVERRIDES` variables. Another\nimportant override included by default is ``pn-${PN}``. This override\nallows variables to be set for a single recipe within configuration\n(``.conf``) files. Here is an example::\n\n   FOO:pn-myrecipe = \"myrecipe-specific value\"\n\n.. note::\n\n   An easy way to see what overrides apply is to search for :term:`OVERRIDES`\n   in the output of the ``bitbake -e`` command. See the\n   \":ref:`dev-manual/debugging:viewing variable values`\" section in the Yocto\n   Project Development Tasks Manual for more information.\n\n" },
      { name:"P", content:"The recipe name and version. :term:`P` is comprised of the following::\n\n   ${PN}-${PV}\n\n" },
      { name:"P4DIR", content:"See :term:`bitbake:P4DIR` in the BitBake manual.\n\n" },
      { name:"PACKAGE_ADD_METADATA", content:"This variable defines additional metadata to add to packages.\n\nYou may find you need to inject additional metadata into packages.\nThis variable allows you to do that by setting the injected data as\nthe value. Multiple fields can be added by splitting the content with\nthe literal separator \"\\n\".\n\nThe suffixes '_IPK', '_DEB', or '_RPM' can be applied to the variable\nto do package type specific settings. It can also be made package\nspecific by using the package name as a suffix.\n\nYou can find out more about applying this variable in the\n\":ref:`dev-manual/packages:adding custom metadata to packages`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"PACKAGE_ARCH", content:"The architecture of the resulting package or packages.\n\nBy default, the value of this variable is set to\n:term:`TUNE_PKGARCH` when building for the\ntarget, :term:`BUILD_ARCH` when building for the\nbuild host, and \"${SDK_ARCH}-${SDKPKGSUFFIX}\" when building for the\nSDK.\n\n.. note::\n\n   See :term:`SDK_ARCH` for more information.\n\nHowever, if your recipe's output packages are built specific to the\ntarget machine rather than generally for the architecture of the\nmachine, you should set :term:`PACKAGE_ARCH` to the value of\n:term:`MACHINE_ARCH` in the recipe as follows::\n\n   PACKAGE_ARCH = \"${MACHINE_ARCH}\"\n\n" },
      { name:"PACKAGE_ARCHS", content:"Specifies a list of architectures compatible with the target machine.\nThis variable is set automatically and should not normally be\nhand-edited. Entries are separated using spaces and listed in order\nof priority. The default value for :term:`PACKAGE_ARCHS` is \"all any\nnoarch ${PACKAGE_EXTRA_ARCHS} ${MACHINE_ARCH}\".\n\n" },
      { name:"PACKAGE_BEFORE_PN", content:"Enables easily adding packages to :term:`PACKAGES` before ``${PN}`` so\nthat those added packages can pick up files that would normally be\nincluded in the default package.\n\n" },
      { name:"PACKAGE_CLASSES", content:"This variable, which is set in the ``local.conf`` configuration file\nfound in the ``conf`` folder of the\n:term:`Build Directory`, specifies the package manager the\nOpenEmbedded build system uses when packaging data.\n\nYou can provide one or more of the following arguments for the\nvariable::\n\n   PACKAGE_CLASSES ?= \"package_rpm package_deb package_ipk\"\n\nThe build system uses only the first argument in the list as the\npackage manager when creating your image or SDK. However, packages\nwill be created using any additional packaging classes you specify.\nFor example, if you use the following in your ``local.conf`` file::\n\n   PACKAGE_CLASSES ?= \"package_ipk\"\n\nThe OpenEmbedded build system uses\nthe IPK package manager to create your image or SDK.\n\nFor information on packaging and build performance effects as a\nresult of the package manager in use, see the\n\":ref:`ref-classes-package`\" section.\n\n" },
      { name:"PACKAGE_DEBUG_SPLIT_STYLE", content:"Determines how to split up and package debug and source information\nwhen creating debugging packages to be used with the GNU Project\nDebugger (GDB). In general, based on the value of this variable,\nyou can combine the source and debug info in a single package,\nyou can break out the source into a separate package that can be\ninstalled independently, or you can choose to not have the source\npackaged at all.\n\nThe possible values of :term:`PACKAGE_DEBUG_SPLIT_STYLE` variable:\n\n-  \"``.debug``\": All debugging and source info is placed in a single\n   ``*-dbg`` package; debug symbol files are placed next to the\n   binary in a ``.debug`` directory so that, if a binary is installed\n   into ``/bin``, the corresponding debug symbol file is installed\n   in ``/bin/.debug``. Source files are installed in the same ``*-dbg``\n   package under ``/usr/src/debug``.\n\n-  \"``debug-file-directory``\": As above, all debugging and source info\n   is placed in a single ``*-dbg`` package; debug symbol files are\n   placed entirely under the directory ``/usr/lib/debug`` and separated\n   by the path from where the binary is installed, so that if a binary\n   is installed in ``/bin``, the corresponding debug symbols are installed\n   in ``/usr/lib/debug/bin``, and so on. As above, source is installed\n   in the same package under ``/usr/src/debug``.\n\n-  \"``debug-with-srcpkg``\": Debugging info is placed in the standard\n   ``*-dbg`` package as with the ``.debug`` value, while source is\n   placed in a separate ``*-src`` package, which can be installed\n   independently.  This is the default setting for this variable,\n   as defined in Poky's ``bitbake.conf`` file.\n\n-  \"``debug-without-src``\": The same behavior as with the ``.debug``\n   setting, but no source is packaged at all.\n\n.. note::\n\n   Much of the above package splitting can be overridden via\n   use of the :term:`INHIBIT_PACKAGE_DEBUG_SPLIT` variable.\n\nYou can find out more about debugging using GDB by reading the\n\":ref:`dev-manual/debugging:debugging with the gnu project debugger (gdb) remotely`\" section\nin the Yocto Project Development Tasks Manual.\n\n" },
      { name:"PACKAGE_EXCLUDE", content:"Lists packages that should not be installed into an image. For\nexample::\n\n   PACKAGE_EXCLUDE = \"package_name package_name package_name ...\"\n\nYou can set this variable globally in your ``local.conf`` file or you\ncan attach it to a specific image recipe by using the recipe name\noverride::\n\n   PACKAGE_EXCLUDE:pn-target_image = \"package_name\"\n\nIf you choose to not install a package using this variable and some\nother package is dependent on it (i.e. listed in a recipe's\n:term:`RDEPENDS` variable), the OpenEmbedded build\nsystem generates a fatal installation error. Because the build system\nhalts the process with a fatal error, you can use the variable with\nan iterative development process to remove specific components from a\nsystem.\n\nThis variable is supported only when using the IPK and RPM\npackaging backends. DEB is not supported.\n\nSee the :term:`NO_RECOMMENDATIONS` and the\n:term:`BAD_RECOMMENDATIONS` variables for\nrelated information.\n\n" },
      { name:"PACKAGE_EXCLUDE_COMPLEMENTARY", content:"Prevents specific packages from being installed when you are\ninstalling complementary packages.\n\nYou might find that you want to prevent installing certain packages\nwhen you are installing complementary packages. For example, if you\nare using :term:`IMAGE_FEATURES` to install\n``dev-pkgs``, you might not want to install all packages from a\nparticular multilib. If you find yourself in this situation, you can\nuse the :term:`PACKAGE_EXCLUDE_COMPLEMENTARY` variable to specify regular\nexpressions to match the packages you want to exclude.\n\n" },
      { name:"PACKAGE_EXTRA_ARCHS", content:"Specifies the list of architectures compatible with the device CPU.\nThis variable is useful when you build for several different devices\nthat use miscellaneous processors such as XScale and ARM926-EJS.\n\n" },
      { name:"PACKAGE_FEED_ARCHS", content:"Optionally specifies the package architectures used as part of the\npackage feed URIs during the build. When used, the\n:term:`PACKAGE_FEED_ARCHS` variable is appended to the final package feed\nURI, which is constructed using the\n:term:`PACKAGE_FEED_URIS` and\n:term:`PACKAGE_FEED_BASE_PATHS`\nvariables.\n\n.. note::\n\n   You can use the :term:`PACKAGE_FEED_ARCHS`\n   variable to allow specific package architectures. If you do\n   not need to allow specific architectures, which is a common\n   case, you can omit this variable. Omitting the variable results in\n   all available architectures for the current machine being included\n   into remote package feeds.\n\nConsider the following example where the :term:`PACKAGE_FEED_URIS`,\n:term:`PACKAGE_FEED_BASE_PATHS`, and :term:`PACKAGE_FEED_ARCHS` variables are\ndefined in your ``local.conf`` file::\n\n   PACKAGE_FEED_URIS = \"https://example.com/packagerepos/release \\\n                        https://example.com/packagerepos/updates\"\n   PACKAGE_FEED_BASE_PATHS = \"rpm rpm-dev\"\n   PACKAGE_FEED_ARCHS = \"all core2-64\"\n\nGiven these settings, the resulting package feeds are as follows:\n\n.. code-block:: none\n\n   https://example.com/packagerepos/release/rpm/all\n   https://example.com/packagerepos/release/rpm/core2-64\n   https://example.com/packagerepos/release/rpm-dev/all\n   https://example.com/packagerepos/release/rpm-dev/core2-64\n   https://example.com/packagerepos/updates/rpm/all\n   https://example.com/packagerepos/updates/rpm/core2-64\n   https://example.com/packagerepos/updates/rpm-dev/all\n   https://example.com/packagerepos/updates/rpm-dev/core2-64\n\n" },
      { name:"PACKAGE_FEED_BASE_PATHS", content:"Specifies the base path used when constructing package feed URIs. The\n:term:`PACKAGE_FEED_BASE_PATHS` variable makes up the middle portion of a\npackage feed URI used by the OpenEmbedded build system. The base path\nlies between the :term:`PACKAGE_FEED_URIS`\nand :term:`PACKAGE_FEED_ARCHS` variables.\n\nConsider the following example where the :term:`PACKAGE_FEED_URIS`,\n:term:`PACKAGE_FEED_BASE_PATHS`, and :term:`PACKAGE_FEED_ARCHS` variables are\ndefined in your ``local.conf`` file::\n\n   PACKAGE_FEED_URIS = \"https://example.com/packagerepos/release \\\n                        https://example.com/packagerepos/updates\"\n   PACKAGE_FEED_BASE_PATHS = \"rpm rpm-dev\"\n   PACKAGE_FEED_ARCHS = \"all core2-64\"\n\nGiven these settings, the resulting package feeds are as follows:\n\n.. code-block:: none\n\n   https://example.com/packagerepos/release/rpm/all\n   https://example.com/packagerepos/release/rpm/core2-64\n   https://example.com/packagerepos/release/rpm-dev/all\n   https://example.com/packagerepos/release/rpm-dev/core2-64\n   https://example.com/packagerepos/updates/rpm/all\n   https://example.com/packagerepos/updates/rpm/core2-64\n   https://example.com/packagerepos/updates/rpm-dev/all\n   https://example.com/packagerepos/updates/rpm-dev/core2-64\n\n" },
      { name:"PACKAGE_FEED_URIS", content:"Specifies the front portion of the package feed URI used by the\nOpenEmbedded build system. Each final package feed URI is comprised\nof :term:`PACKAGE_FEED_URIS`,\n:term:`PACKAGE_FEED_BASE_PATHS`, and\n:term:`PACKAGE_FEED_ARCHS` variables.\n\nConsider the following example where the :term:`PACKAGE_FEED_URIS`,\n:term:`PACKAGE_FEED_BASE_PATHS`, and :term:`PACKAGE_FEED_ARCHS` variables are\ndefined in your ``local.conf`` file::\n\n   PACKAGE_FEED_URIS = \"https://example.com/packagerepos/release \\\n                        https://example.com/packagerepos/updates\"\n   PACKAGE_FEED_BASE_PATHS = \"rpm rpm-dev\"\n   PACKAGE_FEED_ARCHS = \"all core2-64\"\n\nGiven these settings, the resulting package feeds are as follows:\n\n.. code-block:: none\n\n   https://example.com/packagerepos/release/rpm/all\n   https://example.com/packagerepos/release/rpm/core2-64\n   https://example.com/packagerepos/release/rpm-dev/all\n   https://example.com/packagerepos/release/rpm-dev/core2-64\n   https://example.com/packagerepos/updates/rpm/all\n   https://example.com/packagerepos/updates/rpm/core2-64\n   https://example.com/packagerepos/updates/rpm-dev/all\n   https://example.com/packagerepos/updates/rpm-dev/core2-64\n\n" },
      { name:"PACKAGE_INSTALL", content:"The final list of packages passed to the package manager for\ninstallation into the image.\n\nBecause the package manager controls actual installation of all\npackages, the list of packages passed using :term:`PACKAGE_INSTALL` is\nnot the final list of packages that are actually installed. This\nvariable is internal to the image construction code. Consequently, in\ngeneral, you should use the\n:term:`IMAGE_INSTALL` variable to specify\npackages for installation. The exception to this is when working with\nthe :ref:`core-image-minimal-initramfs <ref-manual/images:images>`\nimage. When working with an initial RAM filesystem (:term:`Initramfs`) image,\nuse the :term:`PACKAGE_INSTALL` variable. For information on creating an\n:term:`Initramfs`, see the \":ref:`dev-manual/building:building an initial ram filesystem (Initramfs) image`\" section\nin the Yocto Project Development Tasks Manual.\n\n" },
      { name:"PACKAGE_INSTALL_ATTEMPTONLY", content:"Specifies a list of packages the OpenEmbedded build system attempts\nto install when creating an image. If a listed package fails to\ninstall, the build system does not generate an error. This variable\nis generally not user-defined.\n\n" },
      { name:"PACKAGE_PREPROCESS_FUNCS", content:"Specifies a list of functions run to pre-process the\n:term:`PKGD` directory prior to splitting the files out\nto individual packages.\n\n" },
      { name:"PACKAGE_WRITE_DEPS", content:"Specifies a list of dependencies for post-installation and\npre-installation scripts on native/cross tools. If your\npost-installation or pre-installation script can execute at root filesystem\ncreation time rather than on the target but depends on a native tool\nin order to execute, you need to list the tools in\n:term:`PACKAGE_WRITE_DEPS`.\n\nFor information on running post-installation scripts, see the\n\":ref:`dev-manual/new-recipe:post-installation scripts`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"PACKAGECONFIG", content:"This variable provides a means of enabling or disabling features of a\nrecipe on a per-recipe basis. :term:`PACKAGECONFIG` blocks are defined in\nrecipes when you specify features and then arguments that define\nfeature behaviors. Here is the basic block structure (broken over\nmultiple lines for readability)::\n\n   PACKAGECONFIG ??= \"f1 f2 f3 ...\"\n   PACKAGECONFIG[f1] = \"\\\n       --with-f1, \\\n       --without-f1, \\\n       build-deps-for-f1, \\\n       runtime-deps-for-f1, \\\n       runtime-recommends-for-f1, \\\n       packageconfig-conflicts-for-f1\"\n   PACKAGECONFIG[f2] = \"\\\n        ... and so on and so on ...\n\nThe :term:`PACKAGECONFIG` variable itself specifies a space-separated\nlist of the features to enable. Following the features, you can\ndetermine the behavior of each feature by providing up to six\norder-dependent arguments, which are separated by commas. You can\nomit any argument you like but must retain the separating commas. The\norder is important and specifies the following:\n\n#. Extra arguments that should be added to the configure script\n   argument list (:term:`EXTRA_OECONF` or\n   :term:`PACKAGECONFIG_CONFARGS`) if\n   the feature is enabled.\n\n#. Extra arguments that should be added to :term:`EXTRA_OECONF` or\n   :term:`PACKAGECONFIG_CONFARGS` if the feature is disabled.\n\n#. Additional build dependencies (:term:`DEPENDS`)\n   that should be added if the feature is enabled.\n\n#. Additional runtime dependencies (:term:`RDEPENDS`)\n   that should be added if the feature is enabled.\n\n#. Additional runtime recommendations\n   (:term:`RRECOMMENDS`) that should be added if\n   the feature is enabled.\n\n#. Any conflicting (that is, mutually exclusive) :term:`PACKAGECONFIG`\n   settings for this feature.\n\nConsider the following :term:`PACKAGECONFIG` block taken from the\n``librsvg`` recipe. In this example the feature is ``gtk``, which has\nthree arguments that determine the feature's behavior::\n\n   PACKAGECONFIG[gtk] = \"--with-gtk3,--without-gtk3,gtk+3\"\n\nThe\n``--with-gtk3`` and ``gtk+3`` arguments apply only if the feature is\nenabled. In this case, ``--with-gtk3`` is added to the configure\nscript argument list and ``gtk+3`` is added to :term:`DEPENDS`. On the\nother hand, if the feature is disabled say through a ``.bbappend``\nfile in another layer, then the second argument ``--without-gtk3`` is\nadded to the configure script instead.\n\nThe basic :term:`PACKAGECONFIG` structure previously described holds true\nregardless of whether you are creating a block or changing a block.\nWhen creating a block, use the structure inside your recipe.\n\nIf you want to change an existing :term:`PACKAGECONFIG` block, you can do\nso one of two ways:\n\n-  *Append file:* Create an append file named\n   ``recipename.bbappend`` in your layer and override the value of\n   :term:`PACKAGECONFIG`. You can either completely override the\n   variable::\n\n      PACKAGECONFIG = \"f4 f5\"\n\n   Or, you can just append the variable::\n\n      PACKAGECONFIG:append = \" f4\"\n\n-  *Configuration file:* This method is identical to changing the\n   block through an append file except you edit your ``local.conf``\n   or ``mydistro.conf`` file. As with append files previously\n   described, you can either completely override the variable::\n\n      PACKAGECONFIG:pn-recipename = \"f4 f5\"\n\n   Or, you can just amend the variable::\n\n      PACKAGECONFIG:append:pn-recipename = \" f4\"\n\n" },
      { name:"PACKAGECONFIG_CONFARGS", content:"A space-separated list of configuration options generated from the\n:term:`PACKAGECONFIG` setting.\n\nClasses such as :ref:`ref-classes-autotools` and :ref:`ref-classes-cmake`\nuse :term:`PACKAGECONFIG_CONFARGS` to pass :term:`PACKAGECONFIG` options\nto ``configure`` and ``cmake``, respectively. If you are using\n:term:`PACKAGECONFIG` but not a class that handles the\n:ref:`ref-tasks-configure` task, then you need to use\n:term:`PACKAGECONFIG_CONFARGS` appropriately.\n\n" },
      { name:"PACKAGEGROUP_DISABLE_COMPLEMENTARY", content:"For recipes inheriting the :ref:`ref-classes-packagegroup` class, setting\n:term:`PACKAGEGROUP_DISABLE_COMPLEMENTARY` to \"1\" specifies that the\nnormal complementary packages (i.e. ``-dev``, ``-dbg``, and so forth)\nshould not be automatically created by the ``packagegroup`` recipe,\nwhich is the default behavior.\n\n" },
      { name:"PACKAGES", content:"The list of packages the recipe creates. The default value is the\nfollowing::\n\n   ${PN}-src ${PN}-dbg ${PN}-staticdev ${PN}-dev ${PN}-doc ${PN}-locale ${PACKAGE_BEFORE_PN} ${PN}\n\nDuring packaging, the :ref:`ref-tasks-package` task\ngoes through :term:`PACKAGES` and uses the :term:`FILES`\nvariable corresponding to each package to assign files to the\npackage. If a file matches the :term:`FILES` variable for more than one\npackage in :term:`PACKAGES`, it will be assigned to the earliest\n(leftmost) package.\n\nPackages in the variable's list that are empty (i.e. where none of\nthe patterns in ``FILES:``\\ pkg match any files installed by the\n:ref:`ref-tasks-install` task) are not generated,\nunless generation is forced through the\n:term:`ALLOW_EMPTY` variable.\n\n" },
      { name:"PACKAGES_DYNAMIC", content:"A promise that your recipe satisfies runtime dependencies for\noptional modules that are found in other recipes.\n:term:`PACKAGES_DYNAMIC` does not actually satisfy the dependencies, it\nonly states that they should be satisfied. For example, if a hard,\nruntime dependency (:term:`RDEPENDS`) of another\npackage is satisfied at build time through the :term:`PACKAGES_DYNAMIC`\nvariable, but a package with the module name is never actually\nproduced, then the other package will be broken. Thus, if you attempt\nto include that package in an image, you will get a dependency\nfailure from the packaging system during the\n:ref:`ref-tasks-rootfs` task.\n\nTypically, if there is a chance that such a situation can occur and\nthe package that is not created is valid without the dependency being\nsatisfied, then you should use :term:`RRECOMMENDS`\n(a soft runtime dependency) instead of :term:`RDEPENDS`.\n\nFor an example of how to use the :term:`PACKAGES_DYNAMIC` variable when\nyou are splitting packages, see the\n\":ref:`dev-manual/packages:handling optional module packaging`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"PACKAGESPLITFUNCS", content:"Specifies a list of functions run to perform additional splitting of\nfiles into individual packages. Recipes can either prepend to this\nvariable or prepend to the ``populate_packages`` function in order to\nperform additional package splitting. In either case, the function\nshould set :term:`PACKAGES`,\n:term:`FILES`, :term:`RDEPENDS` and\nother packaging variables appropriately in order to perform the\ndesired splitting.\n\n" },
      { name:"PARALLEL_MAKE", content:"\nExtra options passed to the build tool command (``make``,\n``ninja`` or more specific build engines, like the Go language one)\nduring the :ref:`ref-tasks-compile` task, to specify parallel compilation\non the local build host. This variable is usually in the form \"-j x\",\nwhere x represents the maximum number of parallel threads such engines\ncan run.\n\n.. note::\n\n   For software compiled by ``make``, in order for :term:`PARALLEL_MAKE`\n   to be effective, ``make`` must be called with\n   ``${``\\ :term:`EXTRA_OEMAKE`\\ ``}``. An easy\n   way to ensure this is to use the ``oe_runmake`` function.\n\nBy default, the OpenEmbedded build system automatically sets this\nvariable to be equal to the number of cores the build system uses.\n\n.. note::\n\n   If the software being built experiences dependency issues during\n   the :ref:`ref-tasks-compile` task that result in race conditions, you can clear\n   the :term:`PARALLEL_MAKE` variable within the recipe as a workaround. For\n   information on addressing race conditions, see the\n   \":ref:`dev-manual/debugging:debugging parallel make races`\"\n   section in the Yocto Project Development Tasks Manual.\n\nFor single socket systems (i.e. one CPU), you should not have to\noverride this variable to gain optimal parallelism during builds.\nHowever, if you have very large systems that employ multiple physical\nCPUs, you might want to make sure the :term:`PARALLEL_MAKE` variable is\nnot set higher than \"-j 20\".\n\nFor more information on speeding up builds, see the\n\":ref:`dev-manual/speeding-up-build:speeding up a build`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"PARALLEL_MAKEINST", content:"Extra options passed to the build tool install command\n(``make install``, ``ninja install`` or more specific ones)\nduring the :ref:`ref-tasks-install` task in order to specify\nparallel installation. This variable defaults to the value of\n:term:`PARALLEL_MAKE`.\n\n.. note::\n\n   For software compiled by ``make``, in order for :term:`PARALLEL_MAKEINST`\n   to be effective, ``make`` must be called with\n   ``${``\\ :term:`EXTRA_OEMAKE`\\ ``}``. An easy\n   way to ensure this is to use the ``oe_runmake`` function.\n\n   If the software being built experiences dependency issues during\n   the :ref:`ref-tasks-install` task that result in race conditions, you can\n   clear the :term:`PARALLEL_MAKEINST` variable within the recipe as a\n   workaround. For information on addressing race conditions, see the\n   \":ref:`dev-manual/debugging:debugging parallel make races`\"\n   section in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"PATCHRESOLVE", content:"Determines the action to take when a patch fails. You can set this\nvariable to one of two values: \"noop\" and \"user\".\n\nThe default value of \"noop\" causes the build to simply fail when the\nOpenEmbedded build system cannot successfully apply a patch. Setting\nthe value to \"user\" causes the build system to launch a shell and\nplaces you in the right location so that you can manually resolve the\nconflicts.\n\nSet this variable in your ``local.conf`` file.\n\n" },
      { name:"PATCHTOOL", content:"Specifies the utility used to apply patches for a recipe during the\n:ref:`ref-tasks-patch` task. You can specify one of\nthree utilities: \"patch\", \"quilt\", or \"git\". The default utility used\nis \"quilt\" except for the quilt-native recipe itself. Because the\nquilt tool is not available at the time quilt-native is being\npatched, it uses \"patch\".\n\nIf you wish to use an alternative patching tool, set the variable in\nthe recipe using one of the following::\n\n   PATCHTOOL = \"patch\"\n   PATCHTOOL = \"quilt\"\n   PATCHTOOL = \"git\"\n\n" },
      { name:"PE", content:"The epoch of the recipe. By default, this variable is unset. The\nvariable is used to make upgrades possible when the versioning scheme\nchanges in some backwards incompatible way.\n\n:term:`PE` is the default value of the :term:`PKGE` variable.\n\n" },
      { name:"PEP517_WHEEL_PATH", content:"When used by recipes that inherit the :ref:`ref-classes-python_pep517`\nclass, denotes the path to ``dist/`` (short for distribution) where the\nbinary archive ``wheel`` is built.\n\n" },
      { name:"PERSISTENT_DIR", content:"See :term:`bitbake:PERSISTENT_DIR` in the BitBake manual.\n\n" },
      { name:"PF", content:"Specifies the recipe or package name and includes all version and\nrevision numbers (i.e. ``glibc-2.13-r20+svnr15508/`` and\n``bash-4.2-r1/``). This variable is comprised of the following:\n${:term:`PN`}-${:term:`EXTENDPE`}${:term:`PV`}-${:term:`PR`}\n\n" },
      { name:"PIXBUF_PACKAGES", content:"When inheriting the :ref:`ref-classes-pixbufcache`\nclass, this variable identifies packages that contain the pixbuf\nloaders used with ``gdk-pixbuf``. By default, the\n:ref:`ref-classes-pixbufcache` class assumes that\nthe loaders are in the recipe's main package (i.e.\n``${``\\ :term:`PN`\\ ``}``). Use this variable if the\nloaders you need are in a package other than that main package.\n\n" },
      { name:"PKG", content:"The name of the resulting package created by the OpenEmbedded build\nsystem.\n\n.. note::\n\n   When using the :term:`PKG` variable, you must use a package name override.\n\nFor example, when the :ref:`ref-classes-debian` class renames the output\npackage, it does so by setting ``PKG:packagename``.\n\n" },
      { name:"PKG_CONFIG_PATH", content:"The path to ``pkg-config`` files for the current build context.\n``pkg-config`` reads this variable from the environment.\n\n" },
      { name:"PKGD", content:"Points to the destination directory for files to be packaged before\nthey are split into individual packages. This directory defaults to\nthe following::\n\n   ${WORKDIR}/package\n\nDo not change this default.\n\n" },
      { name:"PKGDATA_DIR", content:"Points to a shared, global-state directory that holds data generated\nduring the packaging process. During the packaging process, the\n:ref:`ref-tasks-packagedata` task packages data\nfor each recipe and installs it into this temporary, shared area.\nThis directory defaults to the following, which you should not\nchange::\n\n   ${STAGING_DIR_HOST}/pkgdata\n\nFor examples of how this data is used, see the\n\":ref:`overview-manual/concepts:automatically added runtime dependencies`\"\nsection in the Yocto Project Overview and Concepts Manual and the\n\":ref:`dev-manual/debugging:viewing package information with \\`\\`oe-pkgdata-util\\`\\``\"\nsection in the Yocto Project Development Tasks Manual. For more\ninformation on the shared, global-state directory, see\n:term:`STAGING_DIR_HOST`.\n\n" },
      { name:"PKGDEST", content:"Points to the parent directory for files to be packaged after they\nhave been split into individual packages. This directory defaults to\nthe following::\n\n   ${WORKDIR}/packages-split\n\nUnder this directory, the build system creates directories for each\npackage specified in :term:`PACKAGES`. Do not change\nthis default.\n\n" },
      { name:"PKGDESTWORK", content:"Points to a temporary work area where the\n:ref:`ref-tasks-package` task saves package metadata.\nThe :term:`PKGDESTWORK` location defaults to the following::\n\n   ${WORKDIR}/pkgdata\n\nDo not change this default.\n\nThe :ref:`ref-tasks-packagedata` task copies the\npackage metadata from :term:`PKGDESTWORK` to\n:term:`PKGDATA_DIR` to make it available globally.\n\n" },
      { name:"PKGE", content:"The epoch of the package(s) built by the recipe. By default, :term:`PKGE`\nis set to :term:`PE`.\n\n" },
      { name:"PKGR", content:"The revision of the package(s) built by the recipe. By default,\n:term:`PKGR` is set to :term:`PR`.\n\n" },
      { name:"PKGV", content:"The version of the package(s) built by the recipe. By default,\n:term:`PKGV` is set to :term:`PV`.\n\n" },
      { name:"PN", content:"This variable can have two separate functions depending on the\ncontext: a recipe name or a resulting package name.\n\n:term:`PN` refers to a recipe name in the context of a file used by the\nOpenEmbedded build system as input to create a package. The name is\nnormally extracted from the recipe file name. For example, if the\nrecipe is named ``expat_2.0.1.bb``, then the default value of :term:`PN`\nwill be \"expat\".\n\nThe variable refers to a package name in the context of a file\ncreated or produced by the OpenEmbedded build system.\n\nIf applicable, the :term:`PN` variable also contains any special suffix\nor prefix. For example, using ``bash`` to build packages for the\nnative machine, :term:`PN` is ``bash-native``. Using ``bash`` to build\npackages for the target and for Multilib, :term:`PN` would be ``bash``\nand ``lib64-bash``, respectively.\n\n" },
      { name:"POPULATE_SDK_POST_HOST_COMMAND", content:"Specifies a list of functions to call once the OpenEmbedded build\nsystem has created the host part of the SDK. You can specify\nfunctions separated by semicolons::\n\n    POPULATE_SDK_POST_HOST_COMMAND += \"function; ... \"\n\nIf you need to pass the SDK path to a command within a function, you\ncan use ``${SDK_DIR}``, which points to the parent directory used by\nthe OpenEmbedded build system when creating SDK output. See the\n:term:`SDK_DIR` variable for more information.\n\n" },
      { name:"POPULATE_SDK_POST_TARGET_COMMAND", content:"Specifies a list of functions to call once the OpenEmbedded build\nsystem has created the target part of the SDK. You can specify\nfunctions separated by semicolons::\n\n   POPULATE_SDK_POST_TARGET_COMMAND += \"function; ... \"\n\nIf you need to pass the SDK path to a command within a function, you\ncan use ``${SDK_DIR}``, which points to the parent directory used by\nthe OpenEmbedded build system when creating SDK output. See the\n:term:`SDK_DIR` variable for more information.\n\n" },
      { name:"PR", content:"The revision of the recipe. The default value for this variable is\n\"r0\". Subsequent revisions of the recipe conventionally have the\nvalues \"r1\", \"r2\", and so forth. When :term:`PV` increases,\n:term:`PR` is conventionally reset to \"r0\".\n\n.. note::\n\n   The OpenEmbedded build system does not need the aid of :term:`PR`\n   to know when to rebuild a recipe. The build system uses the task\n   :ref:`input checksums <overview-manual/concepts:checksums (signatures)>` along with the\n   :ref:`stamp <structure-build-tmp-stamps>` and\n   :ref:`overview-manual/concepts:shared state cache`\n   mechanisms.\n\nThe :term:`PR` variable primarily becomes significant when a package\nmanager dynamically installs packages on an already built image. In\nthis case, :term:`PR`, which is the default value of\n:term:`PKGR`, helps the package manager distinguish which\npackage is the most recent one in cases where many packages have the\nsame :term:`PV` (i.e. :term:`PKGV`). A component having many packages with\nthe same :term:`PV` usually means that the packages all install the same\nupstream version, but with later (:term:`PR`) version packages including\npackaging fixes.\n\n.. note::\n\n   :term:`PR` does not need to be increased for changes that do not change the\n   package contents or metadata.\n\nBecause manually managing :term:`PR` can be cumbersome and error-prone,\nan automated solution exists. See the\n\":ref:`dev-manual/packages:working with a pr service`\" section\nin the Yocto Project Development Tasks Manual for more information.\n\n" },
      { name:"PREFERRED_PROVIDER", content:"If multiple recipes provide the same item, this variable determines\nwhich recipe is preferred and thus provides the item (i.e. the\npreferred provider). You should always suffix this variable with the\nname of the provided item. And, you should define the variable using\nthe preferred recipe's name (:term:`PN`). Here is a common\nexample::\n\n   PREFERRED_PROVIDER_virtual/kernel ?= \"linux-yocto\"\n\nIn the previous example, multiple recipes are providing \"virtual/kernel\".\nThe :term:`PREFERRED_PROVIDER` variable is set with the name (:term:`PN`) of\nthe recipe you prefer to provide \"virtual/kernel\".\n\nFollowing are more examples::\n\n   PREFERRED_PROVIDER_virtual/xserver = \"xserver-xf86\"\n   PREFERRED_PROVIDER_virtual/libgl ?= \"mesa\"\n\nFor more\ninformation, see the \":ref:`dev-manual/new-recipe:using virtual providers`\"\nsection in the Yocto Project Development Tasks Manual.\n\n.. note::\n\n   If you use a ``virtual/\\*`` item with :term:`PREFERRED_PROVIDER`, then any\n   recipe that :term:`PROVIDES` that item but is not selected (defined)\n   by :term:`PREFERRED_PROVIDER` is prevented from building, which is usually\n   desirable since this mechanism is designed to select between mutually\n   exclusive alternative providers.\n\n" },
      { name:"PREFERRED_PROVIDERS", content:"See :term:`bitbake:PREFERRED_PROVIDERS` in the BitBake manual.\n\n" },
      { name:"PREFERRED_VERSION", content:"If there are multiple versions of a recipe available, this variable\ndetermines which version should be given preference. You must always\nsuffix the variable with the :term:`PN` you want to select (`python` in\nthe first example below), and you should specify the :term:`PV`\naccordingly (`3.4.0` in the example).\n\nThe :term:`PREFERRED_VERSION` variable supports limited wildcard use\nthrough the \"``%``\" character. You can use the character to match any\nnumber of characters, which can be useful when specifying versions\nthat contain long revision numbers that potentially change. Here are\ntwo examples::\n\n   PREFERRED_VERSION_python = \"3.4.0\"\n   PREFERRED_VERSION_linux-yocto = \"5.0%\"\n\n.. note::\n\n   The use of the \"%\" character is limited in that it only works at the end of the\n   string. You cannot use the wildcard character in any other\n   location of the string.\n\nThe specified version is matched against :term:`PV`, which\ndoes not necessarily match the version part of the recipe's filename.\nFor example, consider two recipes ``foo_1.2.bb`` and ``foo_git.bb``\nwhere ``foo_git.bb`` contains the following assignment::\n\n   PV = \"1.1+git${SRCPV}\"\n\nIn this case, the correct way to select\n``foo_git.bb`` is by using an assignment such as the following::\n\n   PREFERRED_VERSION_foo = \"1.1+git%\"\n\nCompare that previous example\nagainst the following incorrect example, which does not work::\n\n   PREFERRED_VERSION_foo = \"git\"\n\nSometimes the :term:`PREFERRED_VERSION` variable can be set by\nconfiguration files in a way that is hard to change. You can use\n:term:`OVERRIDES` to set a machine-specific\noverride. Here is an example::\n\n   PREFERRED_VERSION_linux-yocto:qemux86 = \"5.0%\"\n\nAlthough not recommended, worst case, you can also use the\n\"forcevariable\" override, which is the strongest override possible.\nHere is an example::\n\n   PREFERRED_VERSION_linux-yocto:forcevariable = \"5.0%\"\n\n.. note::\n\n   The ``:forcevariable`` override is not handled specially. This override\n   only works because the default value of :term:`OVERRIDES` includes \"forcevariable\".\n\nIf a recipe with the specified version is not available, a warning\nmessage will be shown. See :term:`REQUIRED_VERSION` if you want this\nto be an error instead.\n\n" },
      { name:"PREMIRRORS", content:"Specifies additional paths from which the OpenEmbedded build system\ngets source code. When the build system searches for source code, it\nfirst tries the local download directory. If that location fails, the\nbuild system tries locations defined by :term:`PREMIRRORS`, the upstream\nsource, and then locations specified by\n:term:`MIRRORS` in that order.\n\nAssuming your distribution (:term:`DISTRO`) is \"poky\",\nthe default value for :term:`PREMIRRORS` is defined in the\n``conf/distro/poky.conf`` file in the ``meta-poky`` Git repository.\n\nTypically, you could add a specific server for the build system to\nattempt before any others by adding something like the following to\nthe ``local.conf`` configuration file in the\n:term:`Build Directory`::\n\n   PREMIRRORS:prepend = \"\\\n       git://.*/.* &YOCTO_DL_URL;/mirror/sources/ \\\n       ftp://.*/.* &YOCTO_DL_URL;/mirror/sources/ \\\n       http://.*/.* &YOCTO_DL_URL;/mirror/sources/ \\\n       https://.*/.* &YOCTO_DL_URL;/mirror/sources/\"\n\nThese changes cause the\nbuild system to intercept Git, FTP, HTTP, and HTTPS requests and\ndirect them to the ``http://`` sources mirror. You can use\n``file://`` URLs to point to local directories or network shares as\nwell.\n\n" },
      { name:"PRIORITY", content:"Indicates the importance of a package.\n\n:term:`PRIORITY` is considered to be part of the distribution policy\nbecause the importance of any given recipe depends on the purpose for\nwhich the distribution is being produced. Thus, :term:`PRIORITY` is not\nnormally set within recipes.\n\nYou can set :term:`PRIORITY` to \"required\", \"standard\", \"extra\", and\n\"optional\", which is the default.\n\n" },
      { name:"PRIVATE_LIBS", content:"Specifies libraries installed within a recipe that should be ignored\nby the OpenEmbedded build system's shared library resolver. This\nvariable is typically used when software being built by a recipe has\nits own private versions of a library normally provided by another\nrecipe. In this case, you would not want the package containing the\nprivate libraries to be set as a dependency on other unrelated\npackages that should instead depend on the package providing the\nstandard version of the library.\n\nLibraries specified in this variable should be specified by their\nfile name. For example, from the Firefox recipe in meta-browser::\n\n   PRIVATE_LIBS = \"libmozjs.so \\\n                   libxpcom.so \\\n                   libnspr4.so \\\n                   libxul.so \\\n                   libmozalloc.so \\\n                   libplc4.so \\\n                   libplds4.so\"\n\nFor more information, see the\n\":ref:`overview-manual/concepts:automatically added runtime dependencies`\"\nsection in the Yocto Project Overview and Concepts Manual.\n\n" },
      { name:"PROVIDES", content:"A list of aliases by which a particular recipe can be known. By\ndefault, a recipe's own :term:`PN` is implicitly already in its\n:term:`PROVIDES` list and therefore does not need to mention that it\nprovides itself. If a recipe uses :term:`PROVIDES`, the additional\naliases are synonyms for the recipe and can be useful for satisfying\ndependencies of other recipes during the build as specified by\n:term:`DEPENDS`.\n\nConsider the following example :term:`PROVIDES` statement from the recipe\nfile ``eudev_3.2.9.bb``::\n\n   PROVIDES += \"udev\"\n\nThe :term:`PROVIDES` statement\nresults in the \"eudev\" recipe also being available as simply \"udev\".\n\n.. note::\n\n   A recipe's own recipe name (:term:`PN`) is always implicitly prepended\n   to :term:`PROVIDES`, so while using \"+=\" in the above example may not be\n   strictly necessary it is recommended to avoid confusion.\n\nIn addition to providing recipes under alternate names, the\n:term:`PROVIDES` mechanism is also used to implement virtual targets. A\nvirtual target is a name that corresponds to some particular\nfunctionality (e.g. a Linux kernel). Recipes that provide the\nfunctionality in question list the virtual target in :term:`PROVIDES`.\nRecipes that depend on the functionality in question can include the\nvirtual target in :term:`DEPENDS` to leave the choice of provider open.\n\nConventionally, virtual targets have names on the form\n\"virtual/function\" (e.g. \"virtual/kernel\"). The slash is simply part\nof the name and has no syntactical significance.\n\nThe :term:`PREFERRED_PROVIDER` variable is\nused to select which particular recipe provides a virtual target.\n\n.. note::\n\n   A corresponding mechanism for virtual runtime dependencies\n   (packages) exists. However, the mechanism does not depend on any\n   special functionality beyond ordinary variable assignments. For\n   example, ``VIRTUAL-RUNTIME_dev_manager`` refers to the package of\n   the component that manages the ``/dev`` directory.\n\n   Setting the \"preferred provider\" for runtime dependencies is as\n   simple as using the following assignment in a configuration file::\n\n           VIRTUAL-RUNTIME_dev_manager = \"udev\"\n\n\n" },
      { name:"PRSERV_HOST", content:"The network based :term:`PR` service host and port.\n\nThe ``conf/templates/default/local.conf.sample.extended`` configuration\nfile in the :term:`Source Directory` shows how the :term:`PRSERV_HOST`\nvariable is set::\n\n   PRSERV_HOST = \"localhost:0\"\n\nYou must\nset the variable if you want to automatically start a local :ref:`PR\nservice <dev-manual/packages:working with a pr service>`. You can\nset :term:`PRSERV_HOST` to other values to use a remote PR service.\n\n\n" },
      { name:"PSEUDO_IGNORE_PATHS", content:"A comma-separated (without spaces) list of path prefixes that should be ignored\nby pseudo when monitoring and recording file operations, in order to avoid\nproblems with files being written to outside of the pseudo context and\nreduce pseudo's overhead. A path is ignored if it matches any prefix in the list\nand can include partial directory (or file) names.\n\n\n" },
      { name:"PTEST_ENABLED", content:"Specifies whether or not :ref:`Package\nTest <dev-manual/packages:testing packages with ptest>` (ptest)\nfunctionality is enabled when building a recipe. You should not set\nthis variable directly. Enabling and disabling building Package Tests\nat build time should be done by adding \"ptest\" to (or removing it\nfrom) :term:`DISTRO_FEATURES`.\n\n" },
      { name:"PV", content:"The version of the recipe. The version is normally extracted from the\nrecipe filename. For example, if the recipe is named\n``expat_2.0.1.bb``, then the default value of :term:`PV` will be \"2.0.1\".\n:term:`PV` is generally not overridden within a recipe unless it is\nbuilding an unstable (i.e. development) version from a source code\nrepository (e.g. Git or Subversion).\n\n:term:`PV` is the default value of the :term:`PKGV` variable.\n\n" },
      { name:"PYPI_PACKAGE", content:"When inheriting the :ref:`ref-classes-pypi` class, specifies the\n`PyPI <https://pypi.org/>`__ package name to be built. The default value\nis set based upon :term:`BPN` (stripping any \"python-\" or \"python3-\"\nprefix off if present), however for some packages it will need to be set\nexplicitly if that will not match the package name (e.g. where the\npackage name has a prefix, underscores, uppercase letters etc.)\n\n" },
      { name:"PYTHON_ABI", content:"When used by recipes that inherit the :ref:`ref-classes-setuptools3`\nclass, denotes the Application Binary Interface (ABI) currently in use\nfor Python. By default, the ABI is \"m\". You do not have to set this\nvariable as the OpenEmbedded build system sets it for you.\n\nThe OpenEmbedded build system uses the ABI to construct directory\nnames used when installing the Python headers and libraries in\nsysroot (e.g. ``.../python3.3m/...``).\n\n" },
      { name:"PYTHON_PN", content:"When used by recipes that inherit the :ref:`ref-classes-setuptools3`\nclass, specifies the major Python version being built. For Python 3.x,\n:term:`PYTHON_PN` would be \"python3\". You do not have to set this\nvariable as the OpenEmbedded build system automatically sets it for you.\n\nThe variable allows recipes to use common infrastructure such as the\nfollowing::\n\n   DEPENDS += \"${PYTHON_PN}-native\"\n\nIn the previous example,\nthe version of the dependency is :term:`PYTHON_PN`.\n\n" },
      { name:"QA_EMPTY_DIRS", content:"Specifies a list of directories that are expected to be empty when\npackaging; if ``empty-dirs`` appears in :term:`ERROR_QA` or\n:term:`WARN_QA` these will be checked and an error or warning\n(respectively) will be produced.\n\nThe default :term:`QA_EMPTY_DIRS` value is set in\n:ref:`insane.bbclass <ref-classes-insane>`.\n\n" },
      { name:"QA_EMPTY_DIRS_RECOMMENDATION", content:"Specifies a recommendation for why a directory must be empty,\nwhich will be included in the error message if a specific directory\nis found to contain files. Must be overridden with the directory\npath to match on.\n\nIf no recommendation is specified for a directory, then the default\n\"but it is expected to be empty\" will be used.\n\nAn example message shows if files were present in '/dev'::\n\n   QA_EMPTY_DIRS_RECOMMENDATION:/dev = \"but all devices must be created at runtime\"\n\n" },
      { name:"RANLIB", content:"The minimal command and arguments to run ``ranlib``.\n\n" },
      { name:"RCONFLICTS", content:"The list of packages that conflict with packages. Note that packages\nwill not be installed if conflicting packages are not first removed.\n\nLike all package-controlling variables, you must always use them in\nconjunction with a package name override. Here is an example::\n\n   RCONFLICTS:${PN} = \"another_conflicting_package_name\"\n\nBitBake, which the OpenEmbedded build system uses, supports\nspecifying versioned dependencies. Although the syntax varies\ndepending on the packaging format, BitBake hides these differences\nfrom you. Here is the general syntax to specify versions with the\n:term:`RCONFLICTS` variable::\n\n   RCONFLICTS:${PN} = \"package (operator version)\"\n\nFor ``operator``, you can specify the following:\n\n- =\n- <\n- >\n- <=\n- >=\n\nFor example, the following sets up a dependency on version 1.2 or\ngreater of the package ``foo``::\n\n   RCONFLICTS:${PN} = \"foo (>= 1.2)\"\n\n" },
      { name:"RDEPENDS", content:"Lists runtime dependencies of a package. These dependencies are other\npackages that must be installed in order for the package to function\ncorrectly. As an example, the following assignment declares that the\npackage ``foo`` needs the packages ``bar`` and ``baz`` to be\ninstalled::\n\n   RDEPENDS:foo = \"bar baz\"\n\nThe most common types of package\nruntime dependencies are automatically detected and added. Therefore,\nmost recipes do not need to set :term:`RDEPENDS`. For more information,\nsee the\n\":ref:`overview-manual/concepts:automatically added runtime dependencies`\"\nsection in the Yocto Project Overview and Concepts Manual.\n\nThe practical effect of the above :term:`RDEPENDS` assignment is that\n``bar`` and ``baz`` will be declared as dependencies inside the\npackage ``foo`` when it is written out by one of the\n:ref:`do_package_write_* <ref-tasks-package_write_deb>` tasks.\nExactly how this is done depends on which package format is used,\nwhich is determined by\n:term:`PACKAGE_CLASSES`. When the\ncorresponding package manager installs the package, it will know to\nalso install the packages on which it depends.\n\nTo ensure that the packages ``bar`` and ``baz`` get built, the\nprevious :term:`RDEPENDS` assignment also causes a task dependency to be\nadded. This dependency is from the recipe's\n:ref:`ref-tasks-build` (not to be confused with\n:ref:`ref-tasks-compile`) task to the\n:ref:`do_package_write_* <ref-tasks-package_write_deb>` task of the recipes that build ``bar`` and\n``baz``.\n\nThe names of the packages you list within :term:`RDEPENDS` must be the\nnames of other packages --- they cannot be recipe names. Although\npackage names and recipe names usually match, the important point\nhere is that you are providing package names within the :term:`RDEPENDS`\nvariable. For an example of the default list of packages created from\na recipe, see the :term:`PACKAGES` variable.\n\nBecause the :term:`RDEPENDS` variable applies to packages being built,\nyou should always use the variable in a form with an attached package\nname (remember that a single recipe can build multiple packages). For\nexample, suppose you are building a development package that depends\non the ``perl`` package. In this case, you would use the following\n:term:`RDEPENDS` statement::\n\n   RDEPENDS:${PN}-dev += \"perl\"\n\nIn the example,\nthe development package depends on the ``perl`` package. Thus, the\n:term:`RDEPENDS` variable has the ``${PN}-dev`` package name as part of\nthe variable.\n\n.. note::\n\n   ``RDEPENDS:${PN}-dev`` includes ``${``\\ :term:`PN`\\ ``}``\n   by default. This default is set in the BitBake configuration file\n   (``meta/conf/bitbake.conf``). Be careful not to accidentally remove\n   ``${PN}`` when modifying ``RDEPENDS:${PN}-dev``. Use the \"+=\" operator\n   rather than the \"=\" operator.\n\nThe package names you use with :term:`RDEPENDS` must appear as they would\nin the :term:`PACKAGES` variable. The :term:`PKG` variable\nallows a different name to be used for the final package (e.g. the\n:ref:`ref-classes-debian` class uses this to rename\npackages), but this final package name cannot be used with\n:term:`RDEPENDS`, which makes sense as :term:`RDEPENDS` is meant to be\nindependent of the package format used.\n\nBitBake, which the OpenEmbedded build system uses, supports\nspecifying versioned dependencies. Although the syntax varies\ndepending on the packaging format, BitBake hides these differences\nfrom you. Here is the general syntax to specify versions with the\n:term:`RDEPENDS` variable::\n\n   RDEPENDS:${PN} = \"package (operator version)\"\n\nFor ``operator``, you can specify the following:\n\n- =\n- <\n- >\n- <=\n- >=\n\nFor version, provide the version number.\n\n.. note::\n\n   You can use :term:`EXTENDPKGV` to provide a full package version\n   specification.\n\nFor example, the following sets up a dependency on version 1.2 or\ngreater of the package ``foo``::\n\n   RDEPENDS:${PN} = \"foo (>= 1.2)\"\n\nFor information on build-time dependencies, see the :term:`DEPENDS`\nvariable. You can also see the\n\":ref:`bitbake-user-manual/bitbake-user-manual-metadata:tasks`\" and\n\":ref:`bitbake-user-manual/bitbake-user-manual-execution:dependencies`\" sections in the\nBitBake User Manual for additional information on tasks and dependencies.\n\n" },
      { name:"RECIPE_NO_UPDATE_REASON", content:"If a recipe should not be replaced by a more recent upstream version,\nputting the reason why in this variable in a recipe allows\n``devtool check-upgrade-status`` command to display it, as explained\nin the \":ref:`ref-manual/devtool-reference:checking on the upgrade status of a recipe`\"\nsection.\n\n" },
      { name:"REPODIR", content:"See :term:`bitbake:REPODIR` in the BitBake manual.\n\n" },
      { name:"REQUIRED_DISTRO_FEATURES", content:"When inheriting the :ref:`ref-classes-features_check`\nclass, this variable identifies distribution features that must exist\nin the current configuration in order for the OpenEmbedded build\nsystem to build the recipe. In other words, if the\n:term:`REQUIRED_DISTRO_FEATURES` variable lists a feature that does not\nappear in :term:`DISTRO_FEATURES` within the current configuration, then\nthe recipe will be skipped, and if the build system attempts to build\nthe recipe then an error will be triggered.\n\n" },
      { name:"REQUIRED_VERSION", content:"If there are multiple versions of a recipe available, this variable\ndetermines which version should be given preference.\n:term:`REQUIRED_VERSION` works in exactly the same manner as\n:term:`PREFERRED_VERSION`, except that if the specified version is not\navailable then an error message is shown and the build fails\nimmediately.\n\nIf both :term:`REQUIRED_VERSION` and :term:`PREFERRED_VERSION` are set\nfor the same recipe, the :term:`REQUIRED_VERSION` value applies.\n\n" },
      { name:"RM_WORK_EXCLUDE", content:"With :ref:`ref-classes-rm-work` enabled, this variable\nspecifies a list of recipes whose work directories should not be removed.\nSee the \":ref:`ref-classes-rm-work`\" section for more details.\n\n" },
      { name:"ROOT_HOME", content:"Defines the root home directory. By default, this directory is set as\nfollows in the BitBake configuration file::\n\n   ROOT_HOME ??= \"/home/root\"\n\n.. note::\n\n   This default value is likely used because some embedded solutions\n   prefer to have a read-only root filesystem and prefer to keep\n   writeable data in one place.\n\nYou can override the default by setting the variable in any layer or\nin the ``local.conf`` file. Because the default is set using a \"weak\"\nassignment (i.e. \"??=\"), you can use either of the following forms to\ndefine your override::\n\n   ROOT_HOME = \"/root\"\n   ROOT_HOME ?= \"/root\"\n\nThese\noverride examples use ``/root``, which is probably the most commonly\nused override.\n\n" },
      { name:"ROOTFS", content:"Indicates a filesystem image to include as the root filesystem.\n\nThe :term:`ROOTFS` variable is an optional variable used with the\n:ref:`ref-classes-image-live` class.\n\n" },
      { name:"ROOTFS_POSTINSTALL_COMMAND", content:"Specifies a list of functions to call after the OpenEmbedded build\nsystem has installed packages. You can specify functions separated by\nsemicolons::\n\n   ROOTFS_POSTINSTALL_COMMAND += \"function; ... \"\n\nIf you need to pass the root filesystem path to a command within a\nfunction, you can use ``${IMAGE_ROOTFS}``, which points to the\ndirectory that becomes the root filesystem image. See the\n:term:`IMAGE_ROOTFS` variable for more\ninformation.\n\n" },
      { name:"ROOTFS_POSTPROCESS_COMMAND", content:"Specifies a list of functions to call once the OpenEmbedded build\nsystem has created the root filesystem. You can specify functions\nseparated by semicolons::\n\n   ROOTFS_POSTPROCESS_COMMAND += \"function; ... \"\n\nIf you need to pass the root filesystem path to a command within a\nfunction, you can use ``${IMAGE_ROOTFS}``, which points to the\ndirectory that becomes the root filesystem image. See the\n:term:`IMAGE_ROOTFS` variable for more\ninformation.\n\n" },
      { name:"ROOTFS_POSTUNINSTALL_COMMAND", content:"Specifies a list of functions to call after the OpenEmbedded build\nsystem has removed unnecessary packages. When runtime package\nmanagement is disabled in the image, several packages are removed\nincluding ``base-passwd``, ``shadow``, and ``update-alternatives``.\nYou can specify functions separated by semicolons::\n\n   ROOTFS_POSTUNINSTALL_COMMAND += \"function; ... \"\n\nIf you need to pass the root filesystem path to a command within a\nfunction, you can use ``${IMAGE_ROOTFS}``, which points to the\ndirectory that becomes the root filesystem image. See the\n:term:`IMAGE_ROOTFS` variable for more\ninformation.\n\n" },
      { name:"ROOTFS_PREPROCESS_COMMAND", content:"Specifies a list of functions to call before the OpenEmbedded build\nsystem has created the root filesystem. You can specify functions\nseparated by semicolons::\n\n   ROOTFS_PREPROCESS_COMMAND += \"function; ... \"\n\nIf you need to pass the root filesystem path to a command within a\nfunction, you can use ``${IMAGE_ROOTFS}``, which points to the\ndirectory that becomes the root filesystem image. See the\n:term:`IMAGE_ROOTFS` variable for more\ninformation.\n\n" },
      { name:"RPROVIDES", content:"A list of package name aliases that a package also provides. These\naliases are useful for satisfying runtime dependencies of other\npackages both during the build and on the target (as specified by\n:term:`RDEPENDS`).\n\n.. note::\n\n   A package's own name is implicitly already in its :term:`RPROVIDES` list.\n\nAs with all package-controlling variables, you must always use the\nvariable in conjunction with a package name override. Here is an\nexample::\n\n   RPROVIDES:${PN} = \"widget-abi-2\"\n\n" },
      { name:"RRECOMMENDS", content:"A list of packages that extends the usability of a package being\nbuilt. The package being built does not depend on this list of\npackages in order to successfully build, but rather uses them for\nextended usability. To specify runtime dependencies for packages, see\nthe :term:`RDEPENDS` variable.\n\nThe package manager will automatically install the :term:`RRECOMMENDS`\nlist of packages when installing the built package. However, you can\nprevent listed packages from being installed by using the\n:term:`BAD_RECOMMENDATIONS`,\n:term:`NO_RECOMMENDATIONS`, and\n:term:`PACKAGE_EXCLUDE` variables.\n\nPackages specified in :term:`RRECOMMENDS` need not actually be produced.\nHowever, there must be a recipe providing each package, either\nthrough the :term:`PACKAGES` or\n:term:`PACKAGES_DYNAMIC` variables or the\n:term:`RPROVIDES` variable, or an error will occur\nduring the build. If such a recipe does exist and the package is not\nproduced, the build continues without error.\n\nBecause the :term:`RRECOMMENDS` variable applies to packages being built,\nyou should always attach an override to the variable to specify the\nparticular package whose usability is being extended. For example,\nsuppose you are building a development package that is extended to\nsupport wireless functionality. In this case, you would use the\nfollowing::\n\n   RRECOMMENDS:${PN}-dev += \"wireless_package_name\"\n\nIn the\nexample, the package name (``${PN}-dev``) must appear as it would in\nthe :term:`PACKAGES` namespace before any renaming of the output package\nby classes such as :ref:`ref-classes-debian`.\n\nBitBake, which the OpenEmbedded build system uses, supports\nspecifying versioned recommends. Although the syntax varies depending\non the packaging format, BitBake hides these differences from you.\nHere is the general syntax to specify versions with the\n:term:`RRECOMMENDS` variable::\n\n   RRECOMMENDS:${PN} = \"package (operator version)\"\n\nFor ``operator``, you can specify the following:\n\n- =\n- <\n- >\n- <=\n- >=\n\nFor example, the following sets up a recommend on version 1.2 or\ngreater of the package ``foo``::\n\n   RRECOMMENDS:${PN} = \"foo (>= 1.2)\"\n\n" },
      { name:"RREPLACES", content:"A list of packages replaced by a package. The package manager uses\nthis variable to determine which package should be installed to\nreplace other package(s) during an upgrade. In order to also have the\nother package(s) removed at the same time, you must add the name of\nthe other package to the :term:`RCONFLICTS` variable.\n\nAs with all package-controlling variables, you must use this variable\nin conjunction with a package name override. Here is an example::\n\n   RREPLACES:${PN} = \"other_package_being_replaced\"\n\nBitBake, which the OpenEmbedded build system uses, supports\nspecifying versioned replacements. Although the syntax varies\ndepending on the packaging format, BitBake hides these differences\nfrom you. Here is the general syntax to specify versions with the\n:term:`RREPLACES` variable::\n\n   RREPLACES:${PN} = \"package (operator version)\"\n\nFor ``operator``, you can specify the following:\n\n- =\n- <\n- >\n- <=\n- >=\n\nFor example, the following sets up a replacement using version 1.2\nor greater of the package ``foo``::\n\n    RREPLACES:${PN} = \"foo (>= 1.2)\"\n\n" },
      { name:"RSUGGESTS", content:"A list of additional packages that you can suggest for installation\nby the package manager at the time a package is installed. Not all\npackage managers support this functionality.\n\nAs with all package-controlling variables, you must always use this\nvariable in conjunction with a package name override. Here is an\nexample::\n\n   RSUGGESTS:${PN} = \"useful_package another_package\"\n\n" },
      { name:"RUST_CHANNEL", content:"Specifies which version of Rust to build - \"stable\", \"beta\" or \"nightly\".\nThe default value is \"stable\". Set this at your own risk, as values other\nthan \"stable\" are not guaranteed to work at a given time.\n\n" },
      { name:"S", content:"The location in the :term:`Build Directory` where\nunpacked recipe source code resides. By default, this directory is\n``${``\\ :term:`WORKDIR`\\ ``}/${``\\ :term:`BPN`\\ ``}-${``\\ :term:`PV`\\ ``}``,\nwhere ``${BPN}`` is the base recipe name and ``${PV}`` is the recipe\nversion. If the source tarball extracts the code to a directory named\nanything other than ``${BPN}-${PV}``, or if the source code is\nfetched from an SCM such as Git or Subversion, then you must set\n:term:`S` in the recipe so that the OpenEmbedded build system knows where\nto find the unpacked source.\n\nAs an example, assume a :term:`Source Directory`\ntop-level folder named ``poky`` and a default :term:`Build Directory` at\n``poky/build``. In this case, the work directory the build system\nuses to keep the unpacked recipe for ``db`` is the following::\n\n   poky/build/tmp/work/qemux86-poky-linux/db/5.1.19-r3/db-5.1.19\n\nThe unpacked source code resides in the ``db-5.1.19`` folder.\n\nThis next example assumes a Git repository. By default, Git\nrepositories are cloned to ``${WORKDIR}/git`` during\n:ref:`ref-tasks-fetch`. Since this path is different\nfrom the default value of :term:`S`, you must set it specifically so the\nsource can be located::\n\n   SRC_URI = \"git://path/to/repo.git;branch=main\"\n   S = \"${WORKDIR}/git\"\n\n" },
      { name:"SANITY_REQUIRED_UTILITIES", content:"Specifies a list of command-line utilities that should be checked for\nduring the initial sanity checking process when running BitBake. If\nany of the utilities are not installed on the build host, then\nBitBake immediately exits with an error.\n\n" },
      { name:"SANITY_TESTED_DISTROS", content:"A list of the host distribution identifiers that the build system has\nbeen tested against. Identifiers consist of the host distributor ID\nfollowed by the release, as reported by the ``lsb_release`` tool or\nas read from ``/etc/lsb-release``. Separate the list items with\nexplicit newline characters (``\\n``). If :term:`SANITY_TESTED_DISTROS` is\nnot empty and the current value of\n:term:`NATIVELSBSTRING` does not appear in the\nlist, then the build system reports a warning that indicates the\ncurrent host distribution has not been tested as a build host.\n\n" },
      { name:"SDK_ARCH", content:"The target architecture for the SDK. Typically, you do not directly\nset this variable. Instead, use :term:`SDKMACHINE`.\n\n" },
      { name:"SDK_ARCHIVE_TYPE", content:"Specifies the type of archive to create for the SDK. Valid values:\n\n- ``tar.xz`` (default)\n- ``zip``\n\nOnly one archive type can be specified.\n\n" },
      { name:"SDK_BUILDINFO_FILE", content:"When using the :ref:`ref-classes-image-buildinfo` class,\nspecifies the file in the SDK to write the build information into. The\ndefault value is \"``/buildinfo``\".\n\n" },
      { name:"SDK_CUSTOM_TEMPLATECONF", content:"When building the extensible SDK, if :term:`SDK_CUSTOM_TEMPLATECONF` is set to\n\"1\" and a ``conf/templateconf.cfg`` file exists in the :term:`Build Directory`\n(:term:`TOPDIR`) then this will be copied into the SDK.\n\n" },
      { name:"SDK_DEPLOY", content:"The directory set up and used by the\n:ref:`populate_sdk_base <ref-classes-populate-sdk>` class to which the\nSDK is deployed. The :ref:`populate_sdk_base <ref-classes-populate-sdk>`\nclass defines :term:`SDK_DEPLOY` as follows::\n\n   SDK_DEPLOY = \"${TMPDIR}/deploy/sdk\"\n\n" },
      { name:"SDK_DIR", content:"The parent directory used by the OpenEmbedded build system when\ncreating SDK output. The\n:ref:`populate_sdk_base <ref-classes-populate-sdk-*>` class defines\nthe variable as follows::\n\n   SDK_DIR = \"${WORKDIR}/sdk\"\n\n.. note::\n\n   The :term:`SDK_DIR` directory is a temporary directory as it is part of\n   :term:`WORKDIR`. The final output directory is :term:`SDK_DEPLOY`.\n\n" },
      { name:"SDK_EXT_TYPE", content:"Controls whether or not shared state artifacts are copied into the\nextensible SDK. The default value of \"full\" copies all of the\nrequired shared state artifacts into the extensible SDK. The value\n\"minimal\" leaves these artifacts out of the SDK.\n\n.. note::\n\n   If you set the variable to \"minimal\", you need to ensure\n   :term:`SSTATE_MIRRORS` is set in the SDK's configuration to enable the\n   artifacts to be fetched as needed.\n\n" },
      { name:"SDK_HOST_MANIFEST", content:"The manifest file for the host part of the SDK. This file lists all\nthe installed packages that make up the host part of the SDK. The\nfile contains package information on a line-per-package basis as\nfollows::\n\n   packagename packagearch version\n\nThe :ref:`populate_sdk_base <ref-classes-populate-sdk-*>` class\ndefines the manifest file as follows::\n\n   SDK_HOST_MANIFEST = \"${SDK_DEPLOY}/${TOOLCHAIN_OUTPUTNAME}.host.manifest\"\n\nThe location is derived using the :term:`SDK_DEPLOY` and\n:term:`TOOLCHAIN_OUTPUTNAME` variables.\n\n" },
      { name:"SDK_INCLUDE_PKGDATA", content:"When set to \"1\", specifies to include the packagedata for all recipes\nin the \"world\" target in the extensible SDK. Including this data\nallows the ``devtool search`` command to find these recipes in search\nresults, as well as allows the ``devtool add`` command to map\ndependencies more effectively.\n\n.. note::\n\n   Enabling the :term:`SDK_INCLUDE_PKGDATA`\n   variable significantly increases build time because all of world\n   needs to be built. Enabling the variable also slightly increases\n   the size of the extensible SDK.\n\n" },
      { name:"SDK_INCLUDE_TOOLCHAIN", content:"When set to \"1\", specifies to include the toolchain in the extensible\nSDK. Including the toolchain is useful particularly when\n:term:`SDK_EXT_TYPE` is set to \"minimal\" to keep\nthe SDK reasonably small but you still want to provide a usable\ntoolchain. For example, suppose you want to use the toolchain from an\nIDE or from other tools and you do not want to perform additional\nsteps to install the toolchain.\n\nThe :term:`SDK_INCLUDE_TOOLCHAIN` variable defaults to \"0\" if\n:term:`SDK_EXT_TYPE` is set to \"minimal\", and defaults to \"1\" if\n:term:`SDK_EXT_TYPE` is set to \"full\".\n\n" },
      { name:"SDK_NAME", content:"The base name for SDK output files. The name is derived from the\n:term:`DISTRO`, :term:`TCLIBC`,\n:term:`SDK_ARCH`,\n:term:`IMAGE_BASENAME`, and\n:term:`TUNE_PKGARCH` variables::\n\n   SDK_NAME = \"${DISTRO}-${TCLIBC}-${SDK_ARCH}-${IMAGE_BASENAME}-${TUNE_PKGARCH}\"\n\n" },
      { name:"SDK_OS", content:"Specifies the operating system for which the SDK will be built. The\ndefault value is the value of :term:`BUILD_OS`.\n\n" },
      { name:"SDK_OUTPUT", content:"The location used by the OpenEmbedded build system when creating SDK\noutput. The :ref:`populate_sdk_base <ref-classes-populate-sdk-*>`\nclass defines the variable as follows::\n\n   SDK_DIR = \"${WORKDIR}/sdk\"\n   SDK_OUTPUT = \"${SDK_DIR}/image\"\n   SDK_DEPLOY = \"${DEPLOY_DIR}/sdk\"\n\n.. note::\n\n   The :term:`SDK_OUTPUT` directory is a temporary directory as it is part of\n   :term:`WORKDIR` by way of :term:`SDK_DIR`. The final output directory is\n   :term:`SDK_DEPLOY`.\n\n" },
      { name:"SDK_PACKAGE_ARCHS", content:"Specifies a list of architectures compatible with the SDK machine.\nThis variable is set automatically and should not normally be\nhand-edited. Entries are separated using spaces and listed in order\nof priority. The default value for :term:`SDK_PACKAGE_ARCHS` is \"all any\nnoarch ${SDK_ARCH}-${SDKPKGSUFFIX}\".\n\n" },
      { name:"SDK_POSTPROCESS_COMMAND", content:"Specifies a list of functions to call once the OpenEmbedded build\nsystem creates the SDK. You can specify functions separated by\nsemicolons: SDK_POSTPROCESS_COMMAND += \"function; ... \"\n\nIf you need to pass an SDK path to a command within a function, you\ncan use ``${SDK_DIR}``, which points to the parent directory used by\nthe OpenEmbedded build system when creating SDK output. See the\n:term:`SDK_DIR` variable for more information.\n\n" },
      { name:"SDK_PREFIX", content:"The toolchain binary prefix used for\n:ref:`ref-classes-nativesdk` recipes. The\nOpenEmbedded build system uses the :term:`SDK_PREFIX` value to set the\n:term:`TARGET_PREFIX` when building\n``nativesdk`` recipes. The default value is \"${SDK_SYS}-\".\n\n" },
      { name:"SDK_RECRDEP_TASKS", content:"A list of shared state tasks added to the extensible SDK. By default,\nthe following tasks are added:\n\n- :ref:`ref-tasks-populate_lic`\n- :ref:`ref-tasks-package_qa`\n- :ref:`ref-tasks-populate_sysroot`\n- :ref:`ref-tasks-deploy`\n\nDespite the default value of \"\" for the\n:term:`SDK_RECRDEP_TASKS` variable, the above four tasks are always added\nto the SDK. To specify tasks beyond these four, you need to use the\n:term:`SDK_RECRDEP_TASKS` variable (e.g. you are defining additional\ntasks that are needed in order to build\n:term:`SDK_TARGETS`).\n\n" },
      { name:"SDK_SYS", content:"Specifies the system, including the architecture and the operating\nsystem, for which the SDK will be built.\n\nThe OpenEmbedded build system automatically sets this variable based\non :term:`SDK_ARCH`,\n:term:`SDK_VENDOR`, and\n:term:`SDK_OS`. You do not need to set the :term:`SDK_SYS`\nvariable yourself.\n\n" },
      { name:"SDK_TARGET_MANIFEST", content:"The manifest file for the target part of the SDK. This file lists all\nthe installed packages that make up the target part of the SDK. The\nfile contains package information on a line-per-package basis as\nfollows::\n\n   packagename packagearch version\n\nThe :ref:`populate_sdk_base <ref-classes-populate-sdk-*>` class\ndefines the manifest file as follows::\n\n   SDK_TARGET_MANIFEST = \"${SDK_DEPLOY}/${TOOLCHAIN_OUTPUTNAME}.target.manifest\"\n\nThe location is derived using the :term:`SDK_DEPLOY` and\n:term:`TOOLCHAIN_OUTPUTNAME` variables.\n\n" },
      { name:"SDK_TARGETS", content:"A list of targets to install from shared state as part of the\nstandard or extensible SDK installation. The default value is \"${PN}\"\n(i.e. the image from which the SDK is built).\n\nThe :term:`SDK_TARGETS` variable is an internal variable and typically\nwould not be changed.\n\n" },
      { name:"SDK_TITLE", content:"The title to be printed when running the SDK installer. By default,\nthis title is based on the :term:`DISTRO_NAME` or\n:term:`DISTRO` variable and is set in the\n:ref:`populate_sdk_base <ref-classes-populate-sdk-*>` class as\nfollows::\n\n   SDK_TITLE ??= \"${@d.getVar('DISTRO_NAME') or d.getVar('DISTRO')} SDK\"\n\nFor the default distribution \"poky\",\n:term:`SDK_TITLE` is set to \"Poky (Yocto Project Reference Distro)\".\n\nFor information on how to change this default title, see the\n\":ref:`sdk-manual/appendix-customizing:changing the extensible sdk installer title`\"\nsection in the Yocto Project Application Development and the\nExtensible Software Development Kit (eSDK) manual.\n\n" },
      { name:"SDK_TOOLCHAIN_LANGS", content:"Specifies programming languages to support in the SDK, as a\nspace-separated list. Currently supported items are ``rust`` and ``go``.\n\n" },
      { name:"SDK_UPDATE_URL", content:"An optional URL for an update server for the extensible SDK. If set,\nthe value is used as the default update server when running\n``devtool sdk-update`` within the extensible SDK.\n\n" },
      { name:"SDK_VENDOR", content:"Specifies the name of the SDK vendor.\n\n" },
      { name:"SDK_VERSION", content:"Specifies the version of the SDK. The Poky distribution configuration file\n(``/meta-poky/conf/distro/poky.conf``) sets the default\n:term:`SDK_VERSION` as follows::\n\n   SDK_VERSION = \"${@d.getVar('DISTRO_VERSION').replace('snapshot-${METADATA_REVISION}', 'snapshot')}\"\n\nFor additional information, see the\n:term:`DISTRO_VERSION` and\n:term:`METADATA_REVISION` variables.\n\n" },
      { name:"SDK_ZIP_OPTIONS", content:"Specifies extra options to pass to the ``zip`` command when zipping the SDK\n(i.e. when :term:`SDK_ARCHIVE_TYPE` is set to \"zip\"). The default value is\n\"-y\".\n\n" },
      { name:"SDKEXTPATH", content:"The default installation directory for the Extensible SDK. By\ndefault, this directory is based on the :term:`DISTRO`\nvariable and is set in the\n:ref:`populate_sdk_base <ref-classes-populate-sdk-*>` class as\nfollows::\n\n   SDKEXTPATH ??= \"~/${@d.getVar('DISTRO')}_sdk\"\n\nFor the\ndefault distribution \"poky\", the :term:`SDKEXTPATH` is set to \"poky_sdk\".\n\nFor information on how to change this default directory, see the\n\":ref:`sdk-manual/appendix-customizing:changing the default sdk installation directory`\"\nsection in the Yocto Project Application Development and the\nExtensible Software Development Kit (eSDK) manual.\n\n" },
      { name:"SDKIMAGE_FEATURES", content:"Equivalent to :term:`IMAGE_FEATURES`. However, this variable applies to\nthe SDK generated from an image using the following command::\n\n   $ bitbake -c populate_sdk imagename\n\n" },
      { name:"SDKMACHINE", content:"The machine for which the SDK is built. In other words, the SDK is built\nsuch that it runs on the target you specify with the :term:`SDKMACHINE`\nvalue. The value points to a corresponding ``.conf`` file under\n``conf/machine-sdk/`` in the enabled layers, for example ``aarch64``,\n``i586``, ``i686``, ``ppc64``, ``ppc64le``, and ``x86_64`` are\n:oe_git:`available in OpenEmbedded-Core </openembedded-core/tree/meta/conf/machine-sdk>`.\n\nThe variable defaults to :term:`BUILD_ARCH` so that SDKs are built for the\narchitecture of the build machine.\n\n.. note::\n\n   You cannot set the :term:`SDKMACHINE`\n   variable in your distribution configuration file. If you do, the\n   configuration will not take effect.\n\n" },
      { name:"SDKPATH", content:"Defines the path offered to the user for installation of the SDK that\nis generated by the OpenEmbedded build system. The path appears as\nthe default location for installing the SDK when you run the SDK's\ninstallation script. You can override the offered path when you run\nthe script.\n\n" },
      { name:"SDKTARGETSYSROOT", content:"The full path to the sysroot used for cross-compilation within an SDK\nas it will be when installed into the default\n:term:`SDKPATH`.\n\n" },
      { name:"SECTION", content:"The section in which packages should be categorized. Package\nmanagement utilities can make use of this variable.\n\n" },
      { name:"SELECTED_OPTIMIZATION", content:"Specifies the optimization flags passed to the C compiler when\nbuilding for the target. The flags are passed through the default\nvalue of the :term:`TARGET_CFLAGS` variable.\n\nThe :term:`SELECTED_OPTIMIZATION` variable takes the value of\n:term:`FULL_OPTIMIZATION` unless :term:`DEBUG_BUILD` = \"1\", in which\ncase the value of :term:`DEBUG_OPTIMIZATION` is used.\n\n" },
      { name:"SERIAL_CONSOLES", content:"Defines a serial console (TTY) to enable using\n:wikipedia:`getty <Getty_(Unix)>`. Provide a value that specifies the\nbaud rate followed by the TTY device name separated by a semicolon.\nUse spaces to separate multiple devices::\n\n   SERIAL_CONSOLES = \"115200;ttyS0 115200;ttyS1\"\n\n" },
      { name:"SERIAL_CONSOLES_CHECK", content:"Specifies serial consoles, which must be listed in\n:term:`SERIAL_CONSOLES`, to check against\n``/proc/console`` before enabling them using getty. This variable\nallows aliasing in the format: <device>:<alias>. If a device was\nlisted as \"sclp_line0\" in ``/dev/`` and \"ttyS0\" was listed in\n``/proc/console``, you would do the following::\n\n   SERIAL_CONSOLES_CHECK = \"slcp_line0:ttyS0\"\n\nThis variable is currently only supported with SysVinit (i.e. not\nwith systemd). Note that :term:`SERIAL_CONSOLES_CHECK` also requires\n``/etc/inittab`` to be writable when used with SysVinit. This makes it\nincompatible with customizations such as the following::\n\n   EXTRA_IMAGE_FEATURES += \"read-only-rootfs\"\n\n" },
      { name:"SETUPTOOLS_BUILD_ARGS", content:"When used by recipes that inherit the :ref:`ref-classes-setuptools3`\nclass, this variable can be used to specify additional arguments to be\npassed to ``setup.py build`` in the ``setuptools3_do_compile()`` task.\n\n" },
      { name:"SETUPTOOLS_INSTALL_ARGS", content:"When used by recipes that inherit the :ref:`ref-classes-setuptools3`\nclass, this variable can be used to specify additional arguments to be\npassed to ``setup.py install`` in the ``setuptools3_do_install()`` task.\n\n" },
      { name:"SETUPTOOLS_SETUP_PATH", content:"When used by recipes that inherit the :ref:`ref-classes-setuptools3`\nclass, this variable should be used to specify the directory in which\nthe ``setup.py`` file is located if it is not at the root of the source\ntree (as specified by :term:`S`). For example, in a recipe where the\nsources are fetched from a Git repository and ``setup.py`` is in a\n``python/pythonmodule`` subdirectory, you would have this::\n\n   S = \"${WORKDIR}/git\"\n   SETUPTOOLS_SETUP_PATH = \"${S}/python/pythonmodule\"\n\n" },
      { name:"SIGGEN_EXCLUDE_SAFE_RECIPE_DEPS", content:"A list of recipe dependencies that should not be used to determine\nsignatures of tasks from one recipe when they depend on tasks from\nanother recipe. For example::\n\n   SIGGEN_EXCLUDE_SAFE_RECIPE_DEPS += \"intone->mplayer2\"\n\nIn the previous example, ``intone`` depends on ``mplayer2``.\n\nYou can use the special token ``\"*\"`` on the left-hand side of the\ndependency to match all recipes except the one on the right-hand\nside. Here is an example::\n\n   SIGGEN_EXCLUDE_SAFE_RECIPE_DEPS += \"*->quilt-native\"\n\nIn the previous example, all recipes except ``quilt-native`` ignore\ntask signatures from the ``quilt-native`` recipe when determining\ntheir task signatures.\n\nUse of this variable is one mechanism to remove dependencies that\naffect task signatures and thus force rebuilds when a recipe changes.\n\n.. note::\n\n   If you add an inappropriate dependency for a recipe relationship,\n   the software might break during runtime if the interface of the\n   second recipe was changed after the first recipe had been built.\n\n" },
      { name:"SIGGEN_EXCLUDERECIPES_ABISAFE", content:"A list of recipes that are completely stable and will never change.\nThe ABI for the recipes in the list are presented by output from the\ntasks run to build the recipe. Use of this variable is one way to\nremove dependencies from one recipe on another that affect task\nsignatures and thus force rebuilds when the recipe changes.\n\n.. note::\n\n   If you add an inappropriate variable to this list, the software\n   might break at runtime if the interface of the recipe was changed\n   after the other had been built.\n\n" },
      { name:"SITEINFO_BITS", content:"Specifies the number of bits for the target system CPU. The value\nshould be either \"32\" or \"64\".\n\n" },
      { name:"SITEINFO_ENDIANNESS", content:"Specifies the endian byte order of the target system. The value\nshould be either \"le\" for little-endian or \"be\" for big-endian.\n\n" },
      { name:"SKIP_FILEDEPS", content:"Enables removal of all files from the \"Provides\" section of an RPM\npackage. Removal of these files is required for packages containing\nprebuilt binaries and libraries such as ``libstdc++`` and ``glibc``.\n\nTo enable file removal, set the variable to \"1\" in your\n``conf/local.conf`` configuration file in your:\n:term:`Build Directory`::\n\n   SKIP_FILEDEPS = \"1\"\n\n" },
      { name:"SKIP_RECIPE", content:"Used to prevent the OpenEmbedded build system from building a given\nrecipe. Specify the :term:`PN` value as a variable flag (``varflag``)\nand provide a reason, which will be reported when attempting to\nbuild the recipe.\n\nTo prevent a recipe from being built, use the :term:`SKIP_RECIPE`\nvariable in your ``local.conf`` file or distribution configuration.\nHere is an example which prevents ``myrecipe`` from being built::\n\n   SKIP_RECIPE[myrecipe] = \"Not supported by our organization.\"\n\n" },
      { name:"SOC_FAMILY", content:"Groups together machines based upon the same family of SOC (System On\nChip). You typically set this variable in a common ``.inc`` file that\nyou include in the configuration files of all the machines.\n\n.. note::\n\n   You must include ``conf/machine/include/soc-family.inc`` for this\n   variable to appear in :term:`MACHINEOVERRIDES`.\n\n" },
      { name:"SOLIBS", content:"Defines the suffix for shared libraries used on the target platform.\nBy default, this suffix is \".so.*\" for all Linux-based systems and is\ndefined in the ``meta/conf/bitbake.conf`` configuration file.\n\nYou will see this variable referenced in the default values of\n``FILES:${PN}``.\n\n" },
      { name:"SOLIBSDEV", content:"Defines the suffix for the development symbolic link (symlink) for\nshared libraries on the target platform. By default, this suffix is\n\".so\" for Linux-based systems and is defined in the\n``meta/conf/bitbake.conf`` configuration file.\n\nYou will see this variable referenced in the default values of\n``FILES:${PN}-dev``.\n\n" },
      { name:"SOURCE_DATE_EPOCH", content:"This defines a date expressed in number of seconds since\nthe UNIX EPOCH (01 Jan 1970 00:00:00 UTC), which is used by\nmultiple build systems to force a timestamp in built binaries.\nMany upstream projects already support this variable.\n\nYou will find more details in the `official specifications\n<https://reproducible-builds.org/specs/source-date-epoch/>`__.\n\nA value for each recipe is computed from the sources by\n:oe_git:`meta/lib/oe/reproducible.py </openembedded-core/tree/meta/lib/oe/reproducible.py>`.\n\nIf a recipe wishes to override the default behavior, it should set its\nown :term:`SOURCE_DATE_EPOCH` value::\n\n    SOURCE_DATE_EPOCH = \"1613559011\"\n\n" },
      { name:"SOURCE_MIRROR_FETCH", content:"When you are fetching files to create a mirror of sources (i.e.\ncreating a source mirror), setting :term:`SOURCE_MIRROR_FETCH` to \"1\" in\nyour ``local.conf`` configuration file ensures the source for all\nrecipes are fetched regardless of whether or not a recipe is\ncompatible with the configuration. A recipe is considered\nincompatible with the currently configured machine when either or\nboth the :term:`COMPATIBLE_MACHINE`\nvariable and :term:`COMPATIBLE_HOST` variables\nspecify compatibility with a machine other than that of the current\nmachine or host.\n\n.. note::\n\n   Do not set the :term:`SOURCE_MIRROR_FETCH`\n   variable unless you are creating a source mirror. In other words,\n   do not set the variable during a normal build.\n\n" },
      { name:"SOURCE_MIRROR_URL", content:"Defines your own :term:`PREMIRRORS` from which to\nfirst fetch source before attempting to fetch from the upstream\nspecified in :term:`SRC_URI`.\n\nTo use this variable, you must globally inherit the\n:ref:`ref-classes-own-mirrors` class and then provide\nthe URL to your mirrors. Here is the general syntax::\n\n   INHERIT += \"own-mirrors\"\n   SOURCE_MIRROR_URL = \"http://example.com/my_source_mirror\"\n\n.. note::\n\n   You can specify only a single URL in :term:`SOURCE_MIRROR_URL`.\n\n" },
      { name:"SPDX_ARCHIVE_PACKAGED", content:"This option allows to add to :term:`SPDX` output compressed archives\nof the files in the generated target packages.\n\nSuch archives are available in\n``tmp/deploy/spdx/MACHINE/packages/packagename.tar.zst``\nunder the :term:`Build Directory`.\n\nEnable this option as follows::\n\n   SPDX_ARCHIVE_PACKAGED = \"1\"\n\nAccording to our tests on release 4.1 \"langdale\", building\n``core-image-minimal`` for the ``qemux86-64`` machine, enabling this\noption multiplied the size of the ``tmp/deploy/spdx`` directory by a\nfactor of 13 (+1.6 GiB for this image), compared to just using the\n:ref:`ref-classes-create-spdx` class with no option.\n\nNote that this option doesn't increase the size of :term:`SPDX`\nfiles in ``tmp/deploy/images/MACHINE``.\n\n" },
      { name:"SPDX_ARCHIVE_SOURCES", content:"This option allows to add to :term:`SPDX` output compressed archives\nof the sources for packages installed on the target. It currently\nonly works when :term:`SPDX_INCLUDE_SOURCES` is set.\n\nThis is one way of fulfilling \"source code access\" license\nrequirements.\n\nSuch source archives are available in\n``tmp/deploy/spdx/MACHINE/recipes/recipe-packagename.tar.zst``\nunder the :term:`Build Directory`.\n\nEnable this option as follows::\n\n   SPDX_INCLUDE_SOURCES = \"1\"\n   SPDX_ARCHIVE_SOURCES = \"1\"\n\nAccording to our tests on release 4.1 \"langdale\", building\n``core-image-minimal`` for the ``qemux86-64`` machine, enabling\nthese options multiplied the size of the ``tmp/deploy/spdx``\ndirectory by a factor of 11 (+1.4 GiB for this image),\ncompared to just using the :ref:`ref-classes-create-spdx`\nclass with no option.\n\nNote that using this option only marginally increases the size\nof the :term:`SPDX` output in ``tmp/deploy/images/MACHINE/``\n(+ 0.07\\% with the tested image), compared to just enabling\n:term:`SPDX_INCLUDE_SOURCES`.\n\n" },
      { name:"SPDX_CUSTOM_ANNOTATION_VARS", content:"This option allows to associate `SPDX annotations\n<https://spdx.github.io/spdx-spec/v2.3/annotations/>`__ to a recipe,\nusing the values of variables in the recipe::\n  \n   ANNOTATION1 = \"First annotation for recipe\"\n   ANNOTATION2 = \"Second annotation for recipe\"\n   SPDX_CUSTOM_ANNOTATION_VARS = \"ANNOTATION1 ANNOTATION2\"\n\nThis will add a new block to the recipe ``.sdpx.json`` output::\n\n   \"annotations\": [\n     {\n       \"annotationDate\": \"2023-04-18T08:32:12Z\",\n       \"annotationType\": \"OTHER\",\n       \"annotator\": \"Tool: oe-spdx-creator - 1.0\",\n       \"comment\": \"ANNOTATION1=First annotation for recipe\"\n     },\n     {\n       \"annotationDate\": \"2023-04-18T08:32:12Z\",\n       \"annotationType\": \"OTHER\",\n       \"annotator\": \"Tool: oe-spdx-creator - 1.0\",\n       \"comment\": \"ANNOTATION2=Second annotation for recipe\"\n     }\n   ],\n\n" },
      { name:"SPDX_INCLUDE_SOURCES", content:"This option allows to add a description of the source files used to build\nthe host tools and the target packages, to the ``spdx.json`` files in\n``tmp/deploy/spdx/MACHINE/recipes/`` under the :term:`Build Directory`.\nAs a consequence, the ``spdx.json`` files under the ``by-namespace`` and\n``packages`` subdirectories in ``tmp/deploy/spdx/MACHINE`` are also\nmodified to include references to such source file descriptions.\n\nEnable this option as follows::\n\n   SPDX_INCLUDE_SOURCES = \"1\"\n\nAccording to our tests on release 4.1 \"langdale\", building\n``core-image-minimal`` for the ``qemux86-64`` machine, enabling\nthis option multiplied the total size of the ``tmp/deploy/spdx``\ndirectory by a factor of 3  (+291 MiB for this image),\nand the size of the ``IMAGE-MACHINE.spdx.tar.zst`` in\n``tmp/deploy/images/MACHINE`` by a factor of 130 (+15 MiB for this\nimage), compared to just using the :ref:`ref-classes-create-spdx` class\nwith no option.\n\n" },
      { name:"SPDX_PRETTY", content:"This option makes the SPDX output more human-readable, using\nidentation and newlines, instead of the default output in a\nsingle line::\n\n   SPDX_PRETTY = \"1\"\n\nThe generated SPDX files are approximately 20% bigger, but\nthis option is recommended if you want to inspect the SPDX\noutput files with a text editor.\n\n" },
      { name:"SPDXLICENSEMAP", content:"Maps commonly used license names to their SPDX counterparts found in\n``meta/files/common-licenses/``. For the default :term:`SPDXLICENSEMAP`\nmappings, see the ``meta/conf/licenses.conf`` file.\n\nFor additional information, see the :term:`LICENSE`\nvariable.\n\n" },
      { name:"SPECIAL_PKGSUFFIX", content:"A list of prefixes for :term:`PN` used by the OpenEmbedded\nbuild system to create variants of recipes or packages. The list\nspecifies the prefixes to strip off during certain circumstances such\nas the generation of the :term:`BPN` variable.\n\n" },
      { name:"SPL_BINARY", content:"The file type for the Secondary Program Loader (SPL). Some devices\nuse an SPL from which to boot (e.g. the BeagleBone development\nboard). For such cases, you can declare the file type of the SPL\nbinary in the ``u-boot.inc`` include file, which is used in the\nU-Boot recipe.\n\nThe SPL file type is set to \"null\" by default in the ``u-boot.inc``\nfile as follows::\n\n   # Some versions of u-boot build an SPL (Second Program Loader) image that\n   # should be packaged along with the u-boot binary as well as placed in the\n   # deploy directory. For those versions they can set the following variables\n   # to allow packaging the SPL.\n   SPL_BINARY ?= \"\"\n   SPL_BINARYNAME ?= \"${@os.path.basename(d.getVar(\"SPL_BINARY\"))}\"\n   SPL_IMAGE ?= \"${SPL_BINARYNAME}-${MACHINE}-${PV}-${PR}\"\n   SPL_SYMLINK ?= \"${SPL_BINARYNAME}-${MACHINE}\"\n\nThe :term:`SPL_BINARY` variable helps form\nvarious ``SPL_*`` variables used by the OpenEmbedded build system.\n\nSee the BeagleBone machine configuration example in the\n\":ref:`dev-manual/layers:adding a layer using the \\`\\`bitbake-layers\\`\\` script`\"\nsection in the Yocto Project Board Support Package Developer's Guide\nfor additional information.\n\n" },
      { name:"SRCREV_FORMAT", content:"See :term:`bitbake:SRCREV_FORMAT` in the BitBake manual.\n\n" },
      { name:"SRC_URI", content:"\nSee the BitBake manual for the initial description for this variable:\n:term:`bitbake:SRC_URI`.\n\nThe following features are added by OpenEmbedded and the Yocto Project.\n\nThere are standard and recipe-specific options. Here are standard ones:\n\n-  ``apply`` --- whether to apply the patch or not. The default\n   action is to apply the patch.\n\n-  ``striplevel`` --- which striplevel to use when applying the\n   patch. The default level is 1.\n\n-  ``patchdir`` --- specifies the directory in which the patch should\n   be applied. The default is ``${``\\ :term:`S`\\ ``}``.\n\nHere are options specific to recipes building code from a revision\ncontrol system:\n\n-  ``mindate`` --- apply the patch only if\n   :term:`SRCDATE` is equal to or greater than\n   ``mindate``.\n\n-  ``maxdate`` --- apply the patch only if :term:`SRCDATE` is not later\n   than ``maxdate``.\n\n-  ``minrev`` --- apply the patch only if :term:`SRCREV` is equal to or\n   greater than ``minrev``.\n\n-  ``maxrev`` --- apply the patch only if :term:`SRCREV` is not later\n   than ``maxrev``.\n\n-  ``rev`` --- apply the patch only if :term:`SRCREV` is equal to\n   ``rev``.\n\n-  ``notrev`` --- apply the patch only if :term:`SRCREV` is not equal to\n   ``rev``.\n\n.. note::\n\n   If you want the build system to pick up files specified through\n   a :term:`SRC_URI` statement from your append file, you need to be\n   sure to extend the :term:`FILESPATH` variable by also using the\n   :term:`FILESEXTRAPATHS` variable from within your append file.\n\n" },
      { name:"SRC_URI_OVERRIDES_PACKAGE_ARCH", content:"By default, the OpenEmbedded build system automatically detects\nwhether :term:`SRC_URI` contains files that are machine-specific. If so,\nthe build system automatically changes :term:`PACKAGE_ARCH`. Setting this\nvariable to \"0\" disables this behavior.\n\n" },
      { name:"SRCDATE", content:"The date of the source code used to build the package. This variable\napplies only if the source was fetched from a Source Code Manager\n(SCM).\n\n" },
      { name:"SRCPV", content:"Returns the version string of the current package. This string is\nused to help define the value of :term:`PV`.\n\nThe :term:`SRCPV` variable is defined in the ``meta/conf/bitbake.conf``\nconfiguration file in the :term:`Source Directory` as\nfollows::\n\n   SRCPV = \"${@bb.fetch2.get_srcrev(d)}\"\n\nRecipes that need to define :term:`PV` do so with the help of the\n:term:`SRCPV`. For example, the ``ofono`` recipe (``ofono_git.bb``)\nlocated in ``meta/recipes-connectivity`` in the Source Directory\ndefines :term:`PV` as follows::\n\n   PV = \"0.12-git${SRCPV}\"\n\n" },
      { name:"SRCREV", content:"The revision of the source code used to build the package. This\nvariable applies to Subversion, Git, Mercurial, and Bazaar only. Note\nthat if you want to build a fixed revision and you want to avoid\nperforming a query on the remote repository every time BitBake parses\nyour recipe, you should specify a :term:`SRCREV` that is a full revision\nidentifier (e.g. the full SHA hash in git) and not just a tag.\n\n.. note::\n\n   For information on limitations when inheriting the latest revision\n   of software using :term:`SRCREV`, see the :term:`AUTOREV` variable\n   description and the\n   \":ref:`dev-manual/packages:automatically incrementing a package version number`\"\n   section, which is in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"SRCTREECOVEREDTASKS", content:"A list of tasks that are typically not relevant (and therefore skipped)\nwhen building using the :ref:`ref-classes-externalsrc`\nclass. The default value as set in that class file is the set of tasks\nthat are rarely needed when using external source::\n\n   SRCTREECOVEREDTASKS ?= \"do_patch do_unpack do_fetch\"\n\nThe notable exception is when processing external kernel source as\ndefined in the :ref:`ref-classes-kernel-yocto` class file (formatted for\naesthetics)::\n\n   SRCTREECOVEREDTASKS += \"\\\n     do_validate_branches \\\n     do_kernel_configcheck \\\n     do_kernel_checkout \\\n     do_fetch \\\n     do_unpack \\\n     do_patch \\\n   \"\n\nSee the associated :term:`EXTERNALSRC` and :term:`EXTERNALSRC_BUILD`\nvariables for more information.\n\n" },
      { name:"SSTATE_DIR", content:"The directory for the shared state cache.\n\n" },
      { name:"SSTATE_EXCLUDEDEPS_SYSROOT", content:"This variable allows to specify indirect dependencies to exclude\nfrom sysroots, for example to avoid the situations when a dependency on\nany ``-native`` recipe will pull in all dependencies of that recipe\nin the recipe sysroot. This behaviour might not always be wanted,\nfor example when that ``-native`` recipe depends on build tools\nthat are not relevant for the current recipe.\n\nThis way, irrelevant dependencies are ignored, which could have\nprevented the reuse of prebuilt artifacts stored in the Shared\nState Cache.\n\n:term:`SSTATE_EXCLUDEDEPS_SYSROOT` is evaluated as two regular\nexpressions of recipe and dependency to ignore. An example\nis the rule in :oe_git:`meta/conf/layer.conf </openembedded-core/tree/meta/conf/layer.conf>`::\n\n   # Nothing needs to depend on libc-initial\n   # base-passwd/shadow-sysroot don't need their dependencies\n   SSTATE_EXCLUDEDEPS_SYSROOT += \"\\\n       .*->.*-initial.* \\\n       .*(base-passwd|shadow-sysroot)->.* \\\n   \"\n\nThe ``->`` substring represents the dependency between\nthe two regular expressions.\n\n" },
      { name:"SSTATE_MIRROR_ALLOW_NETWORK", content:"If set to \"1\", allows fetches from mirrors that are specified in\n:term:`SSTATE_MIRRORS` to work even when\nfetching from the network is disabled by setting :term:`BB_NO_NETWORK` to\n\"1\". Using the :term:`SSTATE_MIRROR_ALLOW_NETWORK` variable is useful if\nyou have set :term:`SSTATE_MIRRORS` to point to an internal server for\nyour shared state cache, but you want to disable any other fetching\nfrom the network.\n\n" },
      { name:"SSTATE_MIRRORS", content:"Configures the OpenEmbedded build system to search other mirror\nlocations for prebuilt cache data objects before building out the\ndata. This variable works like fetcher :term:`MIRRORS`\nand :term:`PREMIRRORS` and points to the cache\nlocations to check for the shared state (sstate) objects.\n\nYou can specify a filesystem directory or a remote URL such as HTTP\nor FTP. The locations you specify need to contain the shared state\ncache (sstate-cache) results from previous builds. The sstate-cache\nyou point to can also be from builds on other machines.\n\nWhen pointing to sstate build artifacts on another machine that uses\na different GCC version for native builds, you must configure\n:term:`SSTATE_MIRRORS` with a regular expression that maps local search\npaths to server paths. The paths need to take into account\n:term:`NATIVELSBSTRING` set by the :ref:`ref-classes-uninative` class.\nFor example, the following maps the local search path ``universal-4.9``\nto the server-provided path server_url_sstate_path::\n\n   SSTATE_MIRRORS ?= \"file://universal-4.9/(.*) https://server_url_sstate_path/universal-4.8/\\1\"\n\nIf a mirror uses the same structure as\n:term:`SSTATE_DIR`, you need to add \"PATH\" at the\nend as shown in the examples below. The build system substitutes the\ncorrect path within the directory structure::\n\n   SSTATE_MIRRORS ?= \"\\\n       file://.* https://someserver.tld/share/sstate/PATH;downloadfilename=PATH \\\n       file://.* file:///some-local-dir/sstate/PATH\"\n\n" },
      { name:"SSTATE_SCAN_FILES", content:"Controls the list of files the OpenEmbedded build system scans for\nhardcoded installation paths. The variable uses a space-separated\nlist of filenames (not paths) with standard wildcard characters\nallowed.\n\nDuring a build, the OpenEmbedded build system creates a shared state\n(sstate) object during the first stage of preparing the sysroots.\nThat object is scanned for hardcoded paths for original installation\nlocations. The list of files that are scanned for paths is controlled\nby the :term:`SSTATE_SCAN_FILES` variable. Typically, recipes add files\nthey want to be scanned to the value of :term:`SSTATE_SCAN_FILES` rather\nthan the variable being comprehensively set. The\n:ref:`ref-classes-sstate` class specifies the default list of files.\n\nFor details on the process, see the :ref:`ref-classes-staging` class.\n\n" },
      { name:"STAGING_BASE_LIBDIR_NATIVE", content:"Specifies the path to the ``/lib`` subdirectory of the sysroot\ndirectory for the build host.\n\n" },
      { name:"STAGING_BASELIBDIR", content:"Specifies the path to the ``/lib`` subdirectory of the sysroot\ndirectory for the target for which the current recipe is being built\n(:term:`STAGING_DIR_HOST`).\n\n" },
      { name:"STAGING_BINDIR", content:"Specifies the path to the ``/usr/bin`` subdirectory of the sysroot\ndirectory for the target for which the current recipe is being built\n(:term:`STAGING_DIR_HOST`).\n\n" },
      { name:"STAGING_BINDIR_CROSS", content:"Specifies the path to the directory containing binary configuration\nscripts. These scripts provide configuration information for other\nsoftware that wants to make use of libraries or include files\nprovided by the software associated with the script.\n\n.. note::\n\n   This style of build configuration has been largely replaced by\n   ``pkg-config``. Consequently, if ``pkg-config`` is supported by the\n   library to which you are linking, it is recommended you use\n   ``pkg-config`` instead of a provided configuration script.\n\n" },
      { name:"STAGING_BINDIR_NATIVE", content:"Specifies the path to the ``/usr/bin`` subdirectory of the sysroot\ndirectory for the build host.\n\n" },
      { name:"STAGING_DATADIR", content:"Specifies the path to the ``/usr/share`` subdirectory of the sysroot\ndirectory for the target for which the current recipe is being built\n(:term:`STAGING_DIR_HOST`).\n\n" },
      { name:"STAGING_DATADIR_NATIVE", content:"Specifies the path to the ``/usr/share`` subdirectory of the sysroot\ndirectory for the build host.\n\n" },
      { name:"STAGING_DIR", content:"Helps construct the ``recipe-sysroots`` directory, which is used\nduring packaging.\n\nFor information on how staging for recipe-specific sysroots occurs,\nsee the :ref:`ref-tasks-populate_sysroot`\ntask, the \":ref:`sdk-manual/extensible:sharing files between recipes`\"\nsection in the Yocto Project Development Tasks Manual, the\n\":ref:`overview-manual/concepts:configuration, compilation, and staging`\"\nsection in the Yocto Project Overview and Concepts Manual, and the\n:term:`SYSROOT_DIRS` variable.\n\n.. note::\n\n   Recipes should never write files directly under the :term:`STAGING_DIR`\n   directory because the OpenEmbedded build system manages the\n   directory automatically. Instead, files should be installed to\n   ``${``\\ :term:`D`\\ ``}`` within your recipe's :ref:`ref-tasks-install`\n   task and then the OpenEmbedded build system will stage a subset of\n   those files into the sysroot.\n\n" },
      { name:"STAGING_DIR_HOST", content:"Specifies the path to the sysroot directory for the system on which\nthe component is built to run (the system that hosts the component).\nFor most recipes, this sysroot is the one in which that recipe's\n:ref:`ref-tasks-populate_sysroot` task copies\nfiles. Exceptions include ``-native`` recipes, where the\n:ref:`ref-tasks-populate_sysroot` task instead uses\n:term:`STAGING_DIR_NATIVE`. Depending on\nthe type of recipe and the build target, :term:`STAGING_DIR_HOST` can\nhave the following values:\n\n-  For recipes building for the target machine, the value is\n   \"${:term:`STAGING_DIR`}/${:term:`MACHINE`}\".\n\n-  For native recipes building for the build host, the value is empty\n   given the assumption that when building for the build host, the\n   build host's own directories should be used.\n\n   .. note::\n\n      ``-native`` recipes are not installed into host paths like such\n      as ``/usr``. Rather, these recipes are installed into\n      :term:`STAGING_DIR_NATIVE`. When compiling ``-native`` recipes,\n      standard build environment variables such as\n      :term:`CPPFLAGS` and\n      :term:`CFLAGS` are set up so that both host paths\n      and :term:`STAGING_DIR_NATIVE` are searched for libraries and\n      headers using, for example, GCC's ``-isystem`` option.\n\n      Thus, the emphasis is that the ``STAGING_DIR*`` variables\n      should be viewed as input variables by tasks such as\n      :ref:`ref-tasks-configure`,\n      :ref:`ref-tasks-compile`, and\n      :ref:`ref-tasks-install`. Having the real system\n      root correspond to :term:`STAGING_DIR_HOST` makes conceptual sense\n      for ``-native`` recipes, as they make use of host headers and\n      libraries.\n\n" },
      { name:"STAGING_DIR_NATIVE", content:"Specifies the path to the sysroot directory used when building\ncomponents that run on the build host itself.\n\n" },
      { name:"STAGING_DIR_TARGET", content:"Specifies the path to the sysroot used for the system for which the\ncomponent generates code. For components that do not generate code,\nwhich is the majority, :term:`STAGING_DIR_TARGET` is set to match\n:term:`STAGING_DIR_HOST`.\n\nSome recipes build binaries that can run on the target system but those\nbinaries in turn generate code for another different system (e.g.\n:ref:`ref-classes-cross-canadian` recipes). Using terminology from GNU,\nthe primary system is referred to as the \"HOST\" and the secondary, or\ndifferent, system is referred to as the \"TARGET\". Thus, the binaries\nrun on the \"HOST\" system and generate binaries for the \"TARGET\"\nsystem. The :term:`STAGING_DIR_HOST` variable points to the sysroot used\nfor the \"HOST\" system, while :term:`STAGING_DIR_TARGET` points to the\nsysroot used for the \"TARGET\" system.\n\n" },
      { name:"STAGING_ETCDIR_NATIVE", content:"Specifies the path to the ``/etc`` subdirectory of the sysroot\ndirectory for the build host.\n\n" },
      { name:"STAGING_EXECPREFIXDIR", content:"Specifies the path to the ``/usr`` subdirectory of the sysroot\ndirectory for the target for which the current recipe is being built\n(:term:`STAGING_DIR_HOST`).\n\n" },
      { name:"STAGING_INCDIR", content:"Specifies the path to the ``/usr/include`` subdirectory of the\nsysroot directory for the target for which the current recipe being\nbuilt (:term:`STAGING_DIR_HOST`).\n\n" },
      { name:"STAGING_INCDIR_NATIVE", content:"Specifies the path to the ``/usr/include`` subdirectory of the\nsysroot directory for the build host.\n\n" },
      { name:"STAGING_KERNEL_BUILDDIR", content:"Points to the directory containing the kernel build artifacts.\nRecipes building software that needs to access kernel build artifacts\n(e.g. ``systemtap-uprobes``) can look in the directory specified with\nthe :term:`STAGING_KERNEL_BUILDDIR` variable to find these artifacts\nafter the kernel has been built.\n\n" },
      { name:"STAGING_KERNEL_DIR", content:"The directory with kernel headers that are required to build\nout-of-tree modules.\n\n" },
      { name:"STAGING_LIBDIR", content:"Specifies the path to the ``/usr/lib`` subdirectory of the sysroot\ndirectory for the target for which the current recipe is being built\n(:term:`STAGING_DIR_HOST`).\n\n" },
      { name:"STAGING_LIBDIR_NATIVE", content:"Specifies the path to the ``/usr/lib`` subdirectory of the sysroot\ndirectory for the build host.\n\n" },
      { name:"STAMP", content:"Specifies the base path used to create recipe stamp files. The path\nto an actual stamp file is constructed by evaluating this string and\nthen appending additional information. Currently, the default\nassignment for :term:`STAMP` as set in the ``meta/conf/bitbake.conf``\nfile is::\n\n   STAMP = \"${STAMPS_DIR}/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}\"\n\nFor information on how BitBake uses stamp files to determine if a\ntask should be rerun, see the\n\":ref:`overview-manual/concepts:stamp files and the rerunning of tasks`\"\nsection in the Yocto Project Overview and Concepts Manual.\n\nSee :term:`STAMPS_DIR`,\n:term:`MULTIMACH_TARGET_SYS`,\n:term:`PN`, :term:`EXTENDPE`,\n:term:`PV`, and :term:`PR` for related variable\ninformation.\n\n" },
      { name:"STAMPCLEAN", content:"See :term:`bitbake:STAMPCLEAN` in the BitBake manual.\n\n" },
      { name:"STAMPS_DIR", content:"Specifies the base directory in which the OpenEmbedded build system\nplaces stamps. The default directory is ``${TMPDIR}/stamps``.\n\n" },
      { name:"STRIP", content:"The minimal command and arguments to run ``strip``, which is used to\nstrip symbols.\n\n" },
      { name:"SUMMARY", content:"The short (72 characters or less) summary of the binary package for\npackaging systems such as ``opkg``, ``rpm``, or ``dpkg``. By default,\n:term:`SUMMARY` is used to define the\n:term:`DESCRIPTION` variable if :term:`DESCRIPTION` is\nnot set in the recipe.\n\n" },
      { name:"SVNDIR", content:"The directory in which files checked out of a Subversion system are\nstored.\n\n" },
      { name:"SYSLINUX_DEFAULT_CONSOLE", content:"Specifies the kernel boot default console. If you want to use a\nconsole other than the default, set this variable in your recipe as\nfollows where \"X\" is the console number you want to use::\n\n   SYSLINUX_DEFAULT_CONSOLE = \"console=ttyX\"\n\nThe :ref:`ref-classes-syslinux` class initially sets\nthis variable to null but then checks for a value later.\n\n" },
      { name:"SYSLINUX_OPTS", content:"Lists additional options to add to the syslinux file. You need to set\nthis variable in your recipe. If you want to list multiple options,\nseparate the options with a semicolon character (``;``).\n\nThe :ref:`ref-classes-syslinux` class uses this variable\nto create a set of options.\n\n" },
      { name:"SYSLINUX_SERIAL", content:"Specifies the alternate serial port or turns it off. To turn off\nserial, set this variable to an empty string in your recipe. The\nvariable's default value is set in the\n:ref:`ref-classes-syslinux` class as follows::\n\n   SYSLINUX_SERIAL ?= \"0 115200\"\n\nThe class checks for and uses the variable as needed.\n\n" },
      { name:"SYSLINUX_SERIAL_TTY", content:"Specifies the alternate console=tty... kernel boot argument. The\nvariable's default value is set in the :ref:`ref-classes-syslinux`\nclass as follows::\n\n   SYSLINUX_SERIAL_TTY ?= \"console=ttyS0,115200\"\n\nThe class checks for and uses the variable as needed.\n\n" },
      { name:"SYSLINUX_SPLASH", content:"An ``.LSS`` file used as the background for the VGA boot menu when\nyou use the boot menu. You need to set this variable in your recipe.\n\nThe :ref:`ref-classes-syslinux` class checks for this\nvariable and if found, the OpenEmbedded build system installs the\nsplash screen.\n\n" },
      { name:"SYSROOT_DESTDIR", content:"Points to the temporary directory under the work directory (default\n\"``${``\\ :term:`WORKDIR`\\ ``}/sysroot-destdir``\")\nwhere the files populated into the sysroot are assembled during the\n:ref:`ref-tasks-populate_sysroot` task.\n\n" },
      { name:"SYSROOT_DIRS", content:"Directories that are staged into the sysroot by the\n:ref:`ref-tasks-populate_sysroot` task. By\ndefault, the following directories are staged::\n\n   SYSROOT_DIRS = \" \\\n       ${includedir} \\\n       ${libdir} \\\n       ${base_libdir} \\\n       ${nonarch_base_libdir} \\\n       ${datadir} \\\n       /sysroot-only \\\n       \"\n\n" },
      { name:"SYSROOT_DIRS_IGNORE", content:"Directories that are not staged into the sysroot by the\n:ref:`ref-tasks-populate_sysroot` task. You\ncan use this variable to exclude certain subdirectories of\ndirectories listed in :term:`SYSROOT_DIRS` from\nstaging. By default, the following directories are not staged::\n\n   SYSROOT_DIRS_IGNORE = \" \\\n       ${mandir} \\\n       ${docdir} \\\n       ${infodir} \\\n       ${datadir}/X11/locale \\\n       ${datadir}/applications \\\n       ${datadir}/bash-completion \\\n       ${datadir}/fonts \\\n       ${datadir}/gtk-doc/html \\\n       ${datadir}/installed-tests \\\n       ${datadir}/locale \\\n       ${datadir}/pixmaps \\\n       ${datadir}/terminfo \\\n       ${libdir}/${BPN}/ptest \\\n       \"\n\n" },
      { name:"SYSROOT_DIRS_NATIVE", content:"Extra directories staged into the sysroot by the\n:ref:`ref-tasks-populate_sysroot` task for\n``-native`` recipes, in addition to those specified in\n:term:`SYSROOT_DIRS`. By default, the following\nextra directories are staged::\n\n   SYSROOT_DIRS_NATIVE = \" \\\n       ${bindir} \\\n       ${sbindir} \\\n       ${base_bindir} \\\n       ${base_sbindir} \\\n       ${libexecdir} \\\n       ${sysconfdir} \\\n       ${localstatedir} \\\n       \"\n\n.. note::\n\n   Programs built by ``-native`` recipes run directly from the sysroot\n   (:term:`STAGING_DIR_NATIVE`), which is why additional directories\n   containing program executables and supporting files need to be staged.\n\n" },
      { name:"SYSROOT_PREPROCESS_FUNCS", content:"A list of functions to execute after files are staged into the\nsysroot. These functions are usually used to apply additional\nprocessing on the staged files, or to stage additional files.\n\n" },
      { name:"SYSTEMD_AUTO_ENABLE", content:"When inheriting the :ref:`ref-classes-systemd` class,\nthis variable specifies whether the specified service in\n:term:`SYSTEMD_SERVICE` should start\nautomatically or not. By default, the service is enabled to\nautomatically start at boot time. The default setting is in the\n:ref:`ref-classes-systemd` class as follows::\n\n   SYSTEMD_AUTO_ENABLE ??= \"enable\"\n\nYou can disable the service by setting the variable to \"disable\".\n\n" },
      { name:"SYSTEMD_BOOT_CFG", content:"When :term:`EFI_PROVIDER` is set to\n\"systemd-boot\", the :term:`SYSTEMD_BOOT_CFG` variable specifies the\nconfiguration file that should be used. By default, the\n:ref:`ref-classes-systemd-boot` class sets the\n:term:`SYSTEMD_BOOT_CFG` as follows::\n\n   SYSTEMD_BOOT_CFG ?= \"${S}/loader.conf\"\n\nFor information on Systemd-boot, see the `Systemd-boot\ndocumentation <https://www.freedesktop.org/wiki/Software/systemd/systemd-boot/>`__.\n\n" },
      { name:"SYSTEMD_BOOT_ENTRIES", content:"When :term:`EFI_PROVIDER` is set to\n\"systemd-boot\", the :term:`SYSTEMD_BOOT_ENTRIES` variable specifies a\nlist of entry files (``*.conf``) to install that contain one boot\nentry per file. By default, the :ref:`ref-classes-systemd-boot` class\nsets the :term:`SYSTEMD_BOOT_ENTRIES` as follows::\n\n    SYSTEMD_BOOT_ENTRIES ?= \"\"\n\nFor information on Systemd-boot, see the `Systemd-boot\ndocumentation <https://www.freedesktop.org/wiki/Software/systemd/systemd-boot/>`__.\n\n" },
      { name:"SYSTEMD_BOOT_TIMEOUT", content:"When :term:`EFI_PROVIDER` is set to\n\"systemd-boot\", the :term:`SYSTEMD_BOOT_TIMEOUT` variable specifies the\nboot menu timeout in seconds. By default, the\n:ref:`ref-classes-systemd-boot` class sets the\n:term:`SYSTEMD_BOOT_TIMEOUT` as follows::\n\n   SYSTEMD_BOOT_TIMEOUT ?= \"10\"\n\nFor information on Systemd-boot, see the `Systemd-boot\ndocumentation <https://www.freedesktop.org/wiki/Software/systemd/systemd-boot/>`__.\n\n" },
      { name:"SYSTEMD_DEFAULT_TARGET", content:"\nThis variable allows to set the default unit that systemd starts at bootup.\nUsually, this is either ``multi-user.target`` or ``graphical.target``.\nThis works by creating a ``default.target`` symbolic link to the chosen systemd\ntarget file.\n\nSee `systemd's documentation\n<https://www.freedesktop.org/software/systemd/man/systemd.special.html>`__\nfor details.\n\nFor example, this variable is used in the :oe_git:`core-image-minimal-xfce.bb\n</meta-openembedded/tree/meta-xfce/recipes-core/images/core-image-minimal-xfce.bb>`\nrecipe::\n\n    SYSTEMD_DEFAULT_TARGET = \"graphical.target\"\n\n" },
      { name:"SYSTEMD_PACKAGES", content:"When inheriting the :ref:`ref-classes-systemd` class,\nthis variable locates the systemd unit files when they are not found\nin the main recipe's package. By default, the :term:`SYSTEMD_PACKAGES`\nvariable is set such that the systemd unit files are assumed to\nreside in the recipes main package::\n\n   SYSTEMD_PACKAGES ?= \"${PN}\"\n\nIf these unit files are not in this recipe's main package, you need\nto use :term:`SYSTEMD_PACKAGES` to list the package or packages in which\nthe build system can find the systemd unit files.\n\n" },
      { name:"SYSTEMD_SERVICE", content:"When inheriting the :ref:`ref-classes-systemd` class,\nthis variable specifies the systemd service name for a package.\n\nMultiple services can be specified, each one separated by a space.\n\nWhen you specify this file in your recipe, use a package name\noverride to indicate the package to which the value applies. Here is\nan example from the connman recipe::\n\n   SYSTEMD_SERVICE:${PN} = \"connman.service\"\n\nThe package overrides that can be specified are directly related to the value of\n:term:`SYSTEMD_PACKAGES`. Overrides not included in :term:`SYSTEMD_PACKAGES`\nwill be silently ignored.\n\n" },
      { name:"SYSVINIT_ENABLED_GETTYS", content:"When using :ref:`SysVinit <dev-manual/new-recipe:enabling system services>`,\nspecifies a space-separated list of the virtual terminals that should\nrun a :wikipedia:`getty <Getty_(Unix)>` (allowing login), assuming\n:term:`USE_VT` is not set to \"0\".\n\nThe default value for :term:`SYSVINIT_ENABLED_GETTYS` is \"1\" (i.e. only\nrun a getty on the first virtual terminal).\n\n" },
      { name:"T", content:"This variable points to a directory were BitBake places temporary\nfiles, which consist mostly of task logs and scripts, when building a\nparticular recipe. The variable is typically set as follows::\n\n   T = \"${WORKDIR}/temp\"\n\nThe :term:`WORKDIR` is the directory into which\nBitBake unpacks and builds the recipe. The default ``bitbake.conf``\nfile sets this variable.\n\nThe :term:`T` variable is not to be confused with the\n:term:`TMPDIR` variable, which points to the root of\nthe directory tree where BitBake places the output of an entire\nbuild.\n\n" },
      { name:"TARGET_ARCH", content:"The target machine's architecture. The OpenEmbedded build system\nsupports many architectures. Here is an example list of architectures\nsupported. This list is by no means complete as the architecture is\nconfigurable:\n\n- arm\n- i586\n- x86_64\n- powerpc\n- powerpc64\n- mips\n- mipsel\n\nFor additional information on machine architectures, see the\n:term:`TUNE_ARCH` variable.\n\n" },
      { name:"TARGET_AS_ARCH", content:"Specifies architecture-specific assembler flags for the target\nsystem. :term:`TARGET_AS_ARCH` is initialized from\n:term:`TUNE_ASARGS` by default in the BitBake\nconfiguration file (``meta/conf/bitbake.conf``)::\n\n   TARGET_AS_ARCH = \"${TUNE_ASARGS}\"\n\n" },
      { name:"TARGET_CC_ARCH", content:"Specifies architecture-specific C compiler flags for the target\nsystem. :term:`TARGET_CC_ARCH` is initialized from\n:term:`TUNE_CCARGS` by default.\n\n.. note::\n\n   It is a common workaround to append :term:`LDFLAGS` to\n   :term:`TARGET_CC_ARCH` in recipes that build software for the target that\n   would not otherwise respect the exported :term:`LDFLAGS` variable.\n\n" },
      { name:"TARGET_CC_KERNEL_ARCH", content:"This is a specific kernel compiler flag for a CPU or Application\nBinary Interface (ABI) tune. The flag is used rarely and only for\ncases where a userspace :term:`TUNE_CCARGS` is not\ncompatible with the kernel compilation. The :term:`TARGET_CC_KERNEL_ARCH`\nvariable allows the kernel (and associated modules) to use a\ndifferent configuration. See the\n``meta/conf/machine/include/arm/feature-arm-thumb.inc`` file in the\n:term:`Source Directory` for an example.\n\n" },
      { name:"TARGET_CFLAGS", content:"Specifies the flags to pass to the C compiler when building for the\ntarget. When building in the target context,\n:term:`CFLAGS` is set to the value of this variable by\ndefault.\n\nAdditionally, the SDK's environment setup script sets the :term:`CFLAGS`\nvariable in the environment to the :term:`TARGET_CFLAGS` value so that\nexecutables built using the SDK also have the flags applied.\n\n" },
      { name:"TARGET_CPPFLAGS", content:"Specifies the flags to pass to the C pre-processor (i.e. to both the\nC and the C++ compilers) when building for the target. When building\nin the target context, :term:`CPPFLAGS` is set to the\nvalue of this variable by default.\n\nAdditionally, the SDK's environment setup script sets the\n:term:`CPPFLAGS` variable in the environment to the :term:`TARGET_CPPFLAGS`\nvalue so that executables built using the SDK also have the flags\napplied.\n\n" },
      { name:"TARGET_CXXFLAGS", content:"Specifies the flags to pass to the C++ compiler when building for the\ntarget. When building in the target context,\n:term:`CXXFLAGS` is set to the value of this variable\nby default.\n\nAdditionally, the SDK's environment setup script sets the\n:term:`CXXFLAGS` variable in the environment to the :term:`TARGET_CXXFLAGS`\nvalue so that executables built using the SDK also have the flags\napplied.\n\n" },
      { name:"TARGET_FPU", content:"Specifies the method for handling FPU code. For FPU-less targets,\nwhich include most ARM CPUs, the variable must be set to \"soft\". If\nnot, the kernel emulation gets used, which results in a performance\npenalty.\n\n" },
      { name:"TARGET_LD_ARCH", content:"Specifies architecture-specific linker flags for the target system.\n:term:`TARGET_LD_ARCH` is initialized from\n:term:`TUNE_LDARGS` by default in the BitBake\nconfiguration file (``meta/conf/bitbake.conf``)::\n\n   TARGET_LD_ARCH = \"${TUNE_LDARGS}\"\n\n" },
      { name:"TARGET_LDFLAGS", content:"Specifies the flags to pass to the linker when building for the\ntarget. When building in the target context,\n:term:`LDFLAGS` is set to the value of this variable\nby default.\n\nAdditionally, the SDK's environment setup script sets the\n:term:`LDFLAGS` variable in the environment to the\n:term:`TARGET_LDFLAGS` value so that executables built using the SDK also\nhave the flags applied.\n\n" },
      { name:"TARGET_OS", content:"Specifies the target's operating system. The variable can be set to\n\"linux\" for glibc-based systems (GNU C Library) and to \"linux-musl\"\nfor musl libc. For ARM/EABI targets, the possible values are\n\"linux-gnueabi\" and \"linux-musleabi\".\n\n" },
      { name:"TARGET_PREFIX", content:"Specifies the prefix used for the toolchain binary target tools.\n\nDepending on the type of recipe and the build target,\n:term:`TARGET_PREFIX` is set as follows:\n\n-  For recipes building for the target machine, the value is\n   \"${:term:`TARGET_SYS`}-\".\n\n-  For native recipes, the build system sets the variable to the\n   value of :term:`BUILD_PREFIX`.\n\n-  For native SDK recipes (:ref:`ref-classes-nativesdk`),\n   the build system sets the variable to the value of :term:`SDK_PREFIX`.\n\n" },
      { name:"TARGET_SYS", content:"Specifies the system, including the architecture and the operating\nsystem, for which the build is occurring in the context of the\ncurrent recipe.\n\nThe OpenEmbedded build system automatically sets this variable based\non :term:`TARGET_ARCH`,\n:term:`TARGET_VENDOR`, and\n:term:`TARGET_OS` variables.\n\n.. note::\n\n   You do not need to set the :term:`TARGET_SYS` variable yourself.\n\nConsider these two examples:\n\n-  Given a native recipe on a 32-bit, x86 machine running Linux, the\n   value is \"i686-linux\".\n\n-  Given a recipe being built for a little-endian, MIPS target\n   running Linux, the value might be \"mipsel-linux\".\n\n" },
      { name:"TARGET_VENDOR", content:"Specifies the name of the target vendor.\n\n" },
      { name:"TCLIBC", content:"Specifies the GNU standard C library (``libc``) variant to use during\nthe build process.\n\nYou can select \"glibc\", \"musl\", \"newlib\", or \"baremetal\".\n\n" },
      { name:"TCLIBCAPPEND", content:"Specifies a suffix to be appended onto the :term:`TMPDIR` value. The\nsuffix identifies the ``libc`` variant for building. When you are\nbuilding for multiple variants with the same :term:`Build Directory`,\nthis mechanism ensures that output for different ``libc`` variants is\nkept separate to avoid potential conflicts.\n\nIn the ``defaultsetup.conf`` file, the default value of\n:term:`TCLIBCAPPEND` is \"-${TCLIBC}\". However, distros such as poky,\nwhich normally only support one ``libc`` variant, set\n:term:`TCLIBCAPPEND` to \"\" in their distro configuration file resulting\nin no suffix being applied.\n\n" },
      { name:"TCMODE", content:"Specifies the toolchain selector. :term:`TCMODE` controls the\ncharacteristics of the generated packages and images by telling the\nOpenEmbedded build system which toolchain profile to use. By default,\nthe OpenEmbedded build system builds its own internal toolchain. The\nvariable's default value is \"default\", which uses that internal\ntoolchain.\n\n.. note::\n\n   If :term:`TCMODE` is set to a value other than \"default\", then it is your\n   responsibility to ensure that the toolchain is compatible with the\n   default toolchain. Using older or newer versions of these\n   components might cause build problems. See\n   :doc:`Release Information </migration-guides/index>` for your\n   version of the Yocto Project, to find the specific components with\n   which the toolchain must be compatible.\n\nThe :term:`TCMODE` variable is similar to :term:`TCLIBC`,\nwhich controls the variant of the GNU standard C library (``libc``)\nused during the build process: ``glibc`` or ``musl``.\n\nWith additional layers, it is possible to use a pre-compiled external\ntoolchain. One example is the Sourcery G++ Toolchain. The support for\nthis toolchain resides in the separate Mentor Graphics\n``meta-sourcery`` layer at\nhttps://github.com/MentorEmbedded/meta-sourcery/.\n\nThe layer's ``README`` file contains information on how to use the\nSourcery G++ Toolchain as an external toolchain. You will have to\nadd the layer to your ``bblayers.conf`` file and then set the\n:term:`EXTERNAL_TOOLCHAIN` variable in your ``local.conf`` file to\nthe location of the toolchain.\n\nThe fundamentals used for this example apply to any external\ntoolchain. You can use ``meta-sourcery`` as a template for adding\nsupport for other external toolchains.\n\nIn addition to toolchain configuration, you will also need a\ncorresponding toolchain recipe file. This recipe file needs to package\nup any pre-built objects in the toolchain such as ``libgcc``,\n``libstdcc++``, any locales, and ``libc``.\n\n" },
      { name:"TC_CXX_RUNTIME", content:"Specifies the C/C++ STL and runtime variant to use during\nthe build process. Default value is 'gnu'\n\nYou can select \"gnu\", \"llvm\", or \"android\".\n\n" },
      { name:"TEMPLATECONF", content:"Specifies the directory used by the build system to find templates\nfrom which to build the ``bblayers.conf`` and ``local.conf`` files.\nUse this variable if you wish to customize such files, and the default\nBitBake targets shown when sourcing the ``oe-init-build-env`` script.\n\nFor details, see the\n:ref:`dev-manual/custom-template-configuration-directory:creating a custom template configuration directory`\nsection in the Yocto Project Development Tasks manual.\n\n.. note::\n\n   You must set this variable in the external environment in order\n   for it to work.\n\n" },
      { name:"TEST_EXPORT_DIR", content:"The location the OpenEmbedded build system uses to export tests when\nthe :term:`TEST_EXPORT_ONLY` variable is set\nto \"1\".\n\nThe :term:`TEST_EXPORT_DIR` variable defaults to\n``\"${TMPDIR}/testimage/${PN}\"``.\n\n" },
      { name:"TEST_EXPORT_ONLY", content:"Specifies to export the tests only. Set this variable to \"1\" if you\ndo not want to run the tests but you want them to be exported in a\nmanner that you to run them outside of the build system.\n\n" },
      { name:"TEST_LOG_DIR", content:"Holds the SSH log and the boot log for QEMU machines. The\n:term:`TEST_LOG_DIR` variable defaults to ``\"${WORKDIR}/testimage\"``.\n\n.. note::\n\n   Actual test results reside in the task log (``log.do_testimage``),\n   which is in the ``${WORKDIR}/temp/`` directory.\n\n" },
      { name:"TEST_POWERCONTROL_CMD", content:"For automated hardware testing, specifies the command to use to\ncontrol the power of the target machine under test. Typically, this\ncommand would point to a script that performs the appropriate action\n(e.g. interacting with a web-enabled power strip). The specified\ncommand should expect to receive as the last argument \"off\", \"on\" or\n\"cycle\" specifying to power off, on, or cycle (power off and then\npower on) the device, respectively.\n\n" },
      { name:"TEST_POWERCONTROL_EXTRA_ARGS", content:"For automated hardware testing, specifies additional arguments to\npass through to the command specified in\n:term:`TEST_POWERCONTROL_CMD`. Setting\n:term:`TEST_POWERCONTROL_EXTRA_ARGS` is optional. You can use it if you\nwish, for example, to separate the machine-specific and\nnon-machine-specific parts of the arguments.\n\n" },
      { name:"TEST_QEMUBOOT_TIMEOUT", content:"The time in seconds allowed for an image to boot before automated\nruntime tests begin to run against an image. The default timeout\nperiod to allow the boot process to reach the login prompt is 500\nseconds. You can specify a different value in the ``local.conf``\nfile.\n\nFor more information on testing images, see the\n\":ref:`dev-manual/runtime-testing:performing automated runtime testing`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"TEST_SERIALCONTROL_CMD", content:"For automated hardware testing, specifies the command to use to\nconnect to the serial console of the target machine under test. This\ncommand simply needs to connect to the serial console and forward\nthat connection to standard input and output as any normal terminal\nprogram does.\n\nFor example, to use the Picocom terminal program on serial device\n``/dev/ttyUSB0`` at 115200bps, you would set the variable as follows::\n\n   TEST_SERIALCONTROL_CMD = \"picocom /dev/ttyUSB0 -b 115200\"\n\n" },
      { name:"TEST_SERIALCONTROL_EXTRA_ARGS", content:"For automated hardware testing, specifies additional arguments to\npass through to the command specified in\n:term:`TEST_SERIALCONTROL_CMD`. Setting\n:term:`TEST_SERIALCONTROL_EXTRA_ARGS` is optional. You can use it if you\nwish, for example, to separate the machine-specific and\nnon-machine-specific parts of the command.\n\n" },
      { name:"TEST_SERVER_IP", content:"The IP address of the build machine (host machine). This IP address\nis usually automatically detected. However, if detection fails, this\nvariable needs to be set to the IP address of the build machine (i.e.\nwhere the build is taking place).\n\n.. note::\n\n   The :term:`TEST_SERVER_IP` variable is only used for a small number of\n   tests such as the \"dnf\" test suite, which needs to download packages\n   from ``WORKDIR/oe-rootfs-repo``.\n\n" },
      { name:"TEST_SUITES", content:"An ordered list of tests (modules) to run against an image when\nperforming automated runtime testing.\n\nThe OpenEmbedded build system provides a core set of tests that can\nbe used against images.\n\n.. note::\n\n   Currently, there is only support for running these tests under\n   QEMU.\n\nTests include ``ping``, ``ssh``, ``df`` among others. You can add\nyour own tests to the list of tests by appending :term:`TEST_SUITES` as\nfollows::\n\n   TEST_SUITES:append = \" mytest\"\n\nAlternatively, you can\nprovide the \"auto\" option to have all applicable tests run against\nthe image::\n\n   TEST_SUITES:append = \" auto\"\n\nUsing this option causes the\nbuild system to automatically run tests that are applicable to the\nimage. Tests that are not applicable are skipped.\n\nThe order in which tests are run is important. Tests that depend on\nanother test must appear later in the list than the test on which\nthey depend. For example, if you append the list of tests with two\ntests (``test_A`` and ``test_B``) where ``test_B`` is dependent on\n``test_A``, then you must order the tests as follows::\n\n   TEST_SUITES = \"test_A test_B\"\n\nFor more information on testing images, see the\n\":ref:`dev-manual/runtime-testing:performing automated runtime testing`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"TEST_TARGET", content:"Specifies the target controller to use when running tests against a\ntest image. The default controller to use is \"qemu\"::\n\n   TEST_TARGET = \"qemu\"\n\nA target controller is a class that defines how an image gets\ndeployed on a target and how a target is started. A layer can extend\nthe controllers by adding a module in the layer's\n``/lib/oeqa/controllers`` directory and by inheriting the\n``BaseTarget`` class, which is an abstract class that cannot be used\nas a value of :term:`TEST_TARGET`.\n\nYou can provide the following arguments with :term:`TEST_TARGET`:\n\n-  *\"qemu\":* Boots a QEMU image and runs the tests. See the\n   \":ref:`dev-manual/runtime-testing:enabling runtime tests on qemu`\" section\n   in the Yocto Project Development Tasks Manual for more\n   information.\n\n-  *\"simpleremote\":* Runs the tests on target hardware that is\n   already up and running. The hardware can be on the network or it\n   can be a device running an image on QEMU. You must also set\n   :term:`TEST_TARGET_IP` when you use\n   \"simpleremote\".\n\n   .. note::\n\n      This argument is defined in\n      ``meta/lib/oeqa/controllers/simpleremote.py``.\n\nFor information on running tests on hardware, see the\n\":ref:`dev-manual/runtime-testing:enabling runtime tests on hardware`\"\nsection in the Yocto Project Development Tasks Manual.\n\n" },
      { name:"TEST_TARGET_IP", content:"The IP address of your hardware under test. The :term:`TEST_TARGET_IP`\nvariable has no effect when :term:`TEST_TARGET` is\nset to \"qemu\".\n\nWhen you specify the IP address, you can also include a port. Here is\nan example::\n\n   TEST_TARGET_IP = \"192.168.1.4:2201\"\n\nSpecifying a port is\nuseful when SSH is started on a non-standard port or in cases when\nyour hardware under test is behind a firewall or network that is not\ndirectly accessible from your host and you need to do port address\ntranslation.\n\n" },
      { name:"TESTIMAGE_AUTO", content:"Automatically runs the series of automated tests for images when an\nimage is successfully built. Setting :term:`TESTIMAGE_AUTO` to \"1\" causes\nany image that successfully builds to automatically boot under QEMU.\nUsing the variable also adds in dependencies so that any SDK for\nwhich testing is requested is automatically built first.\n\nThese tests are written in Python making use of the ``unittest``\nmodule, and the majority of them run commands on the target system\nover ``ssh``. You can set this variable to \"1\" in your ``local.conf``\nfile in the :term:`Build Directory` to have the\nOpenEmbedded build system automatically run these tests after an\nimage successfully builds:\n\n   TESTIMAGE_AUTO = \"1\"\n\nFor more information\non enabling, running, and writing these tests, see the\n\":ref:`dev-manual/runtime-testing:performing automated runtime testing`\"\nsection in the Yocto Project Development Tasks Manual and the\n\":ref:`ref-classes-testimage`\" section.\n\n" },
      { name:"THISDIR", content:"The directory in which the file BitBake is currently parsing is\nlocated. Do not manually set this variable.\n\n" },
      { name:"TIME", content:"The time the build was started. Times appear using the hour, minute,\nand second (HMS) format (e.g. \"140159\" for one minute and fifty-nine\nseconds past 1400 hours).\n\n" },
      { name:"TMPDIR", content:"This variable is the base directory the OpenEmbedded build system\nuses for all build output and intermediate files (other than the\nshared state cache). By default, the :term:`TMPDIR` variable points to\n``tmp`` within the :term:`Build Directory`.\n\nIf you want to establish this directory in a location other than the\ndefault, you can uncomment and edit the following statement in the\n``conf/local.conf`` file in the :term:`Source Directory`::\n\n   #TMPDIR = \"${TOPDIR}/tmp\"\n\nAn example use for this scenario is to set :term:`TMPDIR` to a local disk,\nwhich does not use NFS, while having the :term:`Build Directory` use NFS.\n\nThe filesystem used by :term:`TMPDIR` must have standard filesystem\nsemantics (i.e. mixed-case files are unique, POSIX file locking, and\npersistent inodes). Due to various issues with NFS and bugs in some\nimplementations, NFS does not meet this minimum requirement.\nConsequently, :term:`TMPDIR` cannot be on NFS.\n\n" },
      { name:"TOOLCHAIN_HOST_TASK", content:"This variable lists packages the OpenEmbedded build system uses when\nbuilding an SDK, which contains a cross-development environment. The\npackages specified by this variable are part of the toolchain set\nthat runs on the :term:`SDKMACHINE`, and each\npackage should usually have the prefix ``nativesdk-``. For example,\nconsider the following command when building an SDK::\n\n   $ bitbake -c populate_sdk imagename\n\nIn this case, a default list of packages is\nset in this variable, but you can add additional packages to the\nlist. See the\n\":ref:`sdk-manual/appendix-customizing-standard:adding individual packages to the standard sdk`\" section\nin the Yocto Project Application Development and the Extensible\nSoftware Development Kit (eSDK) manual for more information.\n\nFor background information on cross-development toolchains in the\nYocto Project development environment, see the\n\":ref:`sdk-manual/intro:the cross-development toolchain`\"\nsection in the Yocto Project Overview and Concepts Manual. For\ninformation on setting up a cross-development environment, see the\n:doc:`/sdk-manual/index` manual.\n\nNote that this variable applies to building an SDK, not an eSDK,\nin which case the :term:`TOOLCHAIN_HOST_TASK_ESDK` setting should be\nused instead.\n\n" },
      { name:"TOOLCHAIN_HOST_TASK_ESDK", content:"This variable allows to extend what is installed in the host\nportion of an eSDK. This is similar to :term:`TOOLCHAIN_HOST_TASK`\napplying to SDKs.\n\n" },
      { name:"TOOLCHAIN_OUTPUTNAME", content:"This variable defines the name used for the toolchain output. The\n:ref:`populate_sdk_base <ref-classes-populate-sdk-*>` class sets\nthe :term:`TOOLCHAIN_OUTPUTNAME` variable as follows::\n\n   TOOLCHAIN_OUTPUTNAME ?= \"${SDK_NAME}-toolchain-${SDK_VERSION}\"\n\nSee\nthe :term:`SDK_NAME` and\n:term:`SDK_VERSION` variables for additional\ninformation.\n\n" },
      { name:"TOOLCHAIN_TARGET_TASK", content:"This variable lists packages the OpenEmbedded build system uses when\nit creates the target part of an SDK (i.e. the part built for the\ntarget hardware), which includes libraries and headers. Use this\nvariable to add individual packages to the part of the SDK that runs\non the target. See the\n\":ref:`sdk-manual/appendix-customizing-standard:adding individual packages to the standard sdk`\" section\nin the Yocto Project Application Development and the Extensible\nSoftware Development Kit (eSDK) manual for more information.\n\nFor background information on cross-development toolchains in the\nYocto Project development environment, see the\n\":ref:`sdk-manual/intro:the cross-development toolchain`\"\nsection in the Yocto Project Overview and Concepts Manual. For\ninformation on setting up a cross-development environment, see the\n:doc:`/sdk-manual/index` manual.\n\n" },
      { name:"TOPDIR", content:"See :term:`bitbake:TOPDIR` in the BitBake manual.\n\n" },
      { name:"TRANSLATED_TARGET_ARCH", content:"A sanitized version of :term:`TARGET_ARCH`. This\nvariable is used where the architecture is needed in a value where\nunderscores are not allowed, for example within package filenames. In\nthis case, dash characters replace any underscore characters used in\n:term:`TARGET_ARCH`.\n\nDo not edit this variable.\n\n" },
      { name:"TUNE_ARCH", content:"The GNU canonical architecture for a specific architecture (i.e.\n``arm``, ``armeb``, ``mips``, ``mips64``, and so forth). BitBake uses\nthis value to setup configuration.\n\n:term:`TUNE_ARCH` definitions are specific to a given architecture. The\ndefinitions can be a single static definition, or can be dynamically\nadjusted. You can see details for a given CPU family by looking at\nthe architecture's ``README`` file. For example, the\n``meta/conf/machine/include/mips/README`` file in the\n:term:`Source Directory` provides information for\n:term:`TUNE_ARCH` specific to the ``mips`` architecture.\n\n:term:`TUNE_ARCH` is tied closely to\n:term:`TARGET_ARCH`, which defines the target\nmachine's architecture. The BitBake configuration file\n(``meta/conf/bitbake.conf``) sets :term:`TARGET_ARCH` as follows::\n\n   TARGET_ARCH = \"${TUNE_ARCH}\"\n\nThe following list, which is by no means complete since architectures\nare configurable, shows supported machine architectures:\n\n- arm\n- i586\n- x86_64\n- powerpc\n- powerpc64\n- mips\n- mipsel\n\n" },
      { name:"TUNE_ASARGS", content:"Specifies architecture-specific assembler flags for the target\nsystem. The set of flags is based on the selected tune features.\n:term:`TUNE_ASARGS` is set using the tune include files, which are\ntypically under ``meta/conf/machine/include/`` and are influenced\nthrough :term:`TUNE_FEATURES`. For example, the\n``meta/conf/machine/include/x86/arch-x86.inc`` file defines the flags\nfor the x86 architecture as follows::\n\n   TUNE_ASARGS += \"${@bb.utils.contains(\"TUNE_FEATURES\", \"mx32\", \"-x32\", \"\", d)}\"\n\n.. note::\n\n   Board Support Packages (BSPs) select the tune. The selected tune,\n   in turn, affects the tune variables themselves (i.e. the tune can\n   supply its own set of flags).\n\n" },
      { name:"TUNE_CCARGS", content:"Specifies architecture-specific C compiler flags for the target\nsystem. The set of flags is based on the selected tune features.\n:term:`TUNE_CCARGS` is set using the tune include files, which are\ntypically under ``meta/conf/machine/include/`` and are influenced\nthrough :term:`TUNE_FEATURES`.\n\n.. note::\n\n   Board Support Packages (BSPs) select the tune. The selected tune,\n   in turn, affects the tune variables themselves (i.e. the tune can\n   supply its own set of flags).\n\n" },
      { name:"TUNE_FEATURES", content:"Features used to \"tune\" a compiler for optimal use given a specific\nprocessor. The features are defined within the tune files and allow\narguments (i.e. ``TUNE_*ARGS``) to be dynamically generated based on\nthe features.\n\nThe OpenEmbedded build system verifies the features to be sure they\nare not conflicting and that they are supported.\n\nThe BitBake configuration file (``meta/conf/bitbake.conf``) defines\n:term:`TUNE_FEATURES` as follows::\n\n   TUNE_FEATURES ??= \"${TUNE_FEATURES:tune-${DEFAULTTUNE}}\"\n\nSee the :term:`DEFAULTTUNE` variable for more information.\n\n" },
      { name:"TUNE_LDARGS", content:"Specifies architecture-specific linker flags for the target system.\nThe set of flags is based on the selected tune features.\n:term:`TUNE_LDARGS` is set using the tune include files, which are\ntypically under ``meta/conf/machine/include/`` and are influenced\nthrough :term:`TUNE_FEATURES`. For example, the\n``meta/conf/machine/include/x86/arch-x86.inc`` file defines the flags\nfor the x86 architecture as follows::\n\n   TUNE_LDARGS += \"${@bb.utils.contains(\"TUNE_FEATURES\", \"mx32\", \"-m elf32_x86_64\", \"\", d)}\"\n\n.. note::\n\n   Board Support Packages (BSPs) select the tune. The selected tune,\n   in turn, affects the tune variables themselves (i.e. the tune can\n   supply its own set of flags).\n\n" },
      { name:"TUNE_PKGARCH", content:"The package architecture understood by the packaging system to define\nthe architecture, ABI, and tuning of output packages. The specific\ntune is defined using the \"_tune\" override as follows::\n\n   TUNE_PKGARCH:tune-tune = \"tune\"\n\nThese tune-specific package architectures are defined in the machine\ninclude files. Here is an example of the \"core2-32\" tuning as used in\nthe ``meta/conf/machine/include/x86/tune-core2.inc`` file::\n\n   TUNE_PKGARCH:tune-core2-32 = \"core2-32\"\n\n" },
      { name:"TUNECONFLICTS[feature]", content:"Specifies CPU or Application Binary Interface (ABI) tuning features\nthat conflict with feature.\n\nKnown tuning conflicts are specified in the machine include files in\nthe :term:`Source Directory`. Here is an example from\nthe ``meta/conf/machine/include/mips/arch-mips.inc`` include file\nthat lists the \"o32\" and \"n64\" features as conflicting with the \"n32\"\nfeature::\n\n   TUNECONFLICTS[n32] = \"o32 n64\"\n\n" },
      { name:"TUNEVALID[feature]", content:"Specifies a valid CPU or Application Binary Interface (ABI) tuning\nfeature. The specified feature is stored as a flag. Valid features\nare specified in the machine include files (e.g.\n``meta/conf/machine/include/arm/arch-arm.inc``). Here is an example\nfrom that file::\n\n   TUNEVALID[bigendian] = \"Enable big-endian mode.\"\n\nSee the machine include files in the :term:`Source Directory`\nfor these features.\n\n" },
      { name:"UBOOT_CONFIG", content:"Configures the :term:`UBOOT_MACHINE` and can\nalso define :term:`IMAGE_FSTYPES` for individual\ncases.\n\nFollowing is an example from the ``meta-fsl-arm`` layer. ::\n\n   UBOOT_CONFIG ??= \"sd\"\n   UBOOT_CONFIG[sd] = \"mx6qsabreauto_config,sdcard\"\n   UBOOT_CONFIG[eimnor] = \"mx6qsabreauto_eimnor_config\"\n   UBOOT_CONFIG[nand] = \"mx6qsabreauto_nand_config,ubifs\"\n   UBOOT_CONFIG[spinor] = \"mx6qsabreauto_spinor_config\"\n\nIn this example, \"sd\" is selected as the configuration of the possible four for the\n:term:`UBOOT_MACHINE`. The \"sd\" configuration defines\n\"mx6qsabreauto_config\" as the value for :term:`UBOOT_MACHINE`, while the\n\"sdcard\" specifies the :term:`IMAGE_FSTYPES` to use for the U-Boot image.\n\nFor more information on how the :term:`UBOOT_CONFIG` is handled, see the\n:ref:`ref-classes-uboot-config` class.\n\n" },
      { name:"UBOOT_DTB_LOADADDRESS", content:"Specifies the load address for the dtb image used by U-Boot. During FIT\nimage creation, the :term:`UBOOT_DTB_LOADADDRESS` variable is used in\n:ref:`ref-classes-kernel-fitimage` class to specify the load address to be\nused in creating the dtb sections of Image Tree Source for the FIT image.\n\n" },
      { name:"UBOOT_DTBO_LOADADDRESS", content:"Specifies the load address for the dtbo image used by U-Boot.  During FIT\nimage creation, the :term:`UBOOT_DTBO_LOADADDRESS` variable is used in\n:ref:`ref-classes-kernel-fitimage` class to specify the load address to be\nused in creating the dtbo sections of Image Tree Source for the FIT image.\n\n" },
      { name:"UBOOT_ENTRYPOINT", content:"Specifies the entry point for the U-Boot image. During U-Boot image\ncreation, the :term:`UBOOT_ENTRYPOINT` variable is passed as a\ncommand-line parameter to the ``uboot-mkimage`` utility.\n\n" },
      { name:"UBOOT_LOADADDRESS", content:"Specifies the load address for the U-Boot image. During U-Boot image\ncreation, the :term:`UBOOT_LOADADDRESS` variable is passed as a\ncommand-line parameter to the ``uboot-mkimage`` utility.\n\n" },
      { name:"UBOOT_LOCALVERSION", content:"Appends a string to the name of the local version of the U-Boot\nimage. For example, assuming the version of the U-Boot image built\nwas \"2013.10\", the full version string reported by U-Boot would be\n\"2013.10-yocto\" given the following statement::\n\n   UBOOT_LOCALVERSION = \"-yocto\"\n\n" },
      { name:"UBOOT_MACHINE", content:"Specifies the value passed on the ``make`` command line when building\na U-Boot image. The value indicates the target platform\nconfiguration. You typically set this variable from the machine\nconfiguration file (i.e. ``conf/machine/machine_name.conf``).\n\nPlease see the \"Selection of Processor Architecture and Board Type\"\nsection in the U-Boot README for valid values for this variable.\n\n" },
      { name:"UBOOT_MAKE_TARGET", content:"Specifies the target called in the ``Makefile``. The default target\nis \"all\".\n\n" },
      { name:"UBOOT_MKIMAGE", content:"Specifies the name of the mkimage command as used by the\n:ref:`ref-classes-kernel-fitimage` class to assemble\nthe FIT image. This can be used to substitute an alternative command, wrapper\nscript or function if desired. The default is \"uboot-mkimage\".\n\n" },
      { name:"UBOOT_MKIMAGE_DTCOPTS", content:"Options for the device tree compiler passed to mkimage '-D' feature while\ncreating FIT image in :ref:`ref-classes-kernel-fitimage` class. If\n:term:`UBOOT_MKIMAGE_DTCOPTS` is not set then\n:ref:`ref-classes-kernel-fitimage` will not pass the ``-D`` option to\nmkimage.\n\n" },
      { name:"UBOOT_MKIMAGE_KERNEL_TYPE", content:"Specifies the type argument for the kernel as passed to ``uboot-mkimage``.\nThe default value is \"kernel\".\n\n" },
      { name:"UBOOT_MKIMAGE_SIGN", content:"Specifies the name of the mkimage command as used by the\n:ref:`ref-classes-kernel-fitimage` class to sign\nthe FIT image after it has been assembled (if enabled). This can be used\nto substitute an alternative command, wrapper script or function if\ndesired. The default is \"${:term:`UBOOT_MKIMAGE`}\".\n\n" },
      { name:"UBOOT_MKIMAGE_SIGN_ARGS", content:"Optionally specifies additional arguments for the\n:ref:`ref-classes-kernel-fitimage` class to pass to the\nmkimage command when signing the FIT image.\n\n" },
      { name:"UBOOT_RD_ENTRYPOINT", content:"Specifies the entrypoint for the RAM disk image. During FIT image\ncreation, the :term:`UBOOT_RD_ENTRYPOINT` variable is used in\n:ref:`ref-classes-kernel-fitimage` class to specify the entrypoint to be\nused in creating the Image Tree Source for the FIT image.\n\n" },
      { name:"UBOOT_RD_LOADADDRESS", content:"Specifies the load address for the RAM disk image. During FIT image\ncreation, the :term:`UBOOT_RD_LOADADDRESS` variable is used in\n:ref:`ref-classes-kernel-fitimage` class to specify the load address to\nbe used in creating the Image Tree Source for the FIT image.\n\n" },
      { name:"UBOOT_SIGN_ENABLE", content:"Enable signing of FIT image. The default value is \"0\".\n\n" },
      { name:"UBOOT_SIGN_KEYDIR", content:"Location of the directory containing the RSA key and\ncertificate used for signing FIT image.\n\n" },
      { name:"UBOOT_SIGN_KEYNAME", content:"The name of keys used for signing U-Boot FIT image stored in\n:term:`UBOOT_SIGN_KEYDIR` directory. For e.g. dev.key key and dev.crt\ncertificate stored in :term:`UBOOT_SIGN_KEYDIR` directory will have\n:term:`UBOOT_SIGN_KEYNAME` set to \"dev\".\n\n" },
      { name:"UBOOT_SUFFIX", content:"Points to the generated U-Boot extension. For example, ``u-boot.sb``\nhas a ``.sb`` extension.\n\nThe default U-Boot extension is ``.bin``\n\n" },
      { name:"UBOOT_TARGET", content:"Specifies the target used for building U-Boot. The target is passed\ndirectly as part of the \"make\" command (e.g. SPL and AIS). If you do\nnot specifically set this variable, the OpenEmbedded build process\npasses and uses \"all\" for the target during the U-Boot building\nprocess.\n\n" },
      { name:"UNKNOWN_CONFIGURE_OPT_IGNORE", content:"Specifies a list of options that, if reported by the configure script\nas being invalid, should not generate a warning during the\n:ref:`ref-tasks-configure` task. Normally, invalid\nconfigure options are simply not passed to the configure script (e.g.\nshould be removed from :term:`EXTRA_OECONF` or\n:term:`PACKAGECONFIG_CONFARGS`).\nHowever, there are common options that are passed to all\nconfigure scripts at a class level, but might not be valid for some\nconfigure scripts. Therefore warnings about these options are useless.\nFor these cases, the options are added to :term:`UNKNOWN_CONFIGURE_OPT_IGNORE`.\n\nThe configure arguments check that uses\n:term:`UNKNOWN_CONFIGURE_OPT_IGNORE` is part of the\n:ref:`ref-classes-insane` class and is only enabled if the\nrecipe inherits the :ref:`ref-classes-autotools` class.\n\n" },
      { name:"UPDATERCPN", content:"For recipes inheriting the\n:ref:`ref-classes-update-rc.d` class, :term:`UPDATERCPN`\nspecifies the package that contains the initscript that is enabled.\n\nThe default value is \"${PN}\". Given that almost all recipes that\ninstall initscripts package them in the main package for the recipe,\nyou rarely need to set this variable in individual recipes.\n\n" },
      { name:"UPSTREAM_CHECK_COMMITS", content:"You can perform a per-recipe check for what the latest upstream\nsource code version is by calling ``devtool latest-version recipe``. If\nthe recipe source code is provided from Git repositories, but\nreleases are not identified by Git tags, set :term:`UPSTREAM_CHECK_COMMITS`\nto ``1`` in the recipe, and the OpenEmbedded build system\nwill compare the latest commit with the one currently specified\nby the recipe (:term:`SRCREV`)::\n\n   UPSTREAM_CHECK_COMMITS = \"1\"\n\n" },
      { name:"UPSTREAM_CHECK_GITTAGREGEX", content:"You can perform a per-recipe check for what the latest upstream\nsource code version is by calling ``devtool latest-version recipe``. If\nthe recipe source code is provided from Git repositories, the\nOpenEmbedded build system determines the latest upstream version by\npicking the latest tag from the list of all repository tags.\n\nYou can use the :term:`UPSTREAM_CHECK_GITTAGREGEX` variable to provide a\nregular expression to filter only the relevant tags should the\ndefault filter not work correctly::\n\n   UPSTREAM_CHECK_GITTAGREGEX = \"git_tag_regex\"\n\n" },
      { name:"UPSTREAM_CHECK_REGEX", content:"Use the :term:`UPSTREAM_CHECK_REGEX` variable to specify a different\nregular expression instead of the default one when the package\nchecking system is parsing the page found using\n:term:`UPSTREAM_CHECK_URI`::\n\n   UPSTREAM_CHECK_REGEX = \"package_regex\"\n\n" },
      { name:"UPSTREAM_CHECK_URI", content:"You can perform a per-recipe check for what the latest upstream\nsource code version is by calling ``devtool latest-version recipe``. If\nthe source code is provided from tarballs, the latest version is\ndetermined by fetching the directory listing where the tarball is and\nattempting to find a later tarball. When this approach does not work,\nyou can use :term:`UPSTREAM_CHECK_URI` to provide a different URI that\ncontains the link to the latest tarball::\n\n   UPSTREAM_CHECK_URI = \"recipe_url\"\n\n" },
      { name:"UPSTREAM_VERSION_UNKNOWN", content:"You can perform a per-recipe check for what the latest upstream\nsource code version is by calling ``devtool latest-version recipe``.\nIf no combination of the :term:`UPSTREAM_CHECK_URI`, :term:`UPSTREAM_CHECK_REGEX`,\n:term:`UPSTREAM_CHECK_GITTAGREGEX` and :term:`UPSTREAM_CHECK_COMMITS` variables in\nthe recipe allows to determine what the latest upstream version is,\nyou can set :term:`UPSTREAM_VERSION_UNKNOWN` to ``1`` in the recipe\nto acknowledge that the check cannot be performed::\n\n   UPSTREAM_VERSION_UNKNOWN = \"1\"\n\n" },
      { name:"USE_DEVFS", content:"Determines if ``devtmpfs`` is used for ``/dev`` population. The\ndefault value used for :term:`USE_DEVFS` is \"1\" when no value is\nspecifically set. Typically, you would set :term:`USE_DEVFS` to \"0\" for a\nstatically populated ``/dev`` directory.\n\nSee the \":ref:`dev-manual/device-manager:selecting a device manager`\" section in\nthe Yocto Project Development Tasks Manual for information on how to\nuse this variable.\n\n" },
      { name:"USE_VT", content:"When using\n:ref:`SysVinit <dev-manual/new-recipe:enabling system services>`,\ndetermines whether or not to run a :wikipedia:`getty <Getty_(Unix)>`\non any virtual terminals in order to enable logging in through those\nterminals.\n\nThe default value used for :term:`USE_VT` is \"1\" when no default value is\nspecifically set. Typically, you would set :term:`USE_VT` to \"0\" in the\nmachine configuration file for machines that do not have a graphical\ndisplay attached and therefore do not need virtual terminal\nfunctionality.\n\n" },
      { name:"USER_CLASSES", content:"A list of classes to globally inherit. These classes are used by the\nOpenEmbedded build system to enable extra features.\n\nClasses inherited using :term:`USER_CLASSES` must be located in the\n``classes-global/`` or ``classes/`` subdirectories.\n\nThe default list is set in your ``local.conf`` file::\n\n   USER_CLASSES ?= \"buildstats\"\n\nFor more information, see\n``meta-poky/conf/templates/default/local.conf.sample`` in the\n:term:`Source Directory`.\n\n" },
      { name:"USERADD_ERROR_DYNAMIC", content:"If set to ``error``, forces the OpenEmbedded build system to produce\nan error if the user identification (``uid``) and group\nidentification (``gid``) values are not defined in any of the files\nlisted in :term:`USERADD_UID_TABLES` and\n:term:`USERADD_GID_TABLES`. If set to\n``warn``, a warning will be issued instead.\n\nThe default behavior for the build system is to dynamically apply\n``uid`` and ``gid`` values. Consequently, the\n:term:`USERADD_ERROR_DYNAMIC` variable is by default not set. If you plan\non using statically assigned ``gid`` and ``uid`` values, you should\nset the :term:`USERADD_ERROR_DYNAMIC` variable in your ``local.conf``\nfile as follows::\n\n   USERADD_ERROR_DYNAMIC = \"error\"\n\nOverriding the\ndefault behavior implies you are going to also take steps to set\nstatic ``uid`` and ``gid`` values through use of the\n:term:`USERADDEXTENSION`,\n:term:`USERADD_UID_TABLES`, and\n:term:`USERADD_GID_TABLES` variables.\n\n.. note::\n\n   There is a difference in behavior between setting\n   :term:`USERADD_ERROR_DYNAMIC` to ``error`` and setting it to ``warn``.\n   When it is set to ``warn``, the build system will report a warning for\n   every undefined ``uid`` and ``gid`` in any recipe. But when it is set\n   to ``error``, it will only report errors for recipes that are actually\n   built.\n   This saves you from having to add static IDs for recipes that you\n   know will never be built.\n\n" },
      { name:"USERADD_GID_TABLES", content:"Specifies a password file to use for obtaining static group\nidentification (``gid``) values when the OpenEmbedded build system\nadds a group to the system during package installation.\n\nWhen applying static group identification (``gid``) values, the\nOpenEmbedded build system looks in :term:`BBPATH` for a\n``files/group`` file and then applies those ``uid`` values. Set the\nvariable as follows in your ``local.conf`` file::\n\n\n   USERADD_GID_TABLES = \"files/group\"\n\n.. note::\n\n   Setting the :term:`USERADDEXTENSION` variable to \"useradd-staticids\"\n   causes the build system to use static ``gid`` values.\n\n" },
      { name:"USERADD_PACKAGES", content:"When inheriting the :ref:`ref-classes-useradd` class,\nthis variable specifies the individual packages within the recipe\nthat require users and/or groups to be added.\n\nYou must set this variable if the recipe inherits the class. For\nexample, the following enables adding a user for the main package in\na recipe::\n\n   USERADD_PACKAGES = \"${PN}\"\n\n.. note::\n\n   It follows that if you are going to use the :term:`USERADD_PACKAGES`\n   variable, you need to set one or more of the :term:`USERADD_PARAM`,\n   :term:`GROUPADD_PARAM`, or :term:`GROUPMEMS_PARAM` variables.\n\n" },
      { name:"USERADD_PARAM", content:"When inheriting the :ref:`ref-classes-useradd` class,\nthis variable specifies for a package what parameters should pass to\nthe ``useradd`` command if you add a user to the system when the\npackage is installed.\n\nHere is an example from the ``dbus`` recipe::\n\n   USERADD_PARAM:${PN} = \"--system --home ${localstatedir}/lib/dbus \\\n                          --no-create-home --shell /bin/false \\\n                          --user-group messagebus\"\n\nFor information on the\nstandard Linux shell command ``useradd``, see\nhttps://linux.die.net/man/8/useradd.\n\n" },
      { name:"USERADD_UID_TABLES", content:"Specifies a password file to use for obtaining static user\nidentification (``uid``) values when the OpenEmbedded build system\nadds a user to the system during package installation.\n\nWhen applying static user identification (``uid``) values, the\nOpenEmbedded build system looks in :term:`BBPATH` for a\n``files/passwd`` file and then applies those ``uid`` values. Set the\nvariable as follows in your ``local.conf`` file::\n\n   USERADD_UID_TABLES = \"files/passwd\"\n\n.. note::\n\n   Setting the :term:`USERADDEXTENSION` variable to \"useradd-staticids\"\n   causes the build system to use static ``uid`` values.\n\n" },
      { name:"USERADDEXTENSION", content:"When set to \"useradd-staticids\", causes the OpenEmbedded build system\nto base all user and group additions on a static ``passwd`` and\n``group`` files found in :term:`BBPATH`.\n\nTo use static user identification (``uid``) and group identification\n(``gid``) values, set the variable as follows in your ``local.conf``\nfile: USERADDEXTENSION = \"useradd-staticids\"\n\n.. note::\n\n   Setting this variable to use static ``uid`` and ``gid``\n   values causes the OpenEmbedded build system to employ the\n   :ref:`ref-classes-useradd` class.\n\nIf you use static ``uid`` and ``gid`` information, you must also\nspecify the ``files/passwd`` and ``files/group`` files by setting the\n:term:`USERADD_UID_TABLES` and\n:term:`USERADD_GID_TABLES` variables.\nAdditionally, you should also set the\n:term:`USERADD_ERROR_DYNAMIC` variable.\n\n" },
      { name:"VOLATILE_LOG_DIR", content:"Specifies the persistence of the target's ``/var/log`` directory,\nwhich is used to house postinstall target log files.\n\nBy default, :term:`VOLATILE_LOG_DIR` is set to \"yes\", which means the\nfile is not persistent. You can override this setting by setting the\nvariable to \"no\" to make the log directory persistent.\n\n" },
      { name:"VOLATILE_TMP_DIR", content:"Specifies the persistence of the target's ``/tmp`` directory.\n\nBy default, :term:`VOLATILE_TMP_DIR` is set to \"yes\", in which case\n``/tmp`` links to a directory which resides in RAM in a ``tmpfs``\nfilesystem.\n\nIf instead, you want the ``/tmp`` directory to be persistent, set the\nvariable to \"no\" to make it a regular directory in the root filesystem.\n\nThis supports both sysvinit and systemd based systems.\n\n" },
      { name:"WARN_QA", content:"Specifies the quality assurance checks whose failures are reported as\nwarnings by the OpenEmbedded build system. You set this variable in\nyour distribution configuration file. For a list of the checks you\ncan control with this variable, see the\n\":ref:`ref-classes-insane`\" section.\n\n" },
      { name:"WATCHDOG_TIMEOUT", content:"Specifies the timeout in seconds used by the ``watchdog`` recipe and\nalso by ``systemd`` during reboot. The default is 60 seconds.\n\n" },
      { name:"WIRELESS_DAEMON", content:"For ``connman`` and ``packagegroup-base``, specifies the wireless\ndaemon to use. The default is \"wpa-supplicant\" (note that the value\nuses a dash and not an underscore).\n\n" },
      { name:"WKS_FILE", content:"Specifies the location of the Wic kickstart file that is used by the\nOpenEmbedded build system to create a partitioned image\n(``image.wic``). For information on how to create a partitioned\nimage, see the\n\":ref:`dev-manual/wic:creating partitioned images using wic`\"\nsection in the Yocto Project Development Tasks Manual. For details on\nthe kickstart file format, see the \":doc:`/ref-manual/kickstart`\" Chapter.\n\n" },
      { name:"WKS_FILE_DEPENDS", content:"When placed in the recipe that builds your image, this variable lists\nbuild-time dependencies. The :term:`WKS_FILE_DEPENDS` variable is only\napplicable when Wic images are active (i.e. when\n:term:`IMAGE_FSTYPES` contains entries related\nto Wic). If your recipe does not create Wic images, the variable has\nno effect.\n\nThe :term:`WKS_FILE_DEPENDS` variable is similar to the\n:term:`DEPENDS` variable. When you use the variable in\nyour recipe that builds the Wic image, dependencies you list in the\n:term:`WKS_FILE_DEPENDS` variable are added to the :term:`DEPENDS` variable.\n\nWith the :term:`WKS_FILE_DEPENDS` variable, you have the possibility to\nspecify a list of additional dependencies (e.g. native tools,\nbootloaders, and so forth), that are required to build Wic images.\nFollowing is an example::\n\n   WKS_FILE_DEPENDS = \"some-native-tool\"\n\nIn the\nprevious example, some-native-tool would be replaced with an actual\nnative tool on which the build would depend.\n\n" },
      { name:"WKS_FILES", content:"Specifies a list of candidate Wic kickstart files to be used by the\nOpenEmbedded build system to create a partitioned image. Only the\nfirst one that is found, from left to right, will be used.\n\nThis is only useful when there are multiple ``.wks`` files that can be\nused to produce an image. A typical case is when multiple layers are\nused for different hardware platforms, each supplying a different\n``.wks`` file. In this case, you specify all possible ones through\n:term:`WKS_FILES`.\n\nIf only one ``.wks`` file is used, set :term:`WKS_FILE` instead.\n\n" },
      { name:"WORKDIR", content:"The pathname of the work directory in which the OpenEmbedded build\nsystem builds a recipe. This directory is located within the\n:term:`TMPDIR` directory structure and is specific to\nthe recipe being built and the system for which it is being built.\n\nThe :term:`WORKDIR` directory is defined as follows::\n\n   ${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}\n\nThe actual directory depends on several things:\n\n-  :term:`TMPDIR`: The top-level build output directory\n-  :term:`MULTIMACH_TARGET_SYS`: The target system identifier\n-  :term:`PN`: The recipe name\n-  :term:`EXTENDPE`: The epoch --- if :term:`PE` is not specified, which\n   is usually the case for most recipes, then :term:`EXTENDPE` is blank.\n-  :term:`PV`: The recipe version\n-  :term:`PR`: The recipe revision\n\nAs an example, assume a Source Directory top-level folder name\n``poky``, a default :term:`Build Directory` at ``poky/build``, and a\n``qemux86-poky-linux`` machine target system. Furthermore, suppose\nyour recipe is named ``foo_1.3.0-r0.bb``. In this case, the work\ndirectory the build system uses to build the package would be as\nfollows::\n\n   poky/build/tmp/work/qemux86-poky-linux/foo/1.3.0-r0\n\n" },
      { name:"XSERVER", content:"Specifies the packages that should be installed to provide an X\nserver and drivers for the current machine, assuming your image\ndirectly includes ``packagegroup-core-x11-xserver`` or, perhaps\nindirectly, includes \"x11-base\" in\n:term:`IMAGE_FEATURES`.\n\nThe default value of :term:`XSERVER`, if not specified in the machine\nconfiguration, is \"xserver-xorg xf86-video-fbdev xf86-input-evdev\".\n\n" },
      { name:"XZ_THREADS", content:"Specifies the number of parallel threads that should be used when\nusing xz compression.\n\nBy default this scales with core count, but is never set less than 2\nto ensure that multi-threaded mode is always used so that the output\nfile contents are deterministic. Builds will work with a value of 1\nbut the output will differ compared to the output from the compression\ngenerated when more than one thread is used.\n\nOn systems where many tasks run in parallel, setting a limit to this\ncan be helpful in controlling system resource usage.\n\n" },
      { name:"XZ_MEMLIMIT", content:"Specifies the maximum memory the xz compression should use as a percentage\nof system memory. If unconstrained the xz compressor can use large amounts of\nmemory and become problematic with parallelism elsewhere in the build.\n\"50%\" has been found to be a good value.\n\n" },
      { name:"ZSTD_THREADS", content:"Specifies the number of parallel threads that should be used when\nusing ZStandard compression.\n\nBy default this scales with core count, but is never set less than 2\nto ensure that multi-threaded mode is always used so that the output\nfile contents are deterministic. Builds will work with a value of 1\nbut the output will differ compared to the output from the compression\ngenerated when more than one thread is used.\n\nOn systems where many tasks run in parallel, setting a limit to this\ncan be helpful in controlling system resource usage.\n" },
];
